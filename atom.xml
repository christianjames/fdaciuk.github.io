<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Da2k Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.da2k.com.br/"/>
  <updated>2015-01-12T08:30:27.433Z</updated>
  <id>http://blog.da2k.com.br/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[WordPress: Estrutura inicial do tema, padrões de codificação e uso do editor]]></title>
    <link href="http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/"/>
    <id>http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/</id>
    <published>2015-01-12T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/serie-wp-01.jpg" alt="WordPress"></p>
<p>Este é o primeiro post da nossa série <strong>Como criar temas para WordPress</strong>! É importante salientar que todos os posts serão <em>hands on</em>, então não adianta ficar só lendo! Para aprender de verdade é preciso praticar! Siga todos os passos citados nos posts, crie os arquivos conforme as orientações, que em breve você estará apto para criar seu próprio tema, combinado? ;)</p>
<a id="more"></a>

<blockquote>
<p>Link para o índice: <a href="http://blog.da2k.com.br/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
</blockquote>
<h2 id="Padrões_de_codificação">Padrões de codificação</h2>
<p>Para manter um padrão de codificação, vamos seguir os <a href="http://codex.wordpress.org/WordPress_Coding_Standards" target="_blank" rel="external"><em>Coding Standards</em> do WordPress</a> para PHP, HTML, CSS e Javascript.</p>
<h2 id="Editor">Editor</h2>
<p>Eu irei utilizar o <strong>Sublime Text</strong> para codificar nosso tema, mas você pode utilizar qual você preferir, contanto que mantenha os padrões de codificação dos arquivos, não haverá maiores problemas em utilizar outro editor ou IDE.</p>
<p>Se quiser usar o <strong>Sublime Text</strong> nas mesmas configurações que eu uso, siga as instruções <a href="https://gist.github.com/fdaciuk/8b3269a3d797ee723672" target="_blank" rel="external">desse gist</a>.</p>
<h2 id="Estrutura_inicial_de_arquivos">Estrutura inicial de arquivos</h2>
<p>Nós vamos criando os arquivos conforme a necessidade das funcionalidades do tema, enquanto estivermos desenvolvendo. Então vamos começar apenas com a estrutura abaixo:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .editorconfig</div><div class="line">├── index.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Já vimos no <a href="http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/" target="_blank" rel="external">artigo de apresentação</a> que essa é a estrutura base de um tema para WordPress. Nós iremos utilizar essa mesma estrutura para dar início ao nosso tema.</p>
<p>O único arquivo novo aqui é o <code>.editorconfig</code> (se escreve assim mesmo, com um ponto no início). Com esse arquivo, nós conseguimos setar algumas configurações para criação de arquivos, para que não venhamos ter problemas ao usar editores diferentes.</p>
<p>Vamos usar a seguinte configuração no <code>.editorconfig</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># editorconfig.org</span></div><div class="line"><span class="variable">root =</span> <span class="constant">true</span></div><div class="line">  </div><div class="line">[*]</div><div class="line"><span class="variable">charset =</span> utf-<span class="number">8</span></div><div class="line"><span class="variable">end_of_line =</span> lf</div><div class="line"><span class="variable">indent_size =</span> <span class="number">4</span></div><div class="line"><span class="variable">indent_style =</span> space</div><div class="line"><span class="variable">insert_final_newline =</span> <span class="constant">false</span></div><div class="line"><span class="variable">trim_trailing_whitespace =</span> <span class="constant">true</span></div></pre></td></tr></table></figure>

<p>É necessário instalar o plugin do <em>Editorconfig</em> no seu editor. Para saber mais sobre o <code>.editorconfig</code>, e ver como instalar o plugin para o editor de sua preferência, acesse <a href="http://editorconfig.org/" target="_blank" rel="external">http://editorconfig.org/</a></p>
<p>Nesse caso, nós definimos que todos os nossos arquivos serão salvos com o charset <strong>utf-8</strong>, o estilo de indentação será com espaços (<code>indent_style = space</code>), com tamanho de indentação de <strong>4 espaços</strong> (<code>indent_size = 4</code>). </p>
<p> Nos <em>Coding Standards</em> do WordPress, ele diz que devemos utilizar <code>tabs</code>, mas vamos utilizar espaços aqui. Se você for desenvolver algum tema ou plugin para subir no repositório do WP, você precisa seguir todos os <em>Coding Standards</em> corretamente, nesse caso, usando <em>tab</em> ao invés de <em>space</em>.</p>
<p>Não se preocupe, você não vai precisar ficar dando 4 espaços a todo momento que for indentar. A diferença é que, ao pressionar a tecla <em>TAB</em>, o que o seu editor faz é usar quatro <code>\s</code> (que representa espaços) ao invés de usar um <code>\t</code> (que representa tabulação) com tamanho 4.</p>
<p>A vantagem de utilizar espaços é que, em qualquer editor, o tamanho da indentação vai permanecer sempre igual. Se utilizarmos tab, esse tamanho pode variar para 8 ou 16, dependendo da configuração do editor (não tenho certeza se com o <em>editorconfig</em> instalado o problema continua, mas por garantia, vamos usar espaços).</p>
<p>Também não iremos deixar adicionar uma nova linha ao final do arquivo quando salvar (<code>insert_final_newline = false</code>), e iremos remover espaços em branco sobrando no final das linhas (<code>trim_trailing_whitespace = true</code>).</p>
<h2 id="Quebrando_a_index">Quebrando a index</h2>
<p>Feito isso, vamos quebrar nossa index em algumas partes. O header e o footer serão padrão para todos os templates, então iremos separá-los em mais dois arquivos: <code>header.php</code> e <code>footer.php</code>.</p>
<p>O <code>header.php</code> vai ficar assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"pt-br"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Meu tema WordPress<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> wp_head() <span class="preprocessor">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E o <code>footer.php</code> assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> wp_footer() <span class="preprocessor">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Isso porque nós iremos incluir o mesmo header e o footer em cada arquivo do nosso tema, então separamos em <em>partials</em> para que possamos aproveitá-los sem ficar repetindo código. Mais pra frente você vai entender a vantagem de usar o header e o footer dessa forma, quebrando a abertura / fechamento da tag <code>body</code>.</p>
<p>Temos duas novidades aqui: as funções <code>wp_head()</code> e <code>wp_footer()</code>. Elas são usadas pelo WordPress como <em>hooks</em> (ganchos), para <strong>pendurar</strong> alguns códigos. Veremos o uso disso em posts futuros.</p>
<p>E a nossa <code>index</code> vai ficar assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> get_header() <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">if</span>( have_posts() ) : <span class="keyword">while</span>( have_posts() ) : the_post() <span class="preprocessor">?&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;?php the_permalink() ?&gt;"</span>&gt;</span></div><div class="line">            <span class="php"><span class="preprocessor">&lt;?php</span> the_title() <span class="preprocessor">?&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></div><div class="line">        <span class="php"><span class="preprocessor">&lt;?php</span> the_content() <span class="preprocessor">?&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endwhile</span>; <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">else</span> : <span class="preprocessor">?&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Não existem posts.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endif</span> <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> get_footer() <span class="preprocessor">?&gt;</span></span></div></pre></td></tr></table></figure>

<p>Nas linhas <code>1</code>e <code>19</code> podemos ver duas funções novas: <code>get_header()</code> e <code>get_footer()</code>. Essas funções incluem os arquivos <code>header.php</code> e <code>footer.php</code> no nosso template.</p>
<p><em>Mas o PHP já tem uma função <code>include</code>. Por que eu não posso usar o <code>include</code> do PHP ao invés das funções do WordPress?</em></p>
<p>Em breve iremos falar sobre <em>hooks</em>, e, além da questão <strong>segurança</strong>, é por causa desses <em>hooks</em> que iremos utilizar as funções do WordPress, ao invés de usar o <code>include</code> puro do PHP.</p>
<p><em>E como o WordPress sabe que são esses arquivos que ele precisa incluir, sendo que você acabou de criá-los?</em></p>
<p>O WordPress tem algumas funções que nos ajudam no desenvolvimento do nosso tema. Você pode ler mais sobre isso acessando <a href="http://codex.wordpress.org/Theme_Development" target="_blank" rel="external">http://codex.wordpress.org/Theme_Development</a></p>
<p>Falaremos com mais detalhes sobre cada uma dessas funções nos próximos posts.</p>
<p>Nossa estrutura inicial separada em partials está legal! Mas ainda temos um problema se segurança.</p>
<p><em>Ah é? Onde?</em></p>
<p>Tente acessar o arquivo <code>index.php</code> diretamente pela URL do seu navegador, por exemplo.<br>O index do meu tema está localizado em:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/<span class="number">00</span>-opensource/wordpress/wp-content/themes/wordpress-base-theme-da2k.com.br/index.php</div></pre></td></tr></table></figure>

<p>Será mostrado esse erro: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Fatal error: <span class="operator"><span class="keyword">Call</span> <span class="keyword">to</span> undefined <span class="keyword">function</span> get_header() <span class="keyword">in</span> /<span class="keyword">var</span>/www/<span class="number">00</span>-opensource/wordpress/wp-content/themes/wordpress-base-theme-da2k.com.br/<span class="keyword">index</span>.php <span class="keyword">on</span> line <span class="number">1</span></span></div></pre></td></tr></table></figure>

<p>O erro diz: <em>Chamada para função indefinida get_header() no arquivo [caminho do arquivo] na linha 1</em></p>
<p><em>Por que deu esse erro?</em></p>
<p>A função não está definida, porque o WordPress começa a ser carregado a partir da <code>index.php</code> na raiz do projeto. Ali ele vai incluindo os arquivos necessários para que todas as funções funcionem corretamente. Como nós adicionamos as funções <code>wp_header()</code> e <code>wp_footer()</code> em nossa <code>index</code>, ao acessar o arquivo diretamente, o WordPress não foi carregado, e o PHP acusou esse erro.</p>
<p>E o problema maior é que ele mostra o caminho completo até o arquivo onde deu o erro! Se alguém com más intenções fizer isso no seu site em produção, ele poderá ter facilmente o caminho desde a raiz do seu servidor, até a sua pasta pública, para tentar atacar de alguma forma.</p>
<p><em>E como podemos contornar isso?</em></p>
<p>Se você abrir o arquivo <code>index.php</code> do WordPress, na raiz do projeto, vai ver que ele faz um include (usando <code>require</code>) do arquivo <code>wp-blog-header.php</code>, e nesse arquivo, tem um include para <code>wp-load.php</code>. Nesse arquivo, você verá uma constante definida chamada <code>ABSPATH</code> no início do arquivo.</p>
<p>Como é o WordPress que define essa constante, nós podemos deduzir que, se essa constante não estiver definida, então o WordPress não foi carregado. Logo, podemos ir um pouco mais longe e deduzir que, se esse erro foi mostrado, algum safado-sem-vergonha está tentando acessar nosso site pra tentar encontrar alguma brecha de segurança, correto? Então vamos nos previnir disso! </p>
<p>O código abaixo você precisa colocar em todos os arquivos <code>.php</code> dentro do SEU TEMA, ok?</p>
<p>Por enquanto temos só o <code>header.php</code>, <code>footer.php</code> e <code>index.php</code>, mas quando tivermos mais, esse código deve ser adicionado a cada um deles, ok?</p>
<p>Coloque no início do arquivo:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span></div><div class="line"><span class="keyword">if</span>( ! defined( <span class="string">'ABSPATH'</span> ) ) {</div><div class="line">    header( <span class="string">'Location: /'</span> );</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">}</div><div class="line"><span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>

<p><em>O que nós estamos fazendo aqui?</em></p>
<p>Estamos verificando se o <code>ABSPATH</code> está definido. Se não tiver, vamos redirecionar o safado-sem-vergonha para a home do site! O <code>exit</code> diz ao PHP para parar de renderizar qualquer coisa que vier após esse código, pois se o redirect demorasse, ainda seria possível ver o erro na tela.</p>
<p>E se a constante <code>ABSPATH</code> estiver definida, o PHP pula esse <code>if</code> e segue o fluxo normal :)</p>
<p>Se o seu site estiver em uma subpasta, você precisa adicionar ela no lugar da barra. No meu caso, está em <code>/00-opensource/wordpress/</code>, então vou colocar dessa forma:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span></div><div class="line"><span class="keyword">if</span>( ! defined( <span class="string">'ABSPATH'</span> ) ) {</div><div class="line">    header( <span class="string">'Location: /00-opensource/wordpress/'</span> );</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">}</div><div class="line"><span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>

<p>Agora tente acessar novamente o arquivo <code>index.php</code> e você será redirecionado para a home :D</p>
<p>Não esqueça que isso deve ser feito em todo arquivo <code>.php</code> do seu tema, ok?</p>
<p>Por hoje é só! No próximo post daremos continuidade!</p>
<p>Até lá!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/serie-wp-01.jpg" alt="WordPress"></p>
<p>Este é o primeiro post da nossa série <strong>Como criar temas para WordPress</strong>! É importante salientar que todos os posts serão <em>hands on</em>, então não adianta ficar só lendo! Para aprender de verdade é preciso praticar! Siga todos os passos citados nos posts, crie os arquivos conforme as orientações, que em breve você estará apto para criar seu próprio tema, combinado? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Índice da série: Como criar temas para WordPress]]></title>
    <link href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/"/>
    <id>http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</id>
    <published>2015-01-11T00:00:00.000Z</published>
    <updated>2015-01-11T11:26:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-intro.jpg" alt="WordPress"></p>
<p>Como falei <a href="http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/" target="_blank" rel="external">nesse post</a>, vamos começar uma série completa de posts, mostrando como criar temas para WordPress. Vamos abordar todas as partes necessárias, começando com o básico para criar um blog, passando por criação de páginas institucionais, campos personalizados, até que tenhamos uma estrutura que suporte qualquer tipo de site! </p>
<a id="more"></a>

<p>Não vamos nos ater a nenhum tipo de conteúdo em específico. Ao longo dos posts, vamos criar vários tipos de conteúdo diferentes, para mostrar tudo o que é possível fazer com o WordPress. O código do tema ficará disponível <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">nesse repositório do Github</a> - se você ainda não tem uma conta no Github, é a sua hora de criar :D</p>
<p>Se você tem sugestões sobre o que gostaria que fosse abordado, deixe um comentário no final desse post. </p>
<p>Se tiver algum problema com algum código, dê um <em>fork</em> no projeto e submeta um <em>Pull Request</em>. Se a sua correção for válida, o <em>Pull Request</em> será aceito e você será citado no post que falarmos da correção. Então se você ainda não tem familiaridade com o <a href="https://github.com" target="_blank" rel="external">Github</a>, agora é o momento de aprender isso também :)</p>
<p>Vamos sempre consultar o <a href="http://codex.wordpress.org/" target="_blank" rel="external">Codex</a> e a <a href="http://php.net/manual/en/" target="_blank" rel="external">documentação do PHP</a> para nos auxiliar. Isso vai ajudar também àqueles que têm dificuldades em buscar informações nesses canais.</p>
<p>Informação importante: você deve conhecer os <a href="http://codex.wordpress.org/WordPress_Coding_Standards" target="_blank" rel="external"><em>Coding Standards</em> do WordPress</a>. Acesse o link, leia, experimente. Iremos usá-lo muito, ok? ;)</p>
<p>Esse post servirá como uma introdução à série, e como índice, para organização das postagens. Ele será atualizado conforme os posts forem sendo escritos. E em cada post da série, você verá um link para esse post de introdução, um para o post anterior e um para o próximo post da série.</p>
<p>Aproveite, e bons estudos!</p>
<h2 id="Índice">Índice</h2>
<p>1) <a href="">Estrutura inicial do tema, padrões de codificação e uso do editor - LINK EM BREVE (12/01/2015)</a></p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-intro.jpg" alt="WordPress"></p>
<p>Como falei <a href="http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/" target="_blank" rel="external">nesse post</a>, vamos começar uma série completa de posts, mostrando como criar temas para WordPress. Vamos abordar todas as partes necessárias, começando com o básico para criar um blog, passando por criação de páginas institucionais, campos personalizados, até que tenhamos uma estrutura que suporte qualquer tipo de site! </p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debugar Javascript no browser]]></title>
    <link href="http://blog.da2k.com.br/2015/01/10/debugar-javascript-no-browser/"/>
    <id>http://blog.da2k.com.br/2015/01/10/debugar-javascript-no-browser/</id>
    <published>2015-01-10T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/keep-calm-and-start-debugging.png" alt="Debugue!"></p>
<p>Antigamente a única forma que tínhamos de debugar um código Javascript no browser era usando <code>alert()</code>. Hoje os browsers mais modernos disponibilizam  algumas ferramentas para ajudar nosso desenvolvimento. Uma delas é a API <code>console</code>.</p>
<p>Mas apesar de todos os seus métodos, nem sempre é possível resolver um problema de forma prática somente usando <code>console</code>. </p>
<p><em>Quais são então nossas outras opções?</em> Vem comigo que eu te mostro ;)</p>
<a id="more"></a>

<p>A maior parte das ferramentas de desenvolvimento são bastante parecidas. Para os exemplos desse post, vou usar o <strong>Chrome DevTools</strong>, mas se você estiver usando <strong>Firefox</strong>, <strong>Opera</strong> ou qualquer outro navegador moderno, pode usar o <em>Inspetor</em> do seu próprio browser, que vai ser praticamente a mesma ideia :)</p>
<h2 id="Source">Source</h2>
<p>Abrindo o <strong>DevTools</strong>, temos várias abas. Uma delas é a <strong>Sources</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sources-tab.jpg" alt="Sources"></p>
<p>Nessa aba, podemos ver todos os <em>assets</em> que foram carregados com a nossa página. Se você digitar <code>Ctrl + P</code> (ou <code>Cmd + P</code> no Mac), você consegue escolher um arquivo para abrir, com uma interface bem parecida com a do <strong>Sublime Text</strong> :)</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sources-tab-search-file.jpg" alt="Aba Source com busca de arquivos"></p>
<p>Para facilitar a visualização do arquivo, você também pode esconder as abas laterais, clicando nos botões marcados:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sources-tab-toggle.jpg" alt="Aba Source - botões para esconder abas"></p>
<p><em>Tá, e no que isso vai me ajudar?</em></p>
<p>Calma jovem, vamos ver isso agora :D</p>
<h2 id="Estrutura_de_arquivos">Estrutura de arquivos</h2>
<p>Vamos brincar um pouco. Crie uma estrutura de arquivos assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── index.html</div><div class="line">└── js</div><div class="line">    └── app.js</div></pre></td></tr></table></figure>

<p>Na <code>index.html</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Test Debugger<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"./"</span> <span class="attribute">method</span>=<span class="value">"get"</span> <span class="attribute">data-js</span>=<span class="value">"form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"submit"</span>&gt;</span>Enviar<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">form</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/app.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Um simples formulário que envia um parâmetro <code>name</code> via <code>GET</code>. Perceba que, na aba <strong>Sources</strong> são mostrados todos os arquivos que são públicos do nosso projeto:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/form-html.jpg" alt="Formulário"></p>
<p>Se você submeter esse formulário, ele vai fazer o que precisa ser feito: direcionar a ação para a mesma página (<code>action=&quot;./&quot;</code>) e passar via <em>query string</em> na URL o parâmetro do campo <code>name</code> com o valor preenchido:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/form-html-sent.jpg" alt="Formulário enviado via GET"></p>
<p>Até aqui, nada demais. Vamos agora escrever um pouco de JS para escutar o evento que faz o envio desse formulário. No arquivo <code>js/app.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( doc, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      $private.initEvents();</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.initEvents = <span class="function"><span class="keyword">function</span> <span class="title">initEvents</span><span class="params">()</span> </span>{</div><div class="line">      doc.querySelector( <span class="string">'[data-js="form"]'</span> )</div><div class="line">        .addEventListener( <span class="string">'submit'</span>, $private.handleFormSubmit, <span class="literal">false</span> );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleFormSubmit = <span class="function"><span class="keyword">function</span> <span class="title">handleFormSubmit</span><span class="params">()</span> </span>{</div><div class="line">      <span class="comment">// do something</span></div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  doc.addEventListener( <span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    App().init();</div><div class="line">  }, <span class="literal">false</span> );</div><div class="line">})( <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Nada demais também até aqui. Simplesmente esperamos o DOM estar totalmente carregado e então iniciamos nossa função. Adicionamos um <em>listener</em> ao formulário para ouvir o evento <strong>submit</strong>. Antes do formulário ser enviado, a função de callback para o evento de <em>submit</em> (<code>$private.handleFormSubmit</code>) será executada.</p>
<p><em>Será?</em></p>
<p>Tente submeter o formulário. Como saber se entramos mesmo nessa função? Vamos adicionar um <code>console.log</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$private.handleFormSubmit = <span class="function"><span class="keyword">function</span> <span class="title">handleFormSubmit</span><span class="params">( e )</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Enviou formulário'</span> );</div><div class="line">};</div></pre></td></tr></table></figure>

<p>No seu console, marque a opção <strong>“Preserve log”</strong> para não apagar os logs se a página recarregar:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/console-preserve-log.jpg" alt="Console - Preserve log"></p>
<p>Agora, submeta o formulário novamente. Se olharmos no console, a frase “Enviou formulário” será mostrada.</p>
<p><em>Tá, mas ainda eu não sei em que momento ele entrou nesse evento.</em></p>
<p>Certo, vamos então começar a debugar. Mudando a função de callback do submit, adicionando o comando <code>debugger</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$private.handleFormSubmit = <span class="function"><span class="keyword">function</span> <span class="title">handleFormSubmit</span><span class="params">( e )</span> </span>{</div><div class="line">  debugger;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Enviou formulário'</span> );</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Recarregue a página e tente submeter o formulário novamente. O que aconteceu? O comando <code>debugger</code> não faz parte do Javascript. Ele é uma implementação dos browsers para criar um <em>breakpoint</em> na linha que tem o comando. Fazendo isso, você consegue literalmente parar a execução do browser naquele ponto:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/breakpoint-with-debugger.png" alt="Breakpoint com debugger"></p>
<p> <em>Para ver a imagem acima em tamanho real, abra-a em uma nova aba.</em></p>
<p>Se você reparar na aba lateral, onde mostra <em>Scope Variables</em>, ali você tem todas as variáveis locais e os seus respectivos valores. Ali ele mostra a variável <code>e</code>, representando o objeto <code>Event</code>, que é passada como parâmetro para a função <code>handleFormSubmit</code> pelo evento <code>submit</code>. Nesse objeto contém todas as informações relacionadas ao evento de submit do formulário.</p>
<p>Temos também o famoso <code>this</code>, que, nesse caso, é o nosso formulário. Se você pressionar <code>F8</code> ou clicar na seta azul, ao lado da mensagem que aparece no topo <code>Paused in debugger</code>, o browser continua a execução do script até o próximo breakpoint. Como não temos mais nenhum, ele simplesmente executa as próximas ações normalmente, submetendo o formulário.</p>
<p><em>Legal, mas como eu posso tirar proveito disso?</em></p>
<p>Vou te mostrar algo bem legal agora. Vá no seu console, digite <code>this</code> e dê enter:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/this-window.png" alt="Console this window"></p>
<p>O objeto <code>this</code> aponta para <code>window</code>, porque estamos no escopo global. Até aqui, nenhuma novidade. Agora, submeta o formulário para ele parar no debugger e faça a mesma coisa:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/this-form.png" alt="Console this form"></p>
<p>Percebeu o que acabou de acontecer? Quando estamos parados em algum <em>breakpoint</em>, o escopo do console muda junto! Agora o <code>this</code> aponta para o nosso formulário!</p>
<p>Isso é bastante útil para debugar variáveis locais. Assim você consegue saber exatamente o valor que cada variável está recebendo naquele ponto exato do seu programa xD</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/this-form-name.png" alt="Console this com valor do campo name"></p>
<p><em>Que loko véi! Tem mais? :D</em></p>
<p>Tem sim xD</p>
<p>Você também pode criar seus próprios <em>breakpoints</em> diretamente na aba <strong>Sources</strong>, clicando no número da linha. Mas primeiro, remova a linha <code>debugger</code> do <code>app.js</code>. Agora crie seu breakpoint diretamente no browser:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/manual-breakpoint.png" alt="Breakpoint manual"></p>
<p>Coloquei o DevTools na lateral para facilitar a visualização. Criei dois <em>breakpoints</em> nas linhas <code>18</code> e <code>25</code>, somente clicando sobre o número da linha. Na parte de baixo do DevTools (antes na lateral direita), temos uma guia chamada <strong>Breakpoints</strong>. Ali mostra todos os breakpoints que você adicionou no seu código. Clicando em cima de algum, o navegador dá o foco na linha com o breakpoint.</p>
<p>Agora, recarregue a tela.</p>
<p>Quando o DOM estiver pronto, o navegador para a execução na linha 25, onde fazemos o <code>init</code> do <code>App</code>. Clicando na seta azul ou pressionando <code>F8</code>, o navegador vai até o próximo breakpoint. Como só marcamos o breakpoint dentro do evento, então ele só vai parar quando submetermos o formulário.</p>
<p>Recarregue a tela novamente.</p>
<p>Perceba que, quando parados no breakpoint, ao lado da seta azul, temos uma outra seta, com uma bolinha embaixo. Clicando nela, ou pressionando <code>F10</code>, podemos ver qual o fluxo dentro do arquivo o navegador está seguindo, ou seja, quais são as próximas linhas que ele executa em ordem:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/next-step.png" alt="Próximo passo"></p>
<p>Coloque um breakpoint na linha <code>2</code> e vá clicando nesse botão, e veja você mesmo o que acontece :)</p>
<h2 id="Event_Listener_Breakpoints">Event Listener Breakpoints</h2>
<p>Sabe quando você tem um código muito grande e bagunçado, e está tentando encontrar qual função de callback é chamada quando você clica em determinado elemento da tela? Você faz <em>find</em> no seu editor em busca da função, vasculha arquivos, e perde mó tempão pra conseguir achar. Na aba <strong>Sources</strong>, nós temos a guia <strong>Event Listener Breakpoints</strong> que pode nos ajudar a encontrar isso de forma mais fácil:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/event-listener-breakpoints.png" alt="Source guia Event Listener Breakpoints"></p>
<p>Abrindo essa guia, podemos ver vários eventos que podemos debugar. No caso do clique, você pode selecionar “Mouse &gt; click”. Para exemplificar, vamos ver como podemos ver quando o DOM foi carregado. Abra a opção <strong>DOM Mutation</strong> e selecione <strong>DOMContentLoaded</strong>.</p>
<p>Recarregue a página.</p>
<p>Quando esse evento for executado, será mostrado qual (ou quais, se tiver mais de um) arquivo chama esse evento. Assim podemos ver exatamente, se estivermos usando alguma lib de terceiros, quem precisa esperar o DOM ser carregado, e o que essa lib carrega ao executar esse evento:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/dom-content-loaded.png" alt="DOM Content Loaded"></p>
<p>Essas são apenas algumas funcionalidades que você pode usar para debugar seu código Javascript. Experimente você mesmo as outras opções da aba <strong>Sources</strong> e veja o quanto isso te ajudará no dia a dia!</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/keep-calm-and-start-debugging.png" alt="Debugue!"></p>
<p>Antigamente a única forma que tínhamos de debugar um código Javascript no browser era usando <code>alert()</code>. Hoje os browsers mais modernos disponibilizam  algumas ferramentas para ajudar nosso desenvolvimento. Uma delas é a API <code>console</code>.</p>
<p>Mas apesar de todos os seus métodos, nem sempre é possível resolver um problema de forma prática somente usando <code>console</code>. </p>
<p><em>Quais são então nossas outras opções?</em> Vem comigo que eu te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="debugger" scheme="http://blog.da2k.com.br/tags/debugger/"/>
    
      <category term="devtools" scheme="http://blog.da2k.com.br/tags/devtools/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Estrutura básica de um tema]]></title>
    <link href="http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/"/>
    <id>http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/</id>
    <published>2015-01-09T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress.jpg" alt="WordPress"></p>
<p><strong>WordPress</strong> é uma marca registrada, por isso a necessidade de escrever corretamente: com o W e o P maiúsculos, ok? Mas isso não tem nada a ver com o assunto do post, onde iremos aprender a montar a estrutura básica de um tema para WordPress :P </p>
<p>Sabia que, para criar um tema, você não precisa de nada mais que 2 arquivos? Duvida? Vem que eu te mostro ;)</p>
<a id="more"></a>

<p>Criar temas para <strong>WordPress</strong> é um trabalho bem simples, desde que você conheça PHP, HTML, CSS e Javascript.</p>
<h2 id="Requisitos_mínimos">Requisitos mínimos</h2>
<p>Além do conhecimento citado acima, você precisa ter instalado no seu computador o PHP 5.2.4 ou superior, e o MySQL 5.0 (ou Maria DB) ou superior.</p>
<h2 id="Instalação">Instalação</h2>
<p>A instalação do WordPress é bastante simples. <a href="https://wordpress.org/latest.zip" target="_blank" rel="external">Baixe aqui a última versão</a>. Descompacte-o em algum diretório que seja acessível pelo seu servidor (Apache ou Nginx), e acesse via browser.</p>
<p>Seguindo todos os passos da tela corretamente, não terá problemas :)</p>
<p>Só algumas dicas para a hora da instalação:</p>
<ul>
<li>Não use o nome do usuário como <code>admin</code>;</li>
<li>Use uma senha forte;</li>
<li>Altere o prefixo das tabelas da sua base de dados para algo diferente de <code>wp_</code>.</li>
</ul>
<p>O WordPress é uma ferramenta muito conhecida e bastante utilizada, por isso não use configurações que seriam fáceis de descobrir. Nome de usuário <code>admin</code> é muito comum. Usando esse nome, para invadir seu site só precisa de uns ataques de força bruta na senha. O mesmo vale para sua base de dados: mantendo o prefixo padrão <code>wp_</code>, fica muito mais fácil de alguém tentar invadir.</p>
<h2 id="Criação_do_tema">Criação do tema</h2>
<p>Crie um diretório dentro de <code>wp-content/themes</code> com o nome do seu tema. Use a conveção de letras minúsculas e separação de palavras com um traço <code>-</code>.</p>
<p>Fazendo isso, crie a seguinte estrutura:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── index.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Isso mesmo, só dois arquivos! O WordPress não é que nem “certos CMSs” que você precisar criar milhões de arquivos e XMLs de configuração para criar um tema :P</p>
<p>Brincadeiras à parte, o WordPress tem uma convenção que facilita e muita na hora de criar um tema. </p>
<h2 id="style-css">style.css</h2>
<p>O WordPress pega do seu arquivo <code>style.css</code> alguns parâmetros para apresentar informações do seu tema no Painel.</p>
<p>Os parãmetros mínimos que você precisa adicionar no <code>style.css</code> são esses:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">Theme Name: Nome do seu tema</div><div class="line">Author: Seu nome</div><div class="line">Description: Descrição do tema</div><div class="line">Version: 1.0</div><div class="line">*/</div></pre></td></tr></table></figure>

<p>Com esses parâmetros passados como comentário no início do arquivo <code>style.css</code>, o WP já vai mostrar essas informações no Painel, quando você visualizar o tema.</p>
<p>Para ativar o seu tema, logue-se no painel, em <code>http://seusite.com.br/wp-admin</code>. Vá até o menu <code>Aparência &gt; Temas</code>, selecione o seu tema e ative-o. E pronto! Todos os posts que você fizer já irão utilizar o tema que estamos desenvolvendo :D</p>
<h2 id="index-php">index.php</h2>
<p>O código que o WordPress usa para mostrar os posts é bem simples. Coloque na <code>index.php</code> do seu tema:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"pt-br"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Meu tema WordPress<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">if</span>( have_posts() ) : <span class="keyword">while</span>( have_posts() ) : the_post(); <span class="preprocessor">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="title">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;?php the_permalink() ?&gt;"</span>&gt;</span></div><div class="line">      <span class="php"><span class="preprocessor">&lt;?php</span> the_title() <span class="preprocessor">?&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> the_content() <span class="preprocessor">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endwhile</span>; <span class="preprocessor">?&gt;</span></span> </div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">else</span> : <span class="preprocessor">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Não existem posts.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endif</span> <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Na linha <code>9</code>, temos o que chamamos de <strong>Loop do WordPress</strong>. As funções do WordPress são muito semânticas, e dizem exatamente o que elas fazem: </p>
<p>Primeiro, verificamos se existem posts, com a função <code>have_posts()</code> (o WordPress chama de <code>posts</code>, ou postagens, todo tipo de conteúdo que é possível cadastrar através do painel);</p>
<p>Depois, fazemos um loop por todos os posts (<code>while( have_posts() )</code>) e, para cada post, é chamada a função <code>the_post()</code>. Essa função é responsável por trazer as informações de cada post específico que está relacionado no loop.</p>
<p>Dependendo da URL em que você se encontra, o WordPress sabe exatamente onde deve buscar os posts corretos, por isso o Loop é padrão para todos os arquivos de template.</p>
<p>O WordPress também tem alguns <em>fallbacks</em> para os arquivos do tema. Por exemplo: se no seu tema você tiver um arquivo chamado <code>single.php</code>, com esse mesmo conteúdo, quando você acessar a URL de um post, o WordPress vai procurar pelo arquivo arquivo <code>single.php</code> no seu tema para usar. Se o arquivo não estiver presente, ele usará como fallback o <code>index.php</code>. O <code>index.php</code> é fallback para qualquer arquivo de template do seu tema. Falaremos sobre os arquivos de template em posts futuros.</p>
<p>As outras funções, usadas dentro do Loop, são chamadas de <strong>Template Tags</strong>. Essas funções trazem informações do post. Por exemplo: <code>the_permalink()</code> traz o link do post. <code>the_title()</code> traz o título. <code>the_content()</code> traz o conteúdo. Percebe como os nomes são bastante semânticos? Para ver a lista das Template Tags disponíveis que você pode usar, acesse <a href="http://codex.wordpress.org/Template_Tags#Tags" target="_blank" rel="external">esse link</a>.</p>
<p>Com esse código, você tem a estrutura básica para mostrar praticamente qualquer tipo de conteúdo que cadastrar no seu painel do WordPress.</p>
<p>Obviamente que você não vai deixar seu tema assim, pois tem muuuuita coisa que precisa tratar: </p>
<ul>
<li>categorias;</li>
<li>tags;</li>
<li>datas; </li>
<li>se for um post aberto (single) não precisa do link no título;</li>
<li>página de erro 404;</li>
<li>separar páginas institucionais dos posts de blog;</li>
<li>etc.</li>
</ul>
<p>Mas é só pra mostrar que, ainda assim, você pode começar a aprender WP e fazer um tema somente utilizando dois arquivos :)</p>
<p>Esse artigo é o primeiro de uma série que vou mostrar como criar temas completos, passando desde as funções do WordPress, hooks, até organização e separação de arquivos, boas práticas de desenvolvimento, orientação à objetos com PHP, para separar a lógica da view, entre outras coisinhas mais xD</p>
<p>Ficou curioso? <a href="http://blog.da2k.com.br/atom.xml" target="_blank" rel="external">Assine o RSS</a> e não perca nenhum post! Acompanhe diariamente :D</p>
<p>Ficou alguma dúvida sobre esse post? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress.jpg" alt="WordPress"></p>
<p><strong>WordPress</strong> é uma marca registrada, por isso a necessidade de escrever corretamente: com o W e o P maiúsculos, ok? Mas isso não tem nada a ver com o assunto do post, onde iremos aprender a montar a estrutura básica de um tema para WordPress :P </p>
<p>Sabia que, para criar um tema, você não precisa de nada mais que 2 arquivos? Duvida? Vem que eu te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="tema wordpress" scheme="http://blog.da2k.com.br/tags/tema-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Medindo o tempo de suas instruções]]></title>
    <link href="http://blog.da2k.com.br/2015/01/08/javascript-medindo-o-tempo-de-suas-instrucoes/"/>
    <id>http://blog.da2k.com.br/2015/01/08/javascript-medindo-o-tempo-de-suas-instrucoes/</id>
    <published>2015-01-08T00:00:00.000Z</published>
    <updated>2015-01-08T01:17:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/timer.jpg" alt=""></p>
<p>Quanto tempo demora aquela instrução que você escreveu em JS? Isso, aquele <code>for</code> que itera um array com 350.452 elementos.. você sabe como medir esse tempo? Vem que eu te mostro ;)</p>
<a id="more"></a>

<h2 id="Console">Console</h2>
<p>Todos os navegadores modernos, hoje em dia, tem um <code>console</code> à sua disposição, que você já deve conhecer. Inclusive o <a href="https://github.com/vitorbritto" target="_blank" rel="external">Vitor Britto</a> escreveu um <a href="http://www.vitorbritto.com.br/blog/examinando-sua-aplicacao/" target="_blank" rel="external">ótimo post</a> sobre isso, mostrando os métodos disponíveis no objeto <code>console</code>.</p>
<p>Mas hoje eu queria focar em dois desses métodos, que servirão para medir o tempo que uma instrução demora para executar: o <code>time()</code> e o <code>timeEnd()</code>.</p>
<h2 id="Como_usar">Como usar</h2>
<p>O uso deles não tem segredo algum. Coloque o <code>console.time()</code>, antes da sua instrução, e o <code>console.timeEnd()</code> no final da instrução. Passe como parâmetro uma <em>String</em>, que será a referência utilizada para identificar a instrução. Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.time( <span class="string">'How long does it take to run my "for"?'</span> );</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">350452</span>; i++ ) {</div><div class="line">  i;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.timeEnd( <span class="string">'How long does it take to run my "for"?'</span> );</div></pre></td></tr></table></figure>

<p>Cole o código acima no seu console. A resposta que eu tive foi:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">How long does it take to run my <span class="string">"for"</span>?: <span class="number">257.039</span>ms</div></pre></td></tr></table></figure>

<p>Ou seja, com esses dois métodos simples, eu consigo medir o tempo que a minha instrução está levando para executar, e fica muito fácil tomar ações para otimizar esse código.</p>
<p>Curtiu a dica? Já conhecia? </p>
<p>Nos próximos posts, falaremos um pouco mais sobre performance, e também como otimizar isso, para fazer nossa aplicação voar baixo! Fique ligado!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/timer.jpg" alt=""></p>
<p>Quanto tempo demora aquela instrução que você escreveu em JS? Isso, aquele <code>for</code> que itera um array com 350.452 elementos.. você sabe como medir esse tempo? Vem que eu te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="performance" scheme="http://blog.da2k.com.br/tags/performance/"/>
    
      <category term="debug" scheme="http://blog.da2k.com.br/tags/debug/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code Coverage em Javascript]]></title>
    <link href="http://blog.da2k.com.br/2015/01/07/code-coverage-em-javascript/"/>
    <id>http://blog.da2k.com.br/2015/01/07/code-coverage-em-javascript/</id>
    <published>2015-01-07T00:00:00.000Z</published>
    <updated>2015-01-07T00:10:11.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/istanbul.jpg" alt="Istanbul"></p>
<p>Já conversamos um pouco sobre TDD/BDD e montamos nosso ambiente para começar a brincar com testes. Que tal agora verificarmos como anda nossa cobertura de código? Let’s go!</p>
<a id="more"></a>

<h2 id="Code_Coverage">Code Coverage</h2>
<p>Ferramentas de <em>Code Coverage</em> testam quantos porcento do nosso código está coberto por testes. Se você acompanhou o <a href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/" target="_blank" rel="external">post anterior sobre testes</a>, você já deve ter o <a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="external">Istanbul</a> instalado. Se não tiver, dá uma lida lá no post e prepare seu ambiente :D</p>
<h2 id="Começando">Começando</h2>
<p>Para facilitar, vamos começar usando o mesmo módulo do <a href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/" target="_blank" rel="external">post anterior</a>, o <code>sum.js</code>, e ver quanto o nosso módulo está coberto por testes. Na raiz do seu projeto, execute o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">istanbul cover _mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>Que vai executar o Istanbul, fazendo coverage, e dizendo a ele que estamos usando a interface do Mocha para escrever nossos testes.</p>
<p>E esse será o resultado gerado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ istanbul cover _mocha tests/sumTest.js</div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    ✓ sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span> </div><div class="line">    ✓ sum of <span class="number">10</span> + <span class="number">10</span> should <span class="keyword">return</span> <span class="number">20</span> </div><div class="line">    </div><div class="line">    </div><div class="line">  <span class="number">2</span> passing (<span class="number">11</span>ms)</div><div class="line">  </div><div class="line">=============================================================================</div><div class="line">Writing coverage object [/var/www/tdd/coverage/coverage.json]</div><div class="line">Writing coverage reports at [/var/www/tdd/coverage]</div><div class="line">=============================================================================</div><div class="line"></div><div class="line">=============================== Coverage summary ===============================</div><div class="line">Statements   : <span class="number">100</span>% ( <span class="number">2</span>/<span class="number">2</span> )</div><div class="line">Branches     : <span class="number">100</span>% ( <span class="number">0</span>/<span class="number">0</span> )</div><div class="line">Functions    : <span class="number">100</span>% ( <span class="number">1</span>/<span class="number">1</span> )</div><div class="line">Lines        : <span class="number">100</span>% ( <span class="number">2</span>/<span class="number">2</span> )</div><div class="line">================================================================================</div></pre></td></tr></table></figure>

<p>Nesse resultado, no terminal, ele mostra o resumo de tudo o que os nossos testem cobrem do nosso módulo. Perceba que ele criou um diretório <strong>coverage/</strong> dentro do nosso projeto. Se você acessar via browser a URL do seu projeto + <code>/coverage/lcov-report/</code>, vai conseguir navegar pelos arquivos e visualizar quais partes estão ou não cobertas por testes.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/coverage-sumjs.jpg" alt="Coverage do arquivo sum.js"></p>
<p>Nesse nosso exemplo, todo o nosso código está coberto por testes! Se continuarmos escrevendo TDD corretamente, escrevendo sempre um teste que quebre, um <em>baby step</em> para passar, e fazendo o refactor, nós iremos escrever sempre o mínimo possível de código, e todo ele estará coberto pelos testes.</p>
<p><strong>IMPORTANTE:</strong><br>É importante salientar que um código com 100% de cobertura não garante que todas as possibilidades foram testadas, mas que, tudo o que está sendo testado está passando por todo o código. Mas, como vimos no módulo <code>sum.js</code>, ainda podemos fazer mais uns testes em áreas que já estão cobertas por outros testes.</p>
<p>Só por questões de visualização, vamos adicionar um pouco mais de código no nosso módulo para ver a cobertura cair (NÃO FAÇA ISSO EM CASA!). No arquivo <code>sum.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  <span class="keyword">if</span>( <span class="built_in">isNaN</span>( number1 ) || <span class="built_in">isNaN</span>( number2 ) ) {</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> number1 + number2;</div><div class="line">};</div></pre></td></tr></table></figure>

<p>E execute novamente o comando para verificarmos a cobertura:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">istanbul cover _mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>Olhando no navegador, podemos ver que a cobertura já diminuiu:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/coverage-sumjs2.jpg" alt="Coverage diminuiu"></p>
<p>O <code>I</code> quer dizer que aquele <code>IF</code> não está coberto. Se fosse um <code>E</code>, faltava cobertura para o <code>ELSE</code>. E a linha vermelha é o <em>Statement</em> que não está coberto pelos testes.</p>
<p>Para cobrir essa parte do nosso código por testes, nós precisamos fazer a seguinte pergunta a nós mesmos:</p>
<p><em>- Essa parte não coberta por testes: eu realmente preciso dela no meu código?</em></p>
<p>Se a sua resposta for <em>SIM</em>, então você precisa escrever um teste para cobrí-la. Senão, remova do seu código. Simples assim.</p>
<p>No nosso caso, vamos precisar, pois precisamos saber se o a nossa função realmente recebeu um número. Senão, iremos retornar <code>undefined</code>. Vamos então fazer nosso teste. No arquivo <code>tests/sumTest.js</code>, adicione mais um teste:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'If any parameter is not number, should return undefined'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  should( sum( <span class="number">1</span>, <span class="string">'arroz'</span> ) ).not.be.ok;</div><div class="line">});</div></pre></td></tr></table></figure>

<p><em>Perae, porque você mudou o formato do uso do ShouldJS?</em></p>
<p>Você está retornando <code>undefined</code> quando passar um valor que não seja número por parâmetro na função <code>sum()</code>, certo? Sabemos que <code>undefined</code> e <code>null</code> não têm propriedades. Logo, sempre que você precisar testar se um valor é <code>undefined</code> ou <code>null</code>, você precisa usar o <code>should</code> como função, ok? ;)</p>
<p>Voltando: se o usuário passar um parâmetro que não seja número, devemos retornar <code>undefined</code>. Na nossa asserção, o <code>not.be.ok</code> quer dizer exatamente isso: algo que não esteja <em>ok</em>, ou que seja diferente de <code>true</code>. Em JS, os valores para isso são: <code>&#39;&#39;, null, undefined, 0, NaN</code>. Para ver todas as asserções do ShouldJS, acesse <a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">esse link</a>.</p>
<p>Vamos agora executar o Istanbul e ver como o nosso teste se comporta e o quanto ele cobre do nosso código:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">istanbul cover _mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>E pronto! Agora nosso código está com 100% de cobertura novamente :D</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/coverage-sumjs3.jpg" alt="Novamente 100% coberto"></p>
<h2 id="Extras">Extras</h2>
<p>Para facilitar a execução dos testes, podemos usar o próprio NPM, fazendo algumas malandragens.</p>
<p>Primeiro crie um <code>package.json</code> com o comando <code>npm init</code>. Confirme os dados e edite o arquivo.</p>
<p>Na diretiva <code>scripts</code>, adicione:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": {</div><div class="line">  "test": "mocha -w tests/**/*.js",</div><div class="line">  "coverage": "istanbul cover _mocha tests/**/*.js"</div><div class="line">},</div></pre></td></tr></table></figure>

<p>Então você pode executar os seus testes com o comando <code>npm test</code>. O <code>-w</code> ali significa que o Mocha irá assistir a cada alteração que fizermos no nosso arquivo de teste, e já executará o teste automaticamente.</p>
<p>Para fazer o Coverage, execute <code>npm run coverage</code>, e pronto!</p>
<p>Espero que tenha ficado claro! Dúvidas, poste nos comentários :)</p>
<p>Ah, e não esqueça de se <a href="http://blog.da2k.com.br/atom.xml" target="_blank" rel="external">inscrever no RSS</a> :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/istanbul.jpg" alt="Istanbul"></p>
<p>Já conversamos um pouco sobre TDD/BDD e montamos nosso ambiente para começar a brincar com testes. Que tal agora verificarmos como anda nossa cobertura de código? Let’s go!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="coverage" scheme="http://blog.da2k.com.br/tags/coverage/"/>
    
      <category term="istanbul" scheme="http://blog.da2k.com.br/tags/istanbul/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pensando TDD com Javascript]]></title>
    <link href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/"/>
    <id>http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/</id>
    <published>2015-01-06T00:00:00.000Z</published>
    <updated>2015-01-06T07:49:26.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/tdd-red-refactor-green.jpg" alt="TDD"></p>
<p><strong>TDD</strong> é uma técnica de desenvolvimento. Provavelmente você já leu muitos artigos falando sobre TDD. Talvez você até já experimentou alguma ferramenta de TDD ao desenvolver seus códigos. Mas você continua usando? Você sabe o valor de desenvolver um código testável?</p>
<a id="more"></a>

<p>Assisti muitas palestras sobre TDD, vi vários slides, li artigos e iniciei meus estudos, tentando colocar em prática tudo o que tinha visto. </p>
<p><em>“- Por que iniciar com baby steps?”</em><br><em>“- Por onde eu devo começar?”</em><br><em>“- Devo fazer testes nos meus arquivos já existentes?”</em>,<br><em>“- O que eu devo escrever primeiro?”</em>,<br><em>“- O que realmente eu preciso testar?”</em> </p>
<p>Eram perguntas que sempre vinham a minha mente quando eu começava.</p>
<p>O nome do negócio é auto-explicativo: <strong>TDD - Test Drive Development</strong>, ou “<strong>Desenvolvimento Guiado por Testes</strong>“. Se o desenvolvimento deve ser guiado por testes, significa que eu preciso começar a escrever testes que irão guiar meu desenvolvimento, correto? Correto! Mas como fazer isso? Não é tão simples para começar.</p>
<p>Nas palestras que eu assistia, sempre mostravam as mesmas coisas:</p>
<ul>
<li>Escreva um teste</li>
<li>Desenvolva em cima do teste algo com baby steps</li>
<li>Faça o teste passar</li>
<li>Refatore o código</li>
<li>Escreva outro teste</li>
<li>Continue nessa sequência</li>
</ul>
<p>Eu começava a escrever meus testes e, chegava uma hora que eu já estava todo perdido, pois tinha feito um teste onde eu precisaria escrever uma lógica muito grande de código, e acabava deixando tudo de lado novamente.</p>
<p>Os princípios que eu ouvia estavam corretos, mas eu não conseguia começar sem ver um exemplo real.</p>
<p>Foi então que em Janeiro do ano passado (2014), eu assisti uma palestra do <a href="https://twitter.com/caiofbpa" target="_blank" rel="external">Caio Andrade</a> sobre <strong>Artesanato de Software</strong>, onde ele falava de TDD e Código Limpo( o cara manja muito, sigam ele ae xD).</p>
<p>Trocando algumas ideias com ele, percebi que, o que faltava pra eu entender de vez o porquê de escrever testes, é que eu precisava <strong>pensar TDD</strong> e aprender a escrever código limpo de verdade.</p>
<h2 id="Clean_Code">Clean Code</h2>
<p>Na palestra do Caio, ele recomenda o livro <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="external"><strong>Clean Code</strong></a>, que apesar de ser baseado em Java, os conceitos são possíveis de se aplicar em qualquer linguagem, inclusive Javascript. </p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/clean-code-book.jpg" alt="Livro Clean Code"></p>
<p>Recomendo fortemente a leitura do livro, que tem inclusive <a href="http://www.saraiva.com.br/codigo-limpo-habilidades-praticas-do-agile-software-edicao-revisada-2666082.html" target="_blank" rel="external">versão em pt-BR</a>, se você preferir :D</p>
<p>Vou procurar falar bastante de <em>Clean Code</em> nos meus artigos, citando algumas dicas enquanto estiver mostrando códigos. Mas sério, leia o livro. Você não vai se arrepender, e vai te ajudar muito a pensar de forma diferente enquanto estiver programando :)</p>
<h2 id="Como_começar">Como começar</h2>
<p>Se você está começando agora com TDD, você precisa experimentar bastante, mas fora do seu ambiente de trabalho! Pratique muito as dicas passadas aqui até que fique clara a sua implementação. Se tiver dúvidas, poste nos comentários e vamos crescendo juntos! Também estou a pouco tempo escrevendo testes, mas quanto mais praticamos, mais aprendemos!</p>
<p>Inicialmente, vou mostrar como fazer testes usando Javascript do lado do servidor, com NodeJS. Mas em posts futuros, iremos ver também como implementar no <em>client side</em>, quando criarmos nossos próprios componentes, colocando em prática o que aprendemos nos <a href="http://blog.da2k.com.br/2015/01/05/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-3-3/" target="_blank" rel="external">posts sobre módulos</a>!</p>
<h2 id="Preparando_o_ambiente">Preparando o ambiente</h2>
<p>Vamos começar pela instalação das ferramentas necessárias para iniciarmos nossos testes. Iremos precisar de:</p>
<ul>
<li>NodeJS (óbvio);</li>
<li><a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a> - Para rodar os testes. Deve ser instalado globalmente;</li>
<li><a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="external">Istanbul</a> - Para Code Coverage. Também iremos instalar globalmente;</li>
<li><a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">ShouldJS</a> - Para fazer as asserções. Esse módulo será instalado localmente.</li>
</ul>
<h2 id="Mocha">Mocha</h2>
<p>O Mocha é a ferramenta que vamos utilizar para executar nossos testes, e que vai disponibilizar a interface que necessitamos para padronizar a escrita dos testes. Por questões de legibilidade, iremos utilizar o formato <strong>BDD</strong>.</p>
<p>BDD significa <em>Behavior Driven Development</em>, ou <em>Desenvolvimento Guiado por Comportamento</em>. Ele nada mais é do que uma forma mais “legível” (digamos assim), de escrever nossos testes.</p>
<p>Só pra você entender melhor: em uma interface com TDD (usando <a href="http://nodejs.org/api/assert.html" target="_blank" rel="external">assert</a>, você escreveria seu código mais ou menos assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>( <span class="string">'assert'</span> );</div><div class="line">assert.equal( ( <span class="number">1</span> + <span class="number">2</span> ), <span class="number">3</span>, <span class="string">'1 + 2 should be equal 3'</span> );</div></pre></td></tr></table></figure>

<p>O módulo <code>assert</code> faz parte do core do NodeJS, e ele usa TDD. Seu método <code>equal()</code> recebe 3 parâmetros: o valor atual (que você quer testar), o valor esperado e uma mensagem que será mostrada no seu terminal quando esse teste rodar.</p>
<p>Os parâmetros não ficam implícitos ao olhar esse código pela primeira vez, e sem conhecer o módulo assert. Você sabe que ali tem 3 parâmetros, mas não sabe o que exatamente eles são até que você olhe a documentação.</p>
<p>Agora, olhe como ficaria o mesmo código usando BDD, com o módulo <a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">should</a>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>( <span class="string">'should'</span> );</div><div class="line">( <span class="number">1</span> + <span class="number">2</span> ).should.be.equal( <span class="number">3</span> );</div></pre></td></tr></table></figure>

<p>Precisa dizer algo? O <code>should</code> extende os objetos nativos do JS, adicionando uma propriedade <code>should</code>.<br>Essa propriedade é um objeto com outras propriedades e métodos que dizem exatamente o que é esperado do teste. Traduzindo o código acima, você pode ler:</p>
<blockquote>
<p>1 + 2 deveria ser igual a 3.</p>
</blockquote>
<p>Você também pode usar a variável <code>should</code>, que definimos ao usar <code>require( &#39;should&#39; )</code>, dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>( <span class="string">'should'</span> );</div><div class="line">should( <span class="number">1</span> + <span class="number">2</span> ).be.equal( <span class="number">3</span> );</div></pre></td></tr></table></figure>

<p>Que você terá o mesmo resultado. E a leitura é bastante semãntica.</p>
<p>Esse é o motivo de escolhermos BDD :)</p>
<p>Se quiser, depois você pode visitar o site do Mocha e ver quais são as outras interfaces que ele disponibiliza, e exemplos de cada uma delas, ok? Vamos em frente!</p>
<p><em>Perae, perae.. e o que é esse tal Istanbul?</em></p>
<p>Não comentei sobre ele porque ainda não tinha chegado a hora. Mas já que você perguntou, vamos lá: </p>
<h2 id="Code_Coverage">Code Coverage</h2>
<p>O <strong>Istanbul</strong> vai nos ajudar a fazer a cobertura do nosso código. Quando você começa a escrever testes, como você vai saber se esses testes estão cobrindo todos os <code>if&#39;s</code>, <code>switch&#39;s</code>, <code>function&#39;s</code>, etc, do seu código? O <strong>Istanbul</strong> nos ajuda com isso. Ele mostra a porcentagem de quanto o seu código está coberto por testes, e o que ainda não está testado. Vai ficar mais fácil entender quando começarmos a mexer com ele :)</p>
<h2 id="Continuando…">Continuando…</h2>
<p>Após instalar o NodeJS (se já não o tiver instalado), instale o Mocha e o Istanbul globalmente:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g mocha istanbul</div></pre></td></tr></table></figure>

<p>Agora precisamos de um projeto para ver na prática como fazer nossos testes.</p>
<h2 id="Iniciando_nosso_projeto">Iniciando nosso projeto</h2>
<p>Vamos criar um módulo de soma. Uma função que recebe dois números e retorna a soma desses dois números. Exemplo bem besta, para você ver do início como deve testar um código. Crie a seguinte estrutura para nosso projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app.js</div><div class="line">├── sum.js</div><div class="line">└── /tests</div><div class="line">    └── sumTest.js</div></pre></td></tr></table></figure>

<p>O arquivo <code>app.js</code> executará nossa aplicação. O <code>sum.js</code> será nosso módulo responsável por fazer a soma.<br>E no diretório <code>tests</code>, iremos centralizar nossos testes.</p>
<p>Ainda não temos nenhum código escrito. A ideia de usar TDD (ou BDD), é fazer com que todo o nosso desenvolvimento seja <strong>guiado</strong> por testes. Então, antes de escrever qualquer código, precisamos dizer o que esperamos que o nosso código faça. </p>
<p>Parece insano não? Mas pense como se você estivesse criando uma documentação. Você vai escrever a <strong>interface</strong> do seu projeto, aquilo que você espera que seja público, mostrando como usá-lo. A diferença é que, com TDD, nós vamos garantir que essa interface realmente funciona como deveria.</p>
<p>No final, você vai ver que os seus testes são exatamente isso: a documentação do seu projeto :)</p>
<p>Mas antes de tudo, vamos instalar o <code>should</code>, pois sabemos que vamos precisar dele, como vimos no exemplo lá no começo do artigo:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i should</div></pre></td></tr></table></figure>

<p>Então vamos começar pelo nosso arquivo <code>test/sumTest.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>( <span class="string">'should'</span> );</div><div class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>( <span class="string">'../sum'</span> );</div><div class="line"></div><div class="line">describe( <span class="string">'sum.js'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  it( <span class="string">'sum of 2 + 3 should return 5'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    sum( <span class="number">2</span>, <span class="number">3</span> ).should.be.equal( <span class="number">5</span> );</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>As funções <code>describe()</code> e <code>it()</code> fazem parte da interface do Mocha. O <code>describe()</code> cria um escopo de testes. No nosso caso, vamos usá-lo para testar todo o nosso módulo <code>sum.js</code>. O primeiro parâmetro que ele recebe é uma descrição para esse escopo. Vou deixar somente o nome do módulo, para simplificar. </p>
<p>O segundo parâmetro é a função que será executada quando rodarmos esse escopo.</p>
<p>A função <code>it()</code> é o que vamos usar como <em>wrapper</em> para o nosso teste. No primeiro parâmetro, você coloca a descrição do que você vai testar. O segundo parâmetro é a função que executará quando esse teste rodar.</p>
<p>Devemos usar somente um <code>it()</code> por teste. E cada teste deve testar apenas uma coisa por vez. Da mesma forma que, no seu código, cada método ou função vai ter apenas uma responsabilidade, seguindo o <strong>SRP (Single Responsibility Principle)</strong>, devemos seguir o mesmo princípio para os testes: um <code>it()</code> por teste.</p>
<p>E dentro do <code>it()</code>, fazemos a asserção. O que nós queremos é que, ao passar dois números como parâmetro para nosso módulo, ele retorne a soma desses dois números.</p>
<p>Agora vamos executar nosso teste e ver o que vai acontecer:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>O resultado que você vai obter deve ser parecido com isso:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ mocha tests/sumTest.js </div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    <span class="number">1</span>) sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span></div><div class="line">    </div><div class="line">    </div><div class="line">  <span class="number">0</span> passing (<span class="number">11</span>ms)</div><div class="line">  <span class="number">1</span> failing</div><div class="line">  </div><div class="line">  <span class="number">1</span>) sum.js sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span>:</div><div class="line">     TypeError: object is not a function</div><div class="line">      at Context.&lt;anonymous&gt; (/var/www/tdd/tests/sumTest.js:<span class="number">6</span>:<span class="number">5</span>)</div><div class="line">      at callFn (/usr/lib/node_modules/mocha/lib/runnable.js:<span class="number">251</span>:<span class="number">21</span>)</div><div class="line">      at Test.Runnable.run (/usr/lib/node_modules/mocha/lib/runnable.js:<span class="number">244</span>:<span class="number">7</span>)</div><div class="line">      at Runner.runTest (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">374</span>:<span class="number">10</span>)</div><div class="line">      at /usr/lib/node_modules/mocha/lib/runner.js:<span class="number">452</span>:<span class="number">12</span></div><div class="line">      at next (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">299</span>:<span class="number">14</span>)</div><div class="line">      at /usr/lib/node_modules/mocha/lib/runner.js:<span class="number">309</span>:<span class="number">7</span></div><div class="line">      at next (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">248</span>:<span class="number">23</span>)</div><div class="line">      at Object._onImmediate (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">276</span>:<span class="number">5</span>)</div><div class="line">      at processImmediate [as _immediateCallback] (timers.js:<span class="number">345</span>:<span class="number">15</span>)</div></pre></td></tr></table></figure>

<p>Na linha <code>1</code> mostra o comando de execução do teste.<br>Na linha <code>4</code>, mostra o texto que passamos para o <code>describe()</code>.<br>Na linha <code>5</code> mostra o texto que passamos para o <code>it()</code>, descrevendo o teste.<br>Na linha <code>8</code> e <code>9</code>, mostra quantos dos nossos passaram, e quantos falharam, e o tempo que demoraram para executar.<br>Na linha <code>11</code> ele mostra a descrição do teste que falhou.<br>Na linha <code>12</code> vai mostrar o motivo da falha: <code>TypeError: object is not a function</code>.</p>
<p>Você sabe por que deu erro? Porque ainda não temos a função o nosso módulo <code>sum</code>. Mas no nosso teste, nós fizemos o <code>require</code> dele na variável <code>sum</code>. E dentro do nosso teste, esperávamos que ele fosse uma função, recebendo dois números e retornando a soma dos mesmos.</p>
<p>Acabamos de concluir com sucesso a primeira parte dos testes: o <span style="color: red"><strong>RED</strong></span>. Lembra dos passos completos de um teste, que você vê em todo lugar? Se não sabe, os passos são esses:</p>
<ul>
<li><span style="color: red"><strong>RED</strong></span> - Fazer um teste para quebrar;</li>
<li><span style="color: green"><strong>GREEN</strong></span> - Escrever um código, usando baby steps, para que o teste passe;</li>
<li><strong>REFACTOR</strong> - Com o teste passado, refatorar o código, se necessário, para que funcione de maneira aceitável.</li>
</ul>
<p>Agora vamos para o segundo passo: fazer nosso código funcionar, com o mínimo de código possível.</p>
<p>No arquivo <code>sum.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><em>Por que você retornou <code>5</code> direto?</em></p>
<p>Isso são <em>baby steps</em>. Você não vai fazer toda a implementação do seu código agora, mas somente o MÍNIMO NECESSÁRIO para que o teste passe. Qual o resultado que o nosso teste precisa para passar? Não é <code>5</code>? Então iremos retornar <code>5</code>. Logo você vai entender melhor.</p>
<p>Vamos rodar o teste novamente:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>E o resultado:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ mocha tests/sumTest.js </div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    ✓ sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span> </div><div class="line">    </div><div class="line">  </div><div class="line">  <span class="number">1</span> passing (<span class="number">10</span>ms)</div></pre></td></tr></table></figure>

<p>Nosso teste passou! Aeeee!! Já temos o <span style="color: green"><strong>GREEN</strong></span>. </p>
<p><em>O que precisamos fazer agora?</em></p>
<p>Passamos nesse primeiro teste pelo <span style="color: red"><strong>RED</strong></span> e pelo <span style="color: green"><strong>GREEN</strong></span>. Agora temos que verificar se o nosso código está sujo, se tem algo que poderia melhorar nele para que seja mais legível. Essa é a etapa do <strong>REFACTOR</strong>. </p>
<p>O que pode ser melhorado nesse código? A resposta é: <strong>NADA</strong>!</p>
<p><em>Mas como <strong>NADA</strong>? Você tá louco? Vai deixar um número fixo no código? Tá maluco? Não era pra somar? Vou sair daqui, não quero ler mais!</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/senta-aqui-jovem.jpg" alt="Que rebeldia é essa jovem? Senta aqui, vamos conversar."></p>
<p>Calma jovem. Você vai entender isso agora. Os testes servem para testar todas as possibilidades de entrada de dado que podem chegar ao nosso código. Então ainda não acabou. Vamos testar mais uma possibilidade. </p>
<p>Voltando ao <code>tests/sumTest.js</code>, adicione logo após o primeiro <code>it()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'sum of 10 + 10 should return 20'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  sum( <span class="number">10</span>, <span class="number">10</span> ).should.be.equal( <span class="number">20</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Vamos rodar nosso teste novamente:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>E temos como resultado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ mocha tests/sumTest.js </div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    ✓ sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span> </div><div class="line">    <span class="number">1</span>) sum of <span class="number">10</span> + <span class="number">10</span> should <span class="keyword">return</span> <span class="number">20</span></div><div class="line">    </div><div class="line">    </div><div class="line">  <span class="number">1</span> passing (<span class="number">14</span>ms)</div><div class="line">  <span class="number">1</span> failing</div><div class="line">  </div><div class="line">  <span class="number">1</span>) sum.js sum of <span class="number">10</span> + <span class="number">10</span> should <span class="keyword">return</span> <span class="number">20</span>:</div><div class="line">      </div><div class="line">      AssertionError: expected <span class="number">5</span> to be <span class="number">20</span></div><div class="line">      + expected - actual</div><div class="line">      </div><div class="line">      +<span class="number">20</span></div><div class="line">      -<span class="number">5</span></div><div class="line">      </div><div class="line">      at Assertion.fail (/var/www/tdd/node_modules/should/lib/assertion.js:<span class="number">113</span>:<span class="number">17</span>)</div><div class="line">      at Assertion.prop.(anonymous function) (/var/www/tdd/node_modules/should/lib/assertion.js:<span class="number">39</span>:<span class="number">14</span>)</div><div class="line">      at Context.&lt;anonymous&gt; (/var/www/tdd/tests/sumTest.js:<span class="number">10</span>:<span class="number">29</span>)</div><div class="line">      at callFn (/usr/lib/node_modules/mocha/lib/runnable.js:<span class="number">251</span>:<span class="number">21</span>)</div><div class="line">      at Test.Runnable.run (/usr/lib/node_modules/mocha/lib/runnable.js:<span class="number">244</span>:<span class="number">7</span>)</div><div class="line">      at Runner.runTest (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">374</span>:<span class="number">10</span>)</div><div class="line">      at /usr/lib/node_modules/mocha/lib/runner.js:<span class="number">452</span>:<span class="number">12</span></div><div class="line">      at next (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">299</span>:<span class="number">14</span>)</div><div class="line">      at /usr/lib/node_modules/mocha/lib/runner.js:<span class="number">309</span>:<span class="number">7</span></div><div class="line">      at next (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">248</span>:<span class="number">23</span>)</div><div class="line">      at Object._onImmediate (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">276</span>:<span class="number">5</span>)</div><div class="line">      at processImmediate [as _immediateCallback] (timers.js:<span class="number">345</span>:<span class="number">15</span>)</div></pre></td></tr></table></figure>

<p>Na linha <code>5</code>, mostra que o nosso primeiro teste continua passando.<br>Na linha <code>6</code>, mostra que o nosso segundo teste quebrou.<br>A partir da linha <code>12</code>, mostra a descrição do teste que quebrou: <code>AssertionError: expected 5 to be 20</code>. Ou seja: houve um erro na asserção: era esperado que, o 5 que a função está retornando fosse igual a 20.</p>
<p>Na linha <code>15</code> mostra que, nas linhas abaixo, o que está com o sinal de <code>+</code> é o esperado <em>(expected)</em>, e o que está com o sinal de <code>-</code> é o valor atual <em>(actual)</em>, que foi retornado.</p>
<p>Voltamos ao ciclo, passando com sucesso pelo <span style="color: red"><strong>RED</strong></span>, criando uma nova possibilidade que quebra nosso código.</p>
<p>Tá conseguindo compreender agora o que estamos fazendo? Imagine os testes como aquele usuário que acessa seu site, fazendo aquelas ações que você sempre diz: <em>- Não, o usuário nunca vai fazer isso -</em> e é exatamente o que ele faz :P</p>
<p>Os testes vão garantir que, qualquer bizarrice que o seu código receber como entrada, vai ser tratado corretamente para devolver sempre o valor correto no final. Agora tá ficando legal né, fala a verdade :D</p>
<p>Então, vamos refatorar nosso código, para fazer com que o segundo teste passe. Lembrando que o primeiro teste não deve quebrar, pois já passamos por ele. Agora os dois testes precisam passar. Como vamos fazer isso?</p>
<p>Voltamos ao <code>sum.js</code> e mudamos o nosso <code>return</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> number1 + number2;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Então, executamos novamente nosso teste:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>E temos o resultado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mocha tests/sumTest.js </div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    ✓ sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span> </div><div class="line">    ✓ sum of <span class="number">10</span> + <span class="number">10</span> should <span class="keyword">return</span> <span class="number">20</span> </div><div class="line">    </div><div class="line">    </div><div class="line">  <span class="number">2</span> passing (<span class="number">14</span>ms)</div></pre></td></tr></table></figure>

<p>Uhuull!! Passamos mais um teste! o/</p>
<p>Agora, verificamos se podemos refatorar alguma coisa. Nos dois casos, não houve necessidade de refactor. O código está bem simples e legível. Fizemos somente uma função simples, que retorna dois números passados como parâmetro. Mas aí eu te pergunto: dá pra testar mais alguma coisa ainda nesse código?</p>
<p>Se você começar a pensar nas possibilidades, dá sim. Mas esse post já está grande demais. Como lição de casa, vou deixar para VOCÊ JOVEM, complementar isso e fazer mais alguns testes. Por exemplo: você pode testar se o usuário vai entrar algum valor diferente de número. Se entrar, você precisa ver o que é o mais correto retornar: dispara um erro? Retorna <code>undefined</code>? Você decide. O módulo é seu. Você só precisa testar as possibilidades para ver se ele retorna o que realmente você espera.</p>
<p>Quando você terminar de testar o seu módulo, e executar o <code>mocha</code> com todos os testes passados, vai perceber que tem a documentação completa do seu módulo, dizendo exatamente o que ele faz, o que ele espera e o que ele retorna :D</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Essa foi só uma introdução aos testes. Nem mostrei sobre <em>Code Coverage</em>, mas o farei em um próximo post. E esse vai ser breve, pois minha meta é fazer <a href="">1 post por dia</a> :D</p>
<p>Iremos falar muito sobre TDD/BDD e Clean Code também. Aguarde, nos próximos artigos :D</p>
<p>Não esqueça de assinar o <a href="http://blog.da2k.com.br/atom.xml" target="_blank" rel="external">RSS</a> para receber atualizações sempre que tiver um post novo :)</p>
<p>O <a href="http://willianjusten.com.br/" target="_blank" rel="external">Willian Justen</a> escreveu um <a href="http://willianjusten.com.br/um-post-por-dia/" target="_blank" rel="external">post citando o <strong>#1postperday</strong></a>, pois ele também está participando!</p>
<p>No post, ele dá dicas de algumas ferramentas que você pode usar para se manter atualizado! Siga o blog dele também, tem conteúdo muito bom vindo por ae :D</p>
<p>E então.. deu pra entender bem? Ficou alguma dúvida? Comenta ae, e até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/tdd-red-refactor-green.jpg" alt="TDD"></p>
<p><strong>TDD</strong> é uma técnica de desenvolvimento. Provavelmente você já leu muitos artigos falando sobre TDD. Talvez você até já experimentou alguma ferramenta de TDD ao desenvolver seus códigos. Mas você continua usando? Você sabe o valor de desenvolver um código testável?</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="tdd" scheme="http://blog.da2k.com.br/tags/tdd/"/>
    
      <category term="bdd" scheme="http://blog.da2k.com.br/tags/bdd/"/>
    
      <category term="code coverage" scheme="http://blog.da2k.com.br/tags/code-coverage/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Como criar componentes JS usando módulos - AMD, CommonJS e UMD - Parte 3/3]]></title>
    <link href="http://blog.da2k.com.br/2015/01/05/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-3-3/"/>
    <id>http://blog.da2k.com.br/2015/01/05/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-3-3/</id>
    <published>2015-01-05T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/modules-umd.jpg" alt=""></p>
<p>Já vimos como modularizar nossos códigos usando <a href="http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/" target="_blank" rel="external">AMD</a> e <a href="http://blog.da2k.com.br/2015/01/04/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-2-3/" target="_blank" rel="external">CommonJS</a>. Hoje veremos o <strong>Capitão Planeta</strong> dos módulos: o <strong>UMD</strong>!</p>
<a id="more"></a>

<h2 id="UMD">UMD</h2>
<p><strong>Universal Module Definition</strong> (UMD), é o cara que vai unir os poderes do AMD e do CommonJS em um único componente! Na verdade, ele é responsável por verificar qual dos formatos está sendo usado, para que você não precise duplicar o seu código :)</p>
<p>Seu código usando UMD vai ficar mais ou menos assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( root, factory )</span> </span>{</div><div class="line">  <span class="keyword">if</span>( <span class="keyword">typeof</span> define === <span class="string">'function'</span> && define.amd ) {</div><div class="line">    define([ <span class="string">'jquery'</span> ], factory );</div><div class="line">  }</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>( <span class="keyword">typeof</span> exports === <span class="string">'object'</span> ) {</div><div class="line">    <span class="built_in">module</span>.exports = factory( <span class="built_in">require</span>( <span class="string">'jquery'</span> ) );</div><div class="line">  }</div><div class="line">  <span class="keyword">else</span> {</div><div class="line">    root.myModule = factory( root.jQuery );</div><div class="line">  }</div><div class="line">})(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span><span class="params">( $ )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'Hello World'</span>!</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Eu sei, o código é bem feio, e à primeira vista é meio ruim de entender. Mas vou quebrá-lo em partes para explicar melhor o que ele faz, ok? Vamos lá!</p>
<p>Basicamente, você vai iniciar com uma <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="external">IIFE</a>, ou função imediata, que é uma função auto-executável:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  </div><div class="line">})();</div></pre></td></tr></table></figure>

<p>Essa função vai receber dois parâmetros: o primeiro é o <code>this</code>, definido como <code>root</code>. Todo mundo sabe como o <code>this</code> em Javascript é polêmico, pois ele varia o seu valor conforme o escopo em que ele se encontra. No caso, estamos chamando o <code>this</code> no escopo global, logo, se eu estiver no client (browser), ele vai ser o objeto <code>window</code>. E se eu estiver no server (usando Node, por exemplo), ele será o objeto <code>global</code>.</p>
<p>O segundo parâmetro, definido como <code>factory</code>, é a função que vai executar seu módulo. Sabemos que, em Javascript, funções são objetos de primeira classe. Elas são tratadas como qualquer outro tipo de valor, logo, elas também podem ser passadas por parâmetro para outra função. O <strong>UMD</strong> se aproveita disso para deixar o negócio um pouco mais ilegível e difícil de entender :P</p>
<p>Mas olhando pelo lado bom, assim que você entende isso, fica fácil identificar cada parte :D</p>
<p>Então, passando os parâmetros, vai ficar assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( root, factory )</span> </span>{</div><div class="line">  </div><div class="line">})( <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{} );</div></pre></td></tr></table></figure>

<p>Dentro da função passada como parâmetro vai o código do seu módulo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( root, factory )</span> </span>{</div><div class="line">  </div><div class="line">})( <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// Código do seu módulo</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Agora vamos ver o que acontece por dentro da função principal. Como o <strong>UMD</strong> identifica se você está usando <strong>AMD</strong> ou <strong>CommonJS</strong>.</p>
<p>O formato <strong>AMD</strong> tem por padrão a função <code>define</code> e uma propriedade <code>amd</code> nessa função. É isso que é verificado no primeiro <code>if</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( <span class="keyword">typeof</span> define === <span class="string">'function'</span> && define.amd ) {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Ou seja, se existir um <code>define</code> e este for uma função, e a propriedade <code>amd</code> estiver definida para essa função, então o desenvolvedor está usando alguma lib no formato <strong>AMD</strong>. Sabendo disso, é só eu usar essa função <code>define</code> para “definir” meu módulo, passar as dependências no array e chamar a função que executa o módulo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( <span class="keyword">typeof</span> define === <span class="string">'function'</span> && define.amd ) {</div><div class="line">  define([ <span class="string">'jquery'</span> ], factory );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Lembra quando falamos sobre <strong>AMD</strong>? Cada parâmetro da função do módulo representa uma depência do array, mantendo a ordem. Então a função que é passada como parâmetro (factory), precisa receber o parâmetro para chamar o jQuery dentro do nosso módulo, já que ele é uma dependência:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( root, factory )</span> </span>{</div><div class="line">  <span class="keyword">if</span>( <span class="keyword">typeof</span> define === <span class="string">'function'</span> && define.amd ) {</div><div class="line">    define([ <span class="string">'jquery'</span> ], factory );</div><div class="line">  }</div><div class="line">})( <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span><span class="params">( $ )</span> </span>{</div><div class="line">  <span class="comment">// Código do seu módulo</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Legal não? xD</p>
<p>Já resolvemos o problema do <strong>AMD</strong> :D</p>
<p>Agora, se o usuário não estiver usando AMD, vamos ver se ele está usando <strong>CommonJS</strong>, na próxima verificação:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>( <span class="keyword">typeof</span> exports === <span class="string">'object'</span> ) {</div><div class="line">  <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Vimos que uma das coisas que define o formato <strong>CommonJS</strong> é que ele tem um objeto <code>exports</code>. Então é isso que iremos verificar. Se <code>exports</code> existir, e for um objeto, exportamos nosso módulo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>( <span class="keyword">typeof</span> exports === <span class="string">'object'</span> ) {</div><div class="line">  <span class="built_in">module</span>.exports = factory( <span class="built_in">require</span>( <span class="string">'jquery'</span> ) );</div><div class="line">}</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>

<p>Como precisamos passar o jQuery como parâmetro ao nosso módulo, usamos o <code>require</code>, pois já vimos que é assim que uma dependência é incluída usando esse formato.</p>
<p>Resolvido também o <strong>CommonJS</strong>! o/</p>
<p><em>Mas e se o desenvolvedor quiser usar nosso módulo, mas não estiver usando nem AMD, e nem CommonJS?</em></p>
<p>Nesse caso, podemos dar um nome ao nosso módulo, exportando-o no escopo global, usando o <code>root</code>, que vai ser o objeto <code>window</code>, se ele estiver no browser, ou <code>global</code>, se ele estiver usando Node. Passamos também o objeto <code>jQuery</code>, que já deve estar também no escopo global:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> {</div><div class="line">  root.myModule = factory( root.jQuery );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Da hora né? :D</p>
<p>Existem algumas outras variações do <strong>UMD</strong>, que você pode ver <a href="https://github.com/umdjs/umd" target="_blank" rel="external">aqui</a>.</p>
<p><em>Então a solução é usar <strong>UMD</strong> pra tudo o que eu fizer?</em></p>
<p>Não jovem. </p>
<p>Para tudo o que for referente à sua aplicação em específico, você vai usar um único padrão: ou AMD, ou CommonJS, ou então algum <em>pattern</em> próprio. </p>
<p>Agora, quando você tiver um módulo genérico, que você quiser reutilizar em qualquer ambiente, e em qualquer projeto, é a hora de usar <strong>UMD</strong>.</p>
<p>Ficou claro? Se tiver alguma dúvida, comenta ae :D</p>
<p>Se você ficou um pouco perdido com esses formatos por não conhecer as ferramentas que trabalham com eles (RequireJS, Browserify, etc), não se preocupe! Em breve farei alguns posts falando melhor sobre essas ferramentas e vai ficar muito mais claro de entender :)</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/modules-umd.jpg" alt=""></p>
<p>Já vimos como modularizar nossos códigos usando <a href="http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/" target="_blank" rel="external">AMD</a> e <a href="http://blog.da2k.com.br/2015/01/04/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-2-3/" target="_blank" rel="external">CommonJS</a>. Hoje veremos o <strong>Capitão Planeta</strong> dos módulos: o <strong>UMD</strong>!</p>
]]>
    
    </summary>
    
      <category term="umd" scheme="http://blog.da2k.com.br/tags/umd/"/>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Como criar componentes JS usando módulos - AMD, CommonJS e UMD - Parte 2/3]]></title>
    <link href="http://blog.da2k.com.br/2015/01/04/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-2-3/"/>
    <id>http://blog.da2k.com.br/2015/01/04/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-2-3/</id>
    <published>2015-01-04T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/modules-commonjs.jpg" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/" target="_blank" rel="external">artigo anterior</a>, mostrei um pouco do formato <strong>AMD</strong>. Hoje vamos falar sobre o <strong>CommonJS</strong>.</p>
<a id="more"></a>

<h2 id="CommonJS">CommonJS</h2>
<p>Também conhecido carinhosamente como <strong>CJS</strong>, se você já escreveu algum código em NodeJS vai estar familiarizado com o formato.</p>
<p>Usando o exemplo dado quando falamos sobre AMD, nós podemos escrevê-lo assim, usando CJS:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>( <span class="string">'jquery'</span> );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myModule</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// código do seu módulo</span></div><div class="line">}</div><div class="line"><span class="built_in">module</span>.exports = myModule;</div></pre></td></tr></table></figure>

<p>Nesse formato as coisas ficam muito explícitas. Na variável <code>$</code>, estamos importando através do <code>require</code> o módulo <code>jquery</code>. Na função <code>myModule()</code>, você vai escrever seu módulo, que será exportado através do <code>module.exports</code>, para que possa ser importado para outro arquivo usando o <code>require</code>.</p>
<p>E o módulo <code>jquery</code>, para ser importado com o <code>require</code>, terá uma estrutura mais ou menos assim (arquivo <code>jquery.js</code>): </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// código da jQuery</span></div><div class="line">}</div><div class="line"><span class="built_in">module</span>.exports = jQuery;</div></pre></td></tr></table></figure>

<p>Bem fácil de entender, não?</p>
<p>O <strong>CommonJS</strong> também dispõe de um objeto <code>exports</code>, que nada mais é que um alias para <code>module.exports</code>. Usando o <code>exports</code>, você consegue exportar vários métodos separadamente:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">exports.method1 = <span class="function"><span class="keyword">function</span> <span class="title">method1</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// método 1 do seu módulo</span></div><div class="line">};</div><div class="line"></div><div class="line">exports.method2 = <span class="function"><span class="keyword">function</span> <span class="title">method2</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// método 2 do seu módulo</span></div><div class="line">};</div></pre></td></tr></table></figure>

<p>Que também pode ser escrito dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    method1: <span class="function"><span class="keyword">function</span> <span class="title">method1</span><span class="params">()</span> </span>{</div><div class="line">      <span class="comment">// método 1 do seu módulo</span></div><div class="line">    },</div><div class="line"></div><div class="line">    method2: <span class="function"><span class="keyword">function</span> <span class="title">method2</span><span class="params">()</span> </span>{</div><div class="line">      <span class="comment">// método 2 do seu módulo</span></div><div class="line">    }</div><div class="line">  }</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Os dois retornam exatamente a mesma coisa. Na verdade, no segundo exemplo é necessário executar a função antes de poder usar os métodos, mas os dois são formatos padrão de objetos Javascript, que você já está acostumado (se não está, em breve teremos posts falando sobre isso) :)</p>
<p>Podemos usar o <strong>CommonJS</strong> tanto no servidor, com NodeJS, por exemplo, como no browser, com o <a href="http://browserify.org/" target="_blank" rel="external">browserify</a>.</p>
<p>Bom, vimos que, usando tanto <strong>AMD</strong> como o <strong>CommonJS</strong>, fica fácil de modularizar qualquer código JS. Mas pensando em um cenário mais amplo: como eu vou saber se o desenvolvedor que vai usar meu módulo está usando <strong>AMD</strong> ou <strong>CommonJS</strong>? Vou ter que disponibilizar duas versões?</p>
<p>Criar duas versões do mesmo código é praticamente uma heresia! <a href="http://pt.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="external"><strong>DON’T REPEAT YOURSELF</strong></a>! </p>
<p><em>Mas como resolver isso então?</em> </p>
<p>Vamos ver no próximo post, sobre <strong>UMD</strong>! Aguarde :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/modules-commonjs.jpg" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/" target="_blank" rel="external">artigo anterior</a>, mostrei um pouco do formato <strong>AMD</strong>. Hoje vamos falar sobre o <strong>CommonJS</strong>.</p>
]]>
    
    </summary>
    
      <category term="commonjs" scheme="http://blog.da2k.com.br/tags/commonjs/"/>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Como criar componentes JS usando módulos - AMD, CommonJS e UMD - Parte 1/3]]></title>
    <link href="http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/"/>
    <id>http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/</id>
    <published>2015-01-03T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/modules-amd.jpg" alt=""></p>
<p>Depois de um tempo escrevendo código Javascript, você começa a perceber que algumas coisas começam a se repetir, outras você precisa reutilizar, então você pensa: </p>
<p><em>Como eu posso modularizar isso, para que esse componente seja reutilizado em vários projetos diferentes?</em></p>
<p>Para responder a essa pergunta, entram em cena duas especificações de módulo: <strong>AMD</strong> e <strong>CommonJS</strong> (ou <strong>CJS</strong>).</p>
<p>Eles permitem que você escreva seus códigos de forma modular, seguindo algumas definições. Vamos falar sobre cada um deles.</p>
<a id="more"></a>

<h2 id="AMD">AMD</h2>
<p><strong>Asynchronous Module Definition</strong> (AMD) ficou bastante conhecido por causa do <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>. O formato de utilização do AMD é o seguinte:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define( <span class="string">'moduleName'</span>, [ <span class="string">'jquery'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $ )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'Hello World!'</span>;</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Essa é a estrutura mais básica de um módulo escrito no formato AMD. A função <code>define</code> será usada para todo novo módulo que você criar.</p>
<p>Como primeiro parâmetro dessa função, você pode passar o nome do módulo - opcional - (que será usado para você fazer o “include” dele em outro lugar).</p>
<p>O segundo parâmetro é um array de dependências desse módulo, também opcional. No nosso exemplo, colocamos como dependência a biblioteca jQuery.</p>
<p>E o terceiro parãmetro é a função de callback que define o módulo e retorna o seu conteúdo. Essa função é obrigatória. Ela será chamada assim que todas as dependências do array no segundo parâmetro forem baixadas, e estiverem prontas para uso. </p>
<p>As dependências normalmente retornam valores. Para usar os valores retornados, você deve passar como parâmetros da função as variáveis que irão receber os valores das dependências, sempre na mesma ordem do array.</p>
<p>Por exemplo, se no seu módulo você vai precisar utilizar o jQuery e a LoDash, você pode fazer a chamada da seguinte forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([ <span class="string">'jquery'</span>, <span class="string">'lodash'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $, _ )</span> </span>{</div><div class="line">  <span class="comment">// código do seu módulo</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Se não houver dependências, a função já será executada assim que ela for chamada:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// código do seu módulo</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>A ideia aqui é falar apenas como funcionam cada uma das especificações. Em posts futuros, entrarei em mais detalhes de como usar cada formato, especificamente.</p>
<p>No próximo post, falaremos um pouco sobre o <strong>CommonJS</strong>. Até lá!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/modules-amd.jpg" alt=""></p>
<p>Depois de um tempo escrevendo código Javascript, você começa a perceber que algumas coisas começam a se repetir, outras você precisa reutilizar, então você pensa: </p>
<p><em>Como eu posso modularizar isso, para que esse componente seja reutilizado em vários projetos diferentes?</em></p>
<p>Para responder a essa pergunta, entram em cena duas especificações de módulo: <strong>AMD</strong> e <strong>CommonJS</strong> (ou <strong>CJS</strong>).</p>
<p>Eles permitem que você escreva seus códigos de forma modular, seguindo algumas definições. Vamos falar sobre cada um deles.</p>
]]>
    
    </summary>
    
      <category term="amd" scheme="http://blog.da2k.com.br/tags/amd/"/>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Caminhos relativos no NodeJS]]></title>
    <link href="http://blog.da2k.com.br/2015/01/02/caminhos-relativos-no-nodejs/"/>
    <id>http://blog.da2k.com.br/2015/01/02/caminhos-relativos-no-nodejs/</id>
    <published>2015-01-02T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/nodejs.jpg" alt=""></p>
<p>Sabe quando você precisa dar <code>require</code> em um módulo que você criou, mas ele está em uma estrutura de diretórios bem longe do arquivo que você precisa incluir, e você tem que usar um milhão de <code>../../../</code> para chegar até o diretório certo do seu módulo?</p>
<a id="more"></a>

<p>Se você não entendeu, vou exemplificar. Digamos que você tem a seguinte estrutura de diretórios no seu projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── /controllers</div><div class="line">|   ├── /home</div><div class="line">|   |   ├── homeController.js</div><div class="line">├── /services</div><div class="line">|   ├── /home</div><div class="line">|   |   ├── homeService.js</div><div class="line">├── /routes</div><div class="line">└── app.js</div></pre></td></tr></table></figure>

<p>Imagine que nos <code>services</code> você controla todas as regras de negócio e passa para o seu <code>controller</code>. No controller, você precisa então “requisitar” o <code>service</code> específico, chamando ele dessa forma no arquivo <code>homeController.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> homeService = <span class="built_in">require</span>( <span class="string">'../../services/home/homeService'</span> );</div></pre></td></tr></table></figure>

<p>Como o arquivo <code>homeController.js</code> está dentro do diretório <code>controllers/home</code>, você precisa voltar dois níveis para então chegar no diretório <code>services</code>, entrar ali e chamar o <code>homeService.js</code>.</p>
<p>Agora imagine você fazendo isso em um projeto que começa pequeno, mas vai escalando até ficar gigantesco! Se você resolver refatorar alguma coisa mudando algo de lugar, imagine o trabalho de ficar modificando manualmente essas estruturas de diretórios!</p>
<p>Chato não?!</p>
<p>Mas felizmente, o Node nos dá algumas maneiras de resolver isso. Você pode usar o método <code>resolve()</code> do módulo <a href="http://nodejs.org/api/path.html#path_path_resolve_from_to" target="_blank" rel="external">path</a>, - que é nativo do Node - que vai resolver a sua URL com o caminho absoluto, até onde a aplicação está rodando. Então você pode fazer a chamada assim no seu <code>homeController.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>( <span class="string">'path'</span> );</div><div class="line"><span class="keyword">var</span> homeService = <span class="built_in">require</span>( path.resolve( <span class="string">'services/home/homeService'</span> ) );</div></pre></td></tr></table></figure>

<p>O <code>path</code> vai, a partir do caminho absoluto da sua aplicação, concatenar com o parâmetro passado para o método <code>resolve()</code>. Simples não?</p>
<p>Mas é ruim ter que ficar adicionando mais uma linha em todo arquivo que eu precisar fazer um require. Por isso eu criei um módulo marotinho chamado <a href="https://github.com/fdaciuk/getmodule" target="_blank" rel="external">getmodule</a>, que facilita isso pra você!</p>
<p>O <code>getmodule</code> usa o recurso do <code>path.resolve()</code> para gerar o caminho corretamente, mas ele exporta uma variável global chamada <code>getmodule</code> para que você possa substituir o <code>require</code> por ele.</p>
<p>O módulo é só isso:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">global.getmodule = <span class="function"><span class="keyword">function</span> <span class="title">getmodule</span><span class="params">( modulePath )</span> </span>{</div><div class="line">  <span class="keyword">var</span> path = <span class="built_in">require</span>( <span class="string">'path'</span> );</div><div class="line">  <span class="keyword">return</span> <span class="built_in">require</span>( path.resolve( modulePath ) );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>E para usá-lo, é bem simples. Primeiro instale o módulo no seu projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save getmodule</div></pre></td></tr></table></figure>

<p>Depois, adicione ele ao arquivo principal da sua aplicação. No caso do nosso exemplo, é o <code>app.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( <span class="string">'getmodule'</span> );</div></pre></td></tr></table></figure>

<p>E pronto! Agora, no nosso <code>homeController.js</code>, podemos simplesmente chamar o service dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> homeService = getmodule( <span class="string">'services/home/homeService'</span> );</div></pre></td></tr></table></figure>

<p>Que toda a parte verbosa vai ficar por conta do módulo :D</p>
<p>Ae você me pergunta: <em>É vantagem usar um módulo só pra isso?</em></p>
<p>Eu penso que sim. Senão você vai ter que ficar criando “helpers” no seu projeto pra fazer isso. Vai acabar deixando o negócio meio desorganizado ou com coisas desnecessárias. Como estamos usando um módulo, ele fica no diretório <code>node_modules</code> e se tiver alguma atualização para ele, pode ser feito via <code>npm update</code>. Muito mais prático trabalhar assim com módulos genéricos.</p>
<p>Existem algumas outras formas de resolver esse problema, que foram discutidas <a href="https://www.facebook.com/groups/nodejsbrasil/permalink/580587242074567/" target="_blank" rel="external">nesse link</a> no grupo <strong>NodeJS Brasil</strong>, no Facebook.</p>
<p>Bom, por hoje é só! Gostou da dica? Achou ridículo? Comenta aí :)</p>
<p>Até a próxima :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/nodejs.jpg" alt=""></p>
<p>Sabe quando você precisa dar <code>require</code> em um módulo que você criou, mas ele está em uma estrutura de diretórios bem longe do arquivo que você precisa incluir, e você tem que usar um milhão de <code>../../../</code> para chegar até o diretório certo do seu módulo?</p>
]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meta Tags X-UA-Compatible e Charset]]></title>
    <link href="http://blog.da2k.com.br/2015/01/01/meta-tags-x-ua-compatible-e-charset/"/>
    <id>http://blog.da2k.com.br/2015/01/01/meta-tags-x-ua-compatible-e-charset/</id>
    <published>2015-01-01T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/doctype.jpg" alt=""></p>
<p>Você já deve saber que, com o HTML5, houveram algumas pequenas melhorias para adicionar o charset e o doctype no seu documento. Antigamente era preciso decorar algo parecido com isso:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></div></pre></td></tr></table></figure>

<a id="more"></a>

<p>E sem esquecer de colocar na tag <code>&lt;html&gt;</code> o atributo xmlns:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/1999/xhtml"</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Coisa linda! #sqn</p>
<p>Hoje, para adicionar um doctype, você só precisa de:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div></pre></td></tr></table></figure>

<p>e pronto! O mesmo problema ocorria quando precisávamos adicionar um charset ao documento. Tinhamos que escrever:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html;charset=utf-8"</span> /&gt;</span></div></pre></td></tr></table></figure>

<p>E hoje, só precisamos disso:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div></pre></td></tr></table></figure>

<p>O que muita gente não sabe é que, para que o charset seja setado corretamente no documento, ele precisa estar <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset" target="_blank" rel="external">nos primeiros 512b do seu documento</a>.</p>
<p><em>Aaaahh, por isso que em alguns sites fica aparecendo uns caracteres estranhos?</em></p>
<p>Exatamente! Ou porque a meta tag está após os primeiros 512b, ou porque ela não está presente no documento. Acredite, é muito comum :(</p>
<p><em>E como resolvemos isso?</em> </p>
<p>Colocando a meta tag charset no início do <code>&lt;head&gt;</code>!</p>
<p><em>Aeeeee!! o/</em></p>
<p>Só que com isso, geramos um segundo problema.</p>
<h2 id="A_meta_tag_X-UA-Compatible">A meta tag X-UA-Compatible</h2>
<p>Quem já desenvolve frontend a algum tempo, sabe que o IE é o vilão da internet! E para contornar os problemas que ele tem, podemos usar uma infinidade de <a href="http://browserhacks.com/#ie" target="_blank" rel="external">hacks</a> para manter a compatibilidade com o maior números de versões possíveis.</p>
<p>O IE tem uma coisa feia chamada <strong>Modo de Compatibilidade</strong>. Esse modo foi criado para dar suporte a aplicações que só funcionavam nas versões mais antigas do IE (sabe-se lá porque cargas d’água não atualizavam a disgrama da aplicação). Então, era só clicar no botão em formato de <em>folha</em>, que aparece na barra de endereços no IE, que ele renderizava como se fosse uma versão mais antiga.</p>
<p>Só que esse modo não fica aplicado somente para a aplicação selecionada. Qualquer outro endereço de site que for acessado, vai abrir com essa versão mais antiga. </p>
<p>Para “resolver” isso, você precisa adicionar a meta tag <strong>X-UA-Compatible</strong> no <code>&lt;head&gt;</code>, dessa forma:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=Edge"</span> /&gt;</span></div></pre></td></tr></table></figure>

<blockquote>
<p>Sobre a X-UA-Compatible: <a href="http://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx</a></p>
</blockquote>
<p>O <code>IE=Edge</code> diz para o IE renderizar aquela página com a versão mais recente que ele tiver. Ou seja, se o usuário clicou no modo de compatibilidade do IE9 para usar a versão 7, essa meta tag avisa que o IE deve usar sempre a versão mais recente, no caso, a 9.</p>
<p>Você ainda pode mudar o content dessa tag, passando a versão que você quer que o IE renderize, fazendo dessa forma (por exemplo):</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=8"</span> /&gt;</span></div></pre></td></tr></table></figure>

<p>Isso vai dizer que o IE deve renderizar aquela página sempre como IE8 (se disponível essa versão).</p>
<p>Maaaas, essa tag tem um segredo, que pouquíssimas pessoas conhecem: se ela não for colocada como PRIMEIRA TAG DENTRO DO <code>&lt;HEAD&gt;</code>, o IE simplesmente ignora ela!</p>
<p>Na página que fala sobre a tag, tem a seguinte citação:</p>
<blockquote>
<p>The X-UA-Compatible header isn’t case sensitive; however, it must appear in the header of the webpage (the HEAD section) before all other elements <strong>except for the title element and other meta elements</strong>.</p>
</blockquote>
<p>Mas essa exceção, na verdade, não existe :(</p>
<p>Ela precisa vir antes de todas as outras. Ou seja, se no seu site estiver assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=Edge"</span> /&gt;</span></div><div class="line">    ...</div></pre></td></tr></table></figure>

<p>Não vai funcionar! O IE não vai nem dar bola pra ela e vai continuar no modo que o usuário deixou.<br>Triste, não?! :(</p>
<p>O correto é deixar dessa forma:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=Edge"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">    ...</div></pre></td></tr></table></figure>

<p>Bom, eram essas dicas que eu queria deixar:</p>
<ul>
<li>meta charset deve estar sempre antes dos 512b do documento;</li>
<li>X-UA-Compatible sempre no início do <code>&lt;head&gt;</code>.</li>
</ul>
<p>Fazendo isso, você não terá problemas (ao menos, não com charset ou com renderização de versões antigas do IE :P) :)</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/doctype.jpg" alt=""></p>
<p>Você já deve saber que, com o HTML5, houveram algumas pequenas melhorias para adicionar o charset e o doctype no seu documento. Antigamente era preciso decorar algo parecido com isso:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="html5" scheme="http://blog.da2k.com.br/tags/html5/"/>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="html" scheme="http://blog.da2k.com.br/categories/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Um post por dia]]></title>
    <link href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/"/>
    <id>http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</id>
    <published>2014-12-31T13:16:13.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/12/calendar.jpg" alt=""></p>
<p>Comecei com esse blog no início de 2014. Pretendia escrever vários posts, com uma frequência razoável, ao menos uma vez por mês, mas isso foi um mito. E pude perceber que não só pra mim, mas pra muita gente é complicado dedicar um tempo específico para escrever e manter o blog atualizado. Por isso resolvi lançar esse desafio a mim mesmo: <strong>escrever 1 post por dia em 2015</strong>.</p>
<a id="more"></a>

<p>Minha meta é chegar ao final do ano com, ao menos, 300 posts novos - dando uma margem de segurança de 65 dias pra poder respirar :P - para compartilhar conteúdo de qualidade em pt-BR sobre desenvolvimento web, focando em (mas não se limitando a) Javascript, HTML, CSS e WordPress.</p>
<p>A ideia principal dessa iniciativa é gerar e compartilhar muito conteúdo bom em pt-BR. Coisas que ainda não foram faladas (ou talvez já :P), mas que agreguem conhecimento para, desde o cara que está começando na área, até o cara que já tem 30 anos de experiência :D</p>
<p>Os posts podem ser desde dicas até tutorias completos, dicas sobre ferramentas, organização de arquivos, testes, workflow, etc.</p>
<p>Todos os posts serão compartilhados com a hashtag <strong>#1postperday</strong>.</p>
<p>Ideia doida? Pois é.. não sei se conseguirei fazer os posts diariamente, mas ao menos eu vou tentar.. o desafio está lançado!</p>
<p>Quer sugerir algum tema para os posts? Deixe seu comentário <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">nessa issue</a>.</p>
<p>Quer participar também? Não há regras, a não ser respeitar a frequência! Faça ao menos 1 post por dia e compartilhe-o usando a hashtag <strong>#1postperday</strong>! Se achar que é muito, use a criatividade e faça <strong>#1postperweek</strong> ou até <strong>#1postpermonth</strong>!</p>
<p>E que venha 2015! o/</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/12/calendar.jpg" alt=""></p>
<p>Comecei com esse blog no início de 2014. Pretendia escrever vários posts, com uma frequência razoável, ao menos uma vez por mês, mas isso foi um mito. E pude perceber que não só pra mim, mas pra muita gente é complicado dedicar um tempo específico para escrever e manter o blog atualizado. Por isso resolvi lançar esse desafio a mim mesmo: <strong>escrever 1 post por dia em 2015</strong>.</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordCamp Belo Horizonte 2014 - Minhas impressões]]></title>
    <link href="http://blog.da2k.com.br/2014/05/19/wordcamp-belo-horizonte-2014-minhas-impressoes/"/>
    <id>http://blog.da2k.com.br/2014/05/19/wordcamp-belo-horizonte-2014-minhas-impressoes/</id>
    <published>2014-05-19T02:42:44.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/23071767957a2edbe1d4d2bf1a0bc1d876f5d3ab/68747470733a2f2f7261772e6769746875622e636f6d2f6664616369756b2f74616c6b732f6d61737465722f6173736574732f696d616765732f776f726463616d702d62682e6a7067" alt="WordCamp Belo Horizonte"></p>
<p>O <strong>WordCamp</strong>, como você já deve saber, é um evento internacional, que reúne pessoas de todos os lugares do mundo para falar de <strong>WordPress</strong>.</p>
<p>No último sábado (17/05/14), aconteceu o <strong><a href="http://2014.belohorizonte.wordcamp.org/" target="_blank" rel="external">WordCamp Belo Horizonte</a></strong>. E já pra começo de conversa: Foi o <strong>WordCamp</strong> mais animal que já participei! O evento se superou em tudo. Então, já gostaria de agradecer ao <a href="https://www.facebook.com/valerio.souza" target="_blank" rel="external">Valério</a> que organizou tudo com muito carinho pra fazer o melhor <strong>WordCamp</strong> de todos os tempos!</p>
<p>O cara tá morando no Rio de Janeiro, e fez o negócio acontecer de longe mesmo!</p>
<p>E não faltou o famoso pão de queijo! Teve até sorteio de uma caixa no final do evento xD</p>
<p>Mas vou começar pela viagem. Vem comigo!</p>
<a id="more"></a>

<h2 id="A_viagem">A viagem</h2>
<p>Sexta (16/05) e domingo (28/05) foram praticamente o dia todo dentro de ônibus e aviões. A viagem daqui de Joinville até BH foi bem longa, passando por Curitiba, Congonhas/SP e depois Belo Horizonte. Chegando lá, ainda foi necessário mais 1h de ônibus para chegar até próximo ao local do evento.</p>
<p>Foi cansativo, mas posso garantir que valeu muito a pena! Fizemos um encontro pré-evento na sexta pra conhecer a galera, trocar ideias e jogar conversa fora!</p>
<p>Enfim, chegou o sábado xD</p>
<h2 id="O_WordCamp">O WordCamp</h2>
<p>O evento começou com mais ou menos 1h de atraso, pois tinha muita gente pra fazer o cadastramento (mais de 300 pessoas), mas só havia 1 computador para fazer validar o cadastro e fazer o crachá dos participantes.</p>
<p>Ouvi algumas pessoas reclamando do atraso, alguns postando no Twitter também sobre isso. Vou dizer o que eu penso sobre: o evento foi (e é) feito para a comunidade. Enquanto alguns reclamaram por causa da demora, outros já foram abrindo seus notebooks e tablets, pedindo que o arquivo onde estavam os cadastros fosse compartilhado para que pudessem agilizar o processo. E isso economizou pelo menos mais 1 ou 2 horas de trabalho que estava sendo feito por apenas uma única pessoa.</p>
<p>Isso é o trabalho da comunidade! Todo mundo se ajudando da forma que pode, pra fazer o negócio acontecer da melhor forma possível!</p>
<p>E outra: quem reclamou foram 1 ou 2. As outras mais de 300 pessoas com certeza saíram de lá muito satisfeitas com o resultado xD</p>
<p>Mas apesar do pequeno atraso (normal em qualquer evento), o <strong>WordCamp Belo Horizonte</strong> foi um sucesso! As palestras foram de muito alto nível, o networking foi fenomenal! Encontrei amigos de outros WordCamps e pude conhecer pessoalmente algumas pessoas que sempre participam do <a href="https://www.facebook.com/groups/wordpress.brasil/" target="_blank" rel="external">Grupo WordPress Brasil, no Facebook</a>. Foi fantástico!</p>
<p>Teve gente vindo do Rio de Janeiro só para ser voluntário no evento! Isso é coisa linda de se ver :D</p>
<p>Foram <a href="http://2014.belohorizonte.wordcamp.org/programacao/" target="_blank" rel="external">20 palestrantes</a> de todo lugar do Brasil (inclusive uma Argentina xD), compartilhando conhecimento com a galera! </p>
<p>Dois palestrantes tiveram alguns imprevistos e não puderam comparecer por motivos pessoais, mas isso não foi um problema: O Luan Muniz conseguiu cobrir (e muito bem) um dos espaços com uma excelente palestra sobre como colaborar com projetos Open Source.</p>
<p>É notório como a comunidade de <strong>WordPress</strong> está crescendo muito no Brasil inteiro, e isso eu pude constatar nesse último WordCamp.</p>
<h2 id="Estrutura">Estrutura</h2>
<p>O evento foi realizado na <a href="http://2014.belohorizonte.wordcamp.org/guia-de-sobrevivencia/" target="_blank" rel="external">UNIBH</a>, um local muito bem localizado no bairro Estoril, em BH. Duas salas e o auditório principal da Universidade foram disponibilizados para as apresentações. Não foi possível assistir a todas as palestras do dia, pois estavam sendo apresentadas de 3 em 3; mas todo o conteúdo foi filmado e será disponibilizado em breve no <a href="http://2014.belohorizonte.wordcamp.org/" target="_blank" rel="external">site oficial do WordCamp Belo Horizonte</a>. Assim ninguém vai chorar porque não viu uma palestra ou outra xD</p>
<p>Havia algumas tomadas espalhadas pelo local, que foram suficientes pra carregar um ou outro smartphone ou notebook que arriou antes do tempo xD</p>
<p>A internet foi bem boa, na medida do possível, mas atendeu bem todo o público presente. Até porque, para uma estrutura WiFi suportar 300 conexões simultâneas é bem complicado, mas deu tudo certo!</p>
<p>Foi disponibilizado também, gratuitamente, um almoço no local, para que ninguém precisasse sair em busca de comida, haha! Tinha muitas bocas pra alimentar, mas todo mundo pôde comer bem a excelente comida mineira!</p>
<h2 id="Conteúdo">Conteúdo</h2>
<p>Muito conteúdo foi compartilhado durante todo o evento nas redes sociais usando a hashtag <strong>#wordcampbh</strong>. Você pode acompanhar tudo pelo <a href="https://www.facebook.com/hashtag/wordcampbh" target="_blank" rel="external">Facebook</a>, <a href="https://twitter.com/search?f=realtime&amp;q=%23wordcampbh&amp;src=typd" target="_blank" rel="external">Twitter</a> ou <a href="http://instagram.com/wordcampbh" target="_blank" rel="external">Instagram</a> (esse é o link para o perfil do WordCampBH no Instagram. Pesquise pela hashtag no seu smartphone xD).</p>
<h2 id="Social">Social</h2>
<p>No final, ainda sobrou muita comida. Por isso a organização do evento resolveu fazer sua parte social, e doou para a <a href="https://www.facebook.com/photo.php?fbid=634061596686214&amp;set=a.516641478428227.1073741828.492645257494516&amp;type=1" target="_blank" rel="external">Casa do Ancião Chichico Azevedo da Sociedade São Vicente de Paulo</a>. Uma atitude louvável!</p>
<h2 id="Fotos">Fotos</h2>
<p>Vou deixar aqui algumas fotos que tiramos lá (conformeu eu for encontrando outras, vou atualizando o post xD):</p>
<p><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/guga-alves-daciuk-andre-bertolino.jpg" alt="Guga Alves, Eu, André Bertolino "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/gulpjs-apresentando-node.jpg" alt="Falando sobre Gulp "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/abertura.jpg" alt="Abertura "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/credencial-daciuk.jpg" alt="Credencial "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/daciuk-deblyn-claudio-sanches.jpg" alt="Eu, Deblyn Prado, Claudio Sanches "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/gulp-minify.jpg" alt="Gulp Minify "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/funchal-daciuk.jpg" alt="Rafael Funchal, Eu "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/valerio-daciuk.jpg" alt="Valério Souza, Eu "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/daciuk-luan-muniz.jpg" alt="Eu, Luan Muniz "></p>
<h2 id="Pra_finalizar">Pra finalizar</h2>
<p>Belo Horizonte é uma cidade muito massa! As pessoas muito receptivas, algumas um pouco tímidas, mas o povo lá é muito hospitaleiro! Gostaria de ter ficado <em>“má um cadin”</em> por lá, mas as crianças já estavam chorando pra trazer o leite pra casa, hahah :P</p>
<p>Quero voltar outras vezes pra visitar a cidade. Espero que em breve tenha outros eventos por lá pra eu usar como desculpa xD</p>
<p>Acompanhe o <a href="http://2014.belohorizonte.wordcamp.org/" target="_blank" rel="external">site oficial do WordCamp Belo Horizonte</a> e as redes sociais (<a href="https://www.facebook.com/WordCampBeloHorizonte" target="_blank" rel="external">Facebook</a>, <a href="https://twitter.com/WordCampBH" target="_blank" rel="external">Twitter</a> e <a href="http://instagram.com/wordcampbh" target="_blank" rel="external">Instagram</a>), pois será divuulgado assim que saírem os vídeos das apresentações e as fotos tiradas no evento!</p>
<p>Pra quem quiser ver, os slides da minha palestra estão disponíveis em <a href="https://github.com/fdaciuk/talks" target="_blank" rel="external">github.com/fdaciuk/talks</a>. Cada palestrante tuitou os slides da sua ou postou no grupo WordPress Brasil, no Facebook, mas em breve estarão todas reunidas também no site oficial!</p>
<p>E você, foi no <strong>WordCamp Belo Horizonte</strong>? O que achou do evento? Diz ae!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://camo.githubusercontent.com/23071767957a2edbe1d4d2bf1a0bc1d876f5d3ab/68747470733a2f2f7261772e6769746875622e636f6d2f6664616369756b2f74616c6b732f6d61737465722f6173736574732f696d616765732f776f726463616d702d62682e6a7067" alt="WordCamp Belo Horizonte"></p>
<p>O <strong>WordCamp</strong>, como você já deve saber, é um evento internacional, que reúne pessoas de todos os lugares do mundo para falar de <strong>WordPress</strong>.</p>
<p>No último sábado (17/05/14), aconteceu o <strong><a href="http://2014.belohorizonte.wordcamp.org/" target="_blank" rel="external">WordCamp Belo Horizonte</a></strong>. E já pra começo de conversa: Foi o <strong>WordCamp</strong> mais animal que já participei! O evento se superou em tudo. Então, já gostaria de agradecer ao <a href="https://www.facebook.com/valerio.souza" target="_blank" rel="external">Valério</a> que organizou tudo com muito carinho pra fazer o melhor <strong>WordCamp</strong> de todos os tempos!</p>
<p>O cara tá morando no Rio de Janeiro, e fez o negócio acontecer de longe mesmo!</p>
<p>E não faltou o famoso pão de queijo! Teve até sorteio de uma caixa no final do evento xD</p>
<p>Mas vou começar pela viagem. Vem comigo!</p>
]]>
    
    </summary>
    
      <category term="wordcamp" scheme="http://blog.da2k.com.br/tags/wordcamp/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Disqus - Uma thread para mais de uma URL]]></title>
    <link href="http://blog.da2k.com.br/2014/03/22/disqus-uma-thread-para-mais-de-uma-url/"/>
    <id>http://blog.da2k.com.br/2014/03/22/disqus-uma-thread-para-mais-de-uma-url/</id>
    <published>2014-03-22T07:51:35.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/03/disqus.png" alt="Disqus"></p>
<p>Meu post sobre <a href="/2014/03/18/meu-workflow-javascript-com-module-pattern/">“Workflow Javascript com Module Pattern”</a> saiu na <a href="http://us5.campaign-archive1.com/?u=77b6594f10bba05dcc722c80e&amp;id=d85b8bbd77&amp;e=e3f205021c" target="_blank" rel="external">BrazilJS Weekly #69</a> <em>(obrigado a quem colocou lá o/)</em>, mas isso acabou me mostrando que eu tinha um pequeno “problema” com os comentários: como tinha uma query string na URL, o <a href="http://disqus.com/" target="_blank" rel="external">Disqus</a> achava que se tratava de uma página diferente e criava uma nova thread de comentários =/</p>
<a id="more"></a>

<h2 id="O_problema">O problema</h2>
<p>Por exemplo, se eu acessasse:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>/<span class="regexp">/blog.da2k.com.br/</span><span class="number">2014</span>/<span class="number">03</span>/<span class="number">18</span>/meu-workflow-javascript-com-<span class="class"><span class="keyword">module</span>-<span class="title">pattern</span>/</span></div><div class="line"><span class="symbol">http:</span>/<span class="regexp">/blog.da2k.com.br/</span><span class="number">2014</span>/<span class="number">03</span>/<span class="number">18</span>/meu-workflow-javascript-com-<span class="class"><span class="keyword">module</span>-<span class="title">pattern</span>/?123</span></div><div class="line"><span class="symbol">http:</span>/<span class="regexp">/blog.da2k.com.br/</span><span class="number">2014</span>/<span class="number">03</span>/<span class="number">18</span>/meu-workflow-javascript-com-<span class="class"><span class="keyword">module</span>-<span class="title">pattern</span>/?451<span class="title">k</span></span></div></pre></td></tr></table></figure>

<p>Cada uma dessas URLs gerava sua própria thread de comentários. Não deveria, pois fazem parte do mesmo post, apenas com alguns parâmetros a mais.</p>
<h2 id="Como_resolver?">Como resolver?</h2>
<p>Fazendo uma pesquisa na API do Disqus, vi que o problema é bem simples de resolver :)</p>
<h2 id="A_solução_xD">A solução xD</h2>
<p>Você precisa apenas definir uma variável chamada <code>disqus_url</code> com a URL absoluta do seu post. Se você não fizer isso, o Disqus vai usar <code>window.location.href</code>, e consequentemente para cada chamada de query string diferente, ele vai gerar uma nova thread.</p>
<p>Coloque essa variável no início do código que o Disqus gera <strong>(linha 5)</strong>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"disqus_thread"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span></div><div class="line">    <span class="keyword">var</span> disqus_shortname = <span class="string">'your_disqus_shortname'</span>; <span class="comment">// required: replace example with your forum shortname</span></div><div class="line">    <span class="keyword">var</span> disqus_url = <span class="string">'http://www.yoursite.com/your-post-url/'</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* * * DON'T EDIT BELOW THIS LINE * * */</span></div><div class="line">    (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> dsq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); dsq.type = <span class="string">'text/javascript'</span>; dsq.async = <span class="literal">true</span>;</div><div class="line">        dsq.src = <span class="string">'//'</span> + disqus_shortname + <span class="string">'.disqus.com/embed.js'</span>;</div><div class="line">        (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(dsq);</div><div class="line">    })();</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">noscript</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://disqus.com"</span> <span class="attribute">class</span>=<span class="value">"dsq-brlink"</span>&gt;</span>comments powered by <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"logo-disqus"</span>&gt;</span>Disqus<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>And done :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/03/disqus.png" alt="Disqus"></p>
<p>Meu post sobre <a href="/2014/03/18/meu-workflow-javascript-com-module-pattern/">“Workflow Javascript com Module Pattern”</a> saiu na <a href="http://us5.campaign-archive1.com/?u=77b6594f10bba05dcc722c80e&amp;id=d85b8bbd77&amp;e=e3f205021c" target="_blank" rel="external">BrazilJS Weekly #69</a> <em>(obrigado a quem colocou lá o/)</em>, mas isso acabou me mostrando que eu tinha um pequeno “problema” com os comentários: como tinha uma query string na URL, o <a href="http://disqus.com/" target="_blank" rel="external">Disqus</a> achava que se tratava de uma página diferente e criava uma nova thread de comentários =/</p>
]]>
    
    </summary>
    
      <category term="disqus" scheme="http://blog.da2k.com.br/tags/disqus/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/tags/tips/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meu workflow Javascript com Module Pattern]]></title>
    <link href="http://blog.da2k.com.br/2014/03/18/meu-workflow-javascript-com-module-pattern/"/>
    <id>http://blog.da2k.com.br/2014/03/18/meu-workflow-javascript-com-module-pattern/</id>
    <published>2014-03-18T22:16:38.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/03/module-pattern.jpg" alt="Module Pattern"></p>
<p><a href="http://simplesideias.com.br/design-patterns-no-javascript-module" target="_blank" rel="external">Module Pattern</a> é muito utilizado por vários devs JS hoje em dia, e ele tem muitas variações. Em busca de um formato que facilitasse meu dia-a-dia, testei alguns, até que cheguei em um que me agradou (ao menos por agora xD).</p>
<p>Resolvi escrever esse post, no caso de mais alguém se interessar nesse formato de organização de código <strong>Javascript</strong> :)</p>
<a id="more"></a>

<h2 id="Premissas">Premissas</h2>
<p>O que me levou a seguir esse padrão foi, principalmente, poder separar minhas <em>regras de negócio</em> da manipulação do DOM em sim (isso falando de JS no client-side).</p>
<p>Claro que nada impede de usar algo assim também com <strong>NodeJS</strong>.</p>
<p>Você vai ver como fica fácil fazer <a href="http://pt.wikipedia.org/wiki/Test_Driven_Development" target="_blank" rel="external">testes unitários (TDD)</a> e <a href="http://pt.wikipedia.org/wiki/Behavior_Driven_Development" target="_blank" rel="external">testes de comportamento (BDD)</a> separadamente usando esse formato.</p>
<p>Vou mostrar passo-a-passo o que me levou a tomar todas as decisões para chegar nesse resultado final.</p>
<h2 id="Estrutura_de_arquivos_e_diretórios">Estrutura de arquivos e diretórios</h2>
<p>Os arquivos e diretórios ficarão organizados dessa forma:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── /controllers</div><div class="line"><span class="string">|   ├── controllerExample.js</span></div><div class="line">├── /models</div><div class="line"><span class="string">|   ├── modelExample.js</span></div><div class="line">├── /modules</div><div class="line"><span class="string">|   ├── moduleExample.js</span></div><div class="line">├── /vendor</div><div class="line"><span class="string">|   ├── (libs usadas no projeto)</span></div><div class="line">└── app.js</div></pre></td></tr></table></figure>

<p>No diretório <strong><code>models</code></strong> ficarão todos os arquivos com as regras de negócio do site/app/sistema (vou chamar só de <em>aplicação</em> para facilitar). Nos models, serão feitos os nossos testes unitários. Eles serão usados somente para consultar e devolver valores, sem tratamento.</p>
<p>Em <strong><code>controllers</code></strong>, serão tratados os dados recebidos de <code>models</code> e também as manipulações do DOM, eventos, etc., quando necessário.</p>
<p>Em <strong><code>modules</code></strong>, os módulos do projeto, criados para automatizar tarefas repetitivas (carousels, accordions, banners, chamadas Ajax, etc).</p>
<p>Em <strong><code>vendor</code></strong>, as libs usadas no projeto: jQuery, Underscore, etc., ou qualquer lib de terceiros, que você não vai alterar diretamente.</p>
<h2 id="Nomenclatura_dos_arquivos">Nomenclatura dos arquivos</h2>
<p>Controllers começam com <strong>controller</strong>-alguma-coisa.js e models com <strong>model</strong>-alguma-coisa.js. Os arquivos serão criados conforme as necessidades do projeto: separados por funcionalidade ou por partes específicas do projeto.</p>
<h2 id="O_código">O código</h2>
<h3 id="Escopo_Local">Escopo Local</h3>
<p>A primeira coisa é manter tudo em um escopo local, e adicionar ao escopo global somente o que for realmente necessário. Normalmente só irá para o escopo global os objetos principais de cada arquivo, que vou mostrar mais abaixo.</p>
<p>Para manter o escopo local, começamos a estrutura do nosso arquivo com uma função anônima autoexecutável (ou <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="external">IIFE</a>):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line">  </div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Dessa forma, mantemos todos os nossos métodos, variáveis e funções dentro de um escopo local. Passamos como parâmetro os objetos globais <strong>window</strong> e <strong>document</strong> para serem usados dentro do nosso escopo e facilitar a minificação do código. Se usar jQuery ou Underscore, pode usar algo como:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, $, undefined )</span> </span>{</div><div class="line">  </div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span>, jQuery );</div></pre></td></tr></table></figure>

<p>O próximo passo é criar nosso objeto principal, dentro dessa função anônima:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> app = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  </div><div class="line">  })();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Atribuiremos a <code>app</code> uma função autoexecutável para não precisarmos adicionar os parênteses quando chamarmos algum método interno. O <code>&quot;use strict&quot;</code> habilita o <strong>Strict Mode</strong> para ECMAScript 5. Se você não sabe o que é o Strict Mode, recomendo a leitura <a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/" target="_blank" rel="external">desse artigo (em inglês)</a>.</p>
<h3 id="Separando_métodos_privados_e_públicos">Separando métodos privados e públicos</h3>
<p>Esse foi o ponto principal que mudou da minha <a href="http://www.voltsdigital.com.br/labs/escrevendo-javascript-em-modulos/" target="_blank" rel="external">antiga abordagem do Module Pattern</a>. É sempre uma boa prática usar <a href="http://pt.wikipedia.org/wiki/Don&#39;t_repeat_yourself" target="_blank" rel="external">DRY</a> para manter as coisas organizadas.</p>
<p>No Module Pattern, a maneira mais comum utilizada para retornar somente métodos públicos é essa:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> app = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> obj = {};</div><div class="line">  </div><div class="line">    obj._privateMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Private Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    obj.publicMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Public Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    obj.otherPublicMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Other Public Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> {</div><div class="line">      publicMethod : obj.publicMethod,</div><div class="line">      otherPublicMethod : obj.otherPublicMethod</div><div class="line">    };</div><div class="line">  })();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Os métodos privados começam com <code>_</code> por convenção e não são retornados. Mas sempre que escrever um método público, vai ter que incluí-lo no <code>return</code>, ou seja, dois trabalhos.</p>
<p>Uma forma que encontrei de contornar isso foi assim:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> app = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">  </div><div class="line">    $private.privateMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Private Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    $public.publicMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Public Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  })();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Assim você retorna todos os métodos e propriedades de <code>$public</code> e mantém os métodos e propriedades privados em <code>$private</code>. Usei o <code>$</code> pois <code>public</code> e <code>private</code> são palavras reservadas. Poderia usar também <code>_</code> ou qualquer outro <em>namespace</em>, sem problemas.</p>
<h3 id="Ordem_das_chamadas">Ordem das chamadas</h3>
<p>Para manter um padrão de organização, iremos fazer dessa forma: primeiro as <em>propriedades</em>, e depois os <em>métodos</em>. E os <em>privados</em> sempre antes dos <em>públicos</em>, ordenando tudo alfabeticamente. Nossa abordagem ficará dessa forma:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> app = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Private Variables</div><div class="line">     */</div><div class="line">    $private.privateVar = <span class="string">'private var'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// -----------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Public Variables</div><div class="line">     */</div><div class="line">    $public.publicVar = <span class="string">'public var'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// -----------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Private Methods</div><div class="line">     */</div><div class="line">    $private.privateMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Private method'</span>;</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="comment">// -----------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Public Methods</div><div class="line">     */</div><div class="line">    $public.publicMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Init'</span>;</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="comment">// -----------------------------------</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  })();</div><div class="line">  </div><div class="line">  <span class="comment">// Global</span></div><div class="line">  <span class="built_in">window</span>.app = app;</div><div class="line">  </div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Se eu precisar usar <code>app</code> em outro arquivo, posso retorná-la como método do objeto <code>window</code>, para que se torne um método global.</p>
<p>Todos os nossos arquivos terão esse mesmo padrão, mudando somente o nome do objeto principal. Para manter um padrão bem definido e organizado, o objeto deve ter o mesmo nome do arquivo, trocando o formato de <code>slug</code> por <code>camelCase</code>.</p>
<p>Em um próximo artigo, mostrarei um caso de uso desse formato, para facilitar o entendimento.</p>
<p>O que achou dessa abordagem? E como você organiza os seus arquivos Javascript? Comente!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/03/module-pattern.jpg" alt="Module Pattern"></p>
<p><a href="http://simplesideias.com.br/design-patterns-no-javascript-module" target="_blank" rel="external">Module Pattern</a> é muito utilizado por vários devs JS hoje em dia, e ele tem muitas variações. Em busca de um formato que facilitasse meu dia-a-dia, testei alguns, até que cheguei em um que me agradou (ao menos por agora xD).</p>
<p>Resolvi escrever esse post, no caso de mais alguém se interessar nesse formato de organização de código <strong>Javascript</strong> :)</p>
]]>
    
    </summary>
    
      <category term="workflow" scheme="http://blog.da2k.com.br/tags/workflow/"/>
    
      <category term="module pattern" scheme="http://blog.da2k.com.br/tags/module-pattern/"/>
    
      <category term="mvc" scheme="http://blog.da2k.com.br/tags/mvc/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Manter repositório do Github forkado sincronizado com o original]]></title>
    <link href="http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/"/>
    <id>http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/</id>
    <published>2014-01-19T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/01/github-sync-repo.png" alt="Sincronizar repositórios do Github"></p>
<p>Depois que você <em>forka</em> um projeto no Github, você faz as alterações necessárias e envia um <em>Pull Request</em> para o repositório original.</p>
<p>Se você precisa fazer mais alguma alteração no mesmo repositório no futuro, mas já tem outras colaborações no repositório original, como você procede para manter seu repositório atualizado? Copia as alterações manualmente para o seu repositório? Apaga e forka novamente? Chora?</p>
<a id="more"></a>

<p>O Git é uma ferramenta excepcional e, quando você passa a conhecê-lo mais a fundo, vai ver que não vai precisar fazer mais nada manualmente quando ele é usado no seu projeto. Existe uma forma muito prática de sincronizar os dois repos, e vou mostrá-la agora mesmo! Me acompanha? ;)</p>
<p>O seu repositório forkado normalmente é adicionado como <strong>origin</strong> quando você faz o clone. Para sincronizar com o repositório principal, adicione esse repositório com outro nome (no caso do exemplo, <strong>upstream</strong>), com o comando abaixo:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote <span class="keyword">add</span> upstream [ENDEREÇO <span class="pseudo">DO</span> REPOSITÓRIO PRINCIPAL]</div></pre></td></tr></table></figure>

<p>Substituindo <strong>[ENDEREÇO DO REPOSITÓRIO PRINCIPAL]</strong> pelo endereço do repositório (não diga :P)</p>
<p>Depois, para sincronizar os repositórios, execute o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> fetch upstream</div></pre></td></tr></table></figure>

<p>Finalmente, só dar merge na branch master:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="operator"><span class="keyword">merge</span> upstream/<span class="keyword">master</span></span></div></pre></td></tr></table></figure>

<p><strong>And done! ;)</strong></p>
<p>Mais fácil que isso, só o drag’n drop do Visual Studio :P</p>
<p>Brincadeiras a parte: curtiu a dica? Já conhecia? Conhece outras formas de fazer a mesma coisa? Comente!</p>
<p><strong>Link de referência:</strong> <a href="https://help.github.com/articles/syncing-a-fork" target="_blank" rel="external">https://help.github.com/articles/syncing-a-fork</a></p>
<blockquote>
<p><strong>UPDATE:</strong> Havia esquecido de incluir o comando para dar merge na sua branch xD Com o <code>fetch</code>, o Git apenas sincroniza as branchs que existem no repositório selecionado. Obrigado <a href="http://disqus.com/claudiosmweb/" target="_blank" rel="external">Claudio Sanches</a> e <a href="http://disqus.com/gabrielizaias/" target="_blank" rel="external">Gabriel Izaias</a> :D</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/01/github-sync-repo.png" alt="Sincronizar repositórios do Github"></p>
<p>Depois que você <em>forka</em> um projeto no Github, você faz as alterações necessárias e envia um <em>Pull Request</em> para o repositório original.</p>
<p>Se você precisa fazer mais alguma alteração no mesmo repositório no futuro, mas já tem outras colaborações no repositório original, como você procede para manter seu repositório atualizado? Copia as alterações manualmente para o seu repositório? Apaga e forka novamente? Chora?</p>
]]>
    
    </summary>
    
      <category term="github" scheme="http://blog.da2k.com.br/tags/github/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/tags/tips/"/>
    
      <category term="git" scheme="http://blog.da2k.com.br/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo - criando um blog ao estilo "miojo"]]></title>
    <link href="http://blog.da2k.com.br/2014/01/05/hexo-criando-um-blog-ao-estilo-miojo/"/>
    <id>http://blog.da2k.com.br/2014/01/05/hexo-criando-um-blog-ao-estilo-miojo/</id>
    <published>2014-01-05T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p>Você é desenvolvedor web e gosta de escrever em <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>? Então aprenda como fazer um blog em apenas 3 minutos com o <strong><a href="http://zespia.tw/hexo/" target="_blank" rel="external">Hexo</a></strong>!</p>
<p><img src="http://blog.da2k.com.br/uploads/2014/01/hexo.jpg" alt="Hexo"></p>
<a id="more"></a>

<p>O Hexo é um framework para criação de blogs, escrito em <strong><a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a></strong> para geração de arquivos estáticos. Com ele, é possível criar um blog em apenas 3 minutos! Quer apostar? ;)</p>
<h2 id="Primeiros_passos">Primeiros passos</h2>
<p>Primeiramente você precisa ter o NodeJS e o Git instalados no seu computador. Se ainda não tem e não sabe como fazê-lo, recomendo <a href="http://udgwebdev.com/node-js-para-leigos-instalacao-e-configuracao/" target="_blank" rel="external">esse tutorial</a> para instalar o Node, ou <a href="http://zespia.tw/hexo/docs/index.html" target="_blank" rel="external">esse outro, direto do site do Hexo</a>, mostrando a melhor forma de instalar em qualquer sistema. Com o Node e o Git instalados, vamos instalar o Hexo.</p>
<h2 id="Instalando_o_Hexo">Instalando o Hexo</h2>
<p>Para instalar o Hexo, utilize o comando abaixo no seu terminal:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">sudo</span>] npm install -g hexo</div></pre></td></tr></table></figure>

<p>Esse comando instalará o Hexo globalmente, deixando o comando <code>hexo</code> disponível no terminal.</p>
<h2 id="Criando_os_arquivos">Criando os arquivos</h2>
<p>Agora vamos criar os arquivos necessários para o nosso projeto.<br>Crie um diretório chamado <code>my-hexo-blog</code>. Acesse esse diretório no seu terminal, e execute o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">init</span></div></pre></td></tr></table></figure>

<p><strong>E pronto!</strong></p>
<p>Será gerada a seguinte estrutura de arquivos:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── scripts</div><div class="line">├── source</div><div class="line"><span class="string">|   ├── _drafts</span></div><div class="line"><span class="string">|   └── _posts</span></div><div class="line">└── themes</div></pre></td></tr></table></figure>

<p>Explicarei mais à frente sobre essa estrutura.</p>
<h2 id="Iniciando_o_Server">Iniciando o Server</h2>
<p>Agora, para ver seu blog rodando, execute o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure>

<p>Se tudo correu bem, você receberá a seguinte mensagem:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[info] Hexo <span class="keyword">is</span> running at localhos<span class="variable">t:4000</span>/. Press Ctrl+C <span class="keyword">to</span> <span class="keyword">stop</span>.</div></pre></td></tr></table></figure>

<p>Agora acesse <code>http://localhost:4000/</code> no seu navegador e veja como ficou seu blog!</p>
<p>Muito fácil não? Um blog <em>like a miojo</em> :P</p>
<p>Agora vou mostrar como fazer algumas configurações mais básicas para o seu blog, como trocar de tema, mudar título, etc., e depois fazer deploy para o <a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a>, para que você tenha um local para hospedar seu blog.</p>
<h2 id="O_arquivo__config-yml">O arquivo <code>_config.yml</code></h2>
<p>Nesse arquivo fica toda a configuração padrão do blog. Cada tema pode ter um <code>_config.yml</code> também, para configurações específicas do tema. Não tem muito segredo em mexer nele.</p>
<p>Digamos que o YML (pra quem não conhece), seja um JSON sem os brackets <code>{}</code> e as aspas duplas <code>&quot;&quot;</code>. Ele trabalha com base na indentação.</p>
<p>Exemplo de um JSON:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">propriedade</span>": <span class="value"><span class="string">"valor"</span></span>,</div><div class="line">  "<span class="attribute">propriedade2</span>" : <span class="value"><span class="string">"valor2"</span></span>,</div><div class="line">  "<span class="attribute">propriedade3</span>" : <span class="value">{</span></div><div class="line">    "<span class="attribute">propriedade4</span>" : <span class="value"><span class="string">"valor4"</span></span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>O YML referente a esse JSON ficaria assim:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="label">propriedade:</span> valor</div><div class="line"><span class="label">propriedade2:</span> valor2</div><div class="line"><span class="label">propriedade3:</span></div><div class="line">  propriedade4: valor4</div></pre></td></tr></table></figure>

<p>Ao editar o arquivo <code>_config.yml</code>, vai ver algumas propriedades como <code>title</code>, <code>author</code>, <code>url</code>, etc. Mude conforme as configurações do seu blog. Para ver para que serve cada um, consulte <a href="http://zespia.tw/hexo/docs/configuration.html" target="_blank" rel="external">esse link</a>.</p>
<h2 id="Escrevendo_seu_primeiro_post">Escrevendo seu primeiro post</h2>
<p>Para criar um novo post, execute o comando no terminal:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"Meu novo post"</span></div></pre></td></tr></table></figure>

<p>Isso irá criar um arquivo <code>meu-novo-post.md</code> no diretório <code>source/_posts/</code> com o seguinte conteúdo:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: Meu novo post</div><div class="line">date: 2014-01-05 20:53:29</div><div class="line"><span class="header">tags:</span></div><div class="line">---</div></pre></td></tr></table></figure>

<p>Abaixo dos 3 traços <code>---</code> é onde você deve começar a digitar o seu post no formato Markdown. As variáveis title, date e tags são usadas no tema para mostrar essas informações ao usuário.</p>
<p>Para fazer com que Hexo assista todas as alterações no seu post enquanto você escreve, execute o servidor com o parâmetro <code>--debug</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> server --<span class="built_in">debug</span></div></pre></td></tr></table></figure>

<p>Pressione <code>Ctrl+C</code> quando quiser parar.</p>
<h2 id="Gerando_os_estáticos">Gerando os estáticos</h2>
<p>Agora você precisa gerar os arquivos estáticos que serão “upados” para o Github Pages. Para isso, rode o comando no terminal (no diretório <code>my-hexo-blog</code>):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span></div></pre></td></tr></table></figure>

<p>Perceba que o Hexo criou um diretório <code>public</code>, com todos os arquivos estáticos necessários para o seu blog funcionar.</p>
<blockquote>
<p>PS.: Você pode mudar o nome dos diretórios <code>public</code> e <code>source</code> no arquivo <code>_config.yml</code></p>
</blockquote>
<p>O Hexo já vem com um post padrão <em>Hello World</em>. Você pode remover esse arquivo do diretório <code>source/_posts/</code> sem maiores problemas.</p>
<p>Sempre que gerar um novo post, para gerar os estáticos, sempre execute o comando <code>hexo generate</code>, para que os estáticos estejam atualizados com a última versão dos seus posts.</p>
<h2 id="Deploy_para_Github_Pages">Deploy para Github Pages</h2>
<p>Para fazer deploy para o Github Pages é bem simples. Configure no arquivo <code>_config.yml</code> a propriedade <code>deploy</code> (no final do arquivo), dessa forma:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: github</div><div class="line">  repository: git@github.com:fdaciuk/fdaciuk.github.<span class="built_in">io</span>.git</div></pre></td></tr></table></figure>

<p>No valor de <code>repository</code>, inclua o seu repositório.</p>
<p>O Github te dá um subdomínio com o seu nome de usuário para você usar. No meu caso, ficou como <strong><a href="http://fdaciuk.github.io" target="_blank" rel="external">http://fdaciuk.github.io</a></strong>.</p>
<p>Se você quiser usar esse domínio para o seu blog, crie um repositório no seu Github chamada <code>your_username.github.io</code>, trocando o <code>your_username</code> pelo seu nome de usuário. Copie a URL do repositório e cole no <code>_config.yml</code>, na propriedade <code>repository</code>, como mostrado acima.</p>
<p>Depois execute o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> deploy</div></pre></td></tr></table></figure>

<p><strong>E pronto!</strong> Aguarde algus minutos e já poderá acessar seu blog em <strong>your_username.github.io</strong>.</p>
<p>Agora seu blog está pronto e publicado!</p>
<p>Você vai perceber que o Hexo criou um diretório <code>.deploy</code>, onde ficarão os arquivos que irão para o seu repositório ao rodar o comando de deploy. Quando você cria um post novo, o Hexo vai enviar somente os arquivos alterados para o Github.</p>
<p>Veja que os diretório <code>public</code> e <code>.deploy</code> são gerados pelo Hexo. Eles contém somente os arquivos estáticos. Logo, se você precisar removê-los, não há problema algum. Pode fazer sem medo :)</p>
<p>Para saber mais sobre o Github Pages, siga <a href="http://pages.github.com/" target="_blank" rel="external">esse link</a>.</p>
<h2 id="Domínio_personalizado_usando_Github_Pages">Domínio personalizado usando Github Pages</h2>
<p>Se você notar, o domínio do meu blog é <code>http://blog.da2k.com.br</code>. Para fazer isso é muito simples. Siga os procedimentos <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages" target="_blank" rel="external">desse link</a> para adicionar uma entrada <strong>CNAME</strong> que irá apontar para o endereço do seu blog.</p>
<p>Depois, crie um arquivo chamado <code>CNAME</code> no diretório <code>source</code> com a URL do seu blog. No meu caso está assim:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blog.da2k.<span class="keyword">com</span>.<span class="keyword">br</span></div></pre></td></tr></table></figure>

<p>Execute o <code>hexo generate</code> para gerar os estáticos e copiar o <code>CNAME</code> para a raiz de <code>public</code>. Então, execute o <code>hexo deploy</code> e pronto! Aguarde até que o DNS se propague. Isso pode levar algumas horas. Em breve, seu blog estará no seu domínio personalizado ;)</p>
<h2 id="Considerações_sobre_arquivos_estáticos">Considerações sobre arquivos estáticos</h2>
<p>Ao fazer o deploy do seu projeto, o Hexo irá gerar apenas arquivos estáticos (HTML, CSS e JS). Isso traz algumas vantagens e desvantagens.</p>
<p>A vantagem disso é que o conteúdo será carregado muito mais rápido do que se fosse feito em um software como o WordPress, por exemplo, pois o servidor não precisará processar nada, somente entregar para o nevagador do usuário o HTML, CSS e JS, que o navegador vai tratar de interpretar.</p>
<p>A desvantagem é que você perde a parte dinâmica da coisa. Não vai ser possível fazer, por exemplo, uma página de busca, comentários nativos, entre outras coisas que talvez facilitariam seu trabalho.</p>
<p>Claro que existem algumas soluções para isso. No caso da busca, o Hexo por padrão utiliza o Google, com a URL do seu site sendo chamada antes de fazer a busca <code>(seusite.com.br: busca por algo)</code>. Isso faz com que o Google procure resultados somente no <em>seu site</em>. Mas o usuário vai pro site do Google pra ver o resultado e depois volta novamente para ver o conteúdo.</p>
<p>Para comentários, temos os plugins do <a href="http://disqus.com/" target="_blank" rel="external">Disqus</a>, <a href="https://support.google.com/blogger/answer/2981015?hl=en" target="_blank" rel="external">Google+</a>, ou <a href="https://developers.facebook.com/docs/plugins/comments/" target="_blank" rel="external">Facebook</a>. Todos resolvem bem o problema de comentários para arquivos estáticos. Nesse caso, não há a necessidade de ter os comentários nativos.</p>
<p>A dica que fica é: coloque sempre na balança para ver qual a melhor solução para o seu problema. Para desenvolvedores, um gerador estático sempre é uma excelente solução. Mas se estiver fazendo um blog para um cliente, onde <em>ele</em> vai alimentar o conteúdo do site, não seria boa ideia deixar ele escrever em Markdown, concorda? ;)</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Estou gostando bastante de trabalhar com o Hexo. Já estava para começar a blogar faz um tempo, e o Hexo me proporcionou uma excelente experiência para começar a fazer isso muito rapidamente. Espero que você também goste!</p>
<p>Até os próximos artigos!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Você é desenvolvedor web e gosta de escrever em <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>? Então aprenda como fazer um blog em apenas 3 minutos com o <strong><a href="http://zespia.tw/hexo/" target="_blank" rel="external">Hexo</a></strong>!</p>
<p><img src="http://blog.da2k.com.br/uploads/2014/01/hexo.jpg" alt="Hexo"></p>
]]>
    
    </summary>
    
      <category term="hexo" scheme="http://blog.da2k.com.br/tags/hexo/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
</feed>
