<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Da2k Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.da2k.com.br/"/>
  <updated>2015-01-25T02:02:00.541Z</updated>
  <id>http://blog.da2k.com.br/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Segredos do Github - Shortcuts]]></title>
    <link href="http://blog.da2k.com.br/2015/01/25/segredos-do-github-shortcuts/"/>
    <id>http://blog.da2k.com.br/2015/01/25/segredos-do-github-shortcuts/</id>
    <published>2015-01-25T00:00:00.000Z</published>
    <updated>2015-01-24T23:44:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-shortcuts.jpg" alt="Github Shortcuts"></p>
<p>Atalhos sempre agilizam o trabalho com qualquer ferramenta. Hoje vou mostrar alguns atalhos interessantes do Github :D</p>
<a id="more"></a>

<h2 id="Buscando_arquivos">Buscando arquivos</h2>
<p>Quando você está visualizando um repositório, você pode pressionar <code>t</code> e começar a digitar um nome de arquivo que contenha nesse diretório, que o arquivo será buscado recursivamente em todos os diretórios:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-search.png" alt="Github search"></p>
<p>Usando as setas <code>↑</code> e <code>↓</code>, você navega pelos arquivos encontrados. E pressionando <code>enter</code>, você abre o arquivo :)<br>Esse comando funciona na listagem de arquivos de um repositório.</p>
<h2 id="Branch_selector">Branch selector</h2>
<p>Se você trabalha com várias <em>branchs</em>, pode usar o <code>w</code>, na tela principal do repositório, para abrir o <em>Branch Selector</em>. O campo de busca de branchs receberá foco. Pressionando <code>tab</code>, você navega nas abas <em>branches</em> e <em>tags</em>. Pressionando <code>enter</code> em cima da aba, ela é selecionada:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/branch-selector.png" alt="Branch selector"></p>
<h2 id="Command_bar">Command bar</h2>
<p>Pressionando <code>s</code>, o barra de busca recebe foco para que você possa encontrar conteúdos dentro do Github:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/command-bar.png" alt="Command bar"></p>
<p>Mais dicas interessantes sobre a <em>Command bar</em> você encontra em <a href="https://help.github.com/articles/searching-github/" target="_blank" rel="external">https://help.github.com/articles/searching-github/</a></p>
<h2 id="Labels">Labels</h2>
<p>Na tela de  <em>issues</em>, pressionando <code>l</code>, você pode filtrar as <em>issues</em> por labels. Pode navegar por elas usando as setas <code>↑</code> e <code>↓</code> e pressionar <code>enter</code>para selecionar:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/labels.png" alt="Labels"></p>
<h2 id="Congelar_uma_alteração_de_arquivo">Congelar uma alteração de arquivo</h2>
<p>Ao visualizar um arquivo, se você pressionar <code>y</code>, a URL irá mudar para uma que “congela” como o arquivo está atualmente. Se esse arquivo mudar, você pode usar essa URL para ver exatamente como estava o arquivo antes das alterações :)</p>
<h2 id="Todos_os_atalhos">Todos os atalhos</h2>
<p>E por último, mas não menos importante, se você pressionar <code>?</code> em qualquer lugar, será mostrada a tela com todos os atalhos disponíveis no Github :D</p>
<p>Inicialmente são mostrados somente os mais utilizados. Mas clicando no link <strong>Show all</strong>, você pode ver todos os atalhos! (<em>Mr. Óbvio ataca novamente!</em> :P)</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-shortcuts.jpg" alt="Github Shortcuts"></p>
<p>Atalhos sempre agilizam o trabalho com qualquer ferramenta. Hoje vou mostrar alguns atalhos interessantes do Github :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GulpJS - Um gole de otimização no seu workflow]]></title>
    <link href="http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/"/>
    <id>http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/</id>
    <published>2015-01-24T00:00:00.000Z</published>
    <updated>2015-01-24T20:23:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs.png" alt=""></p>
<p>Em 2014 <a href="https://github.com/fdaciuk/talks" target="_blank" rel="external">palestrei em alguns eventos</a> evangelizando a galera sobre o uso do <a href="http://gulpjs.com/" target="_blank" rel="external">GulpJS</a>. Hoje resolvi transformar essa palestra em post, para facilitar futuras consultas e poder fazer outros posts falando mais a fundo sobre GulpJS e seus plugins!</p>
<p>Mas precisamos começar de algum lugar! Vem comigo? :D</p>
<a id="more"></a>

<h2 id="O_que_é_o_GulpJS?">O que é o GulpJS?</h2>
<p>O <strong>GulpJS</strong> é um <em>task runner</em>, assim como o <a href="http://gruntjs.com/" target="_blank" rel="external"><strong>Grunt</strong></a>. </p>
<p><em>E o que é um task runner</em>?</p>
<p><em>Task Runner</em> é o nome dado à uma ferramenta que centraliza e executa alguma tarefa repetitiva automaticamente. Eles existem para facilitar o seu dia-a-dia como desenvolvedor.</p>
<p>Elas são sinônimo de <strong>performance</strong>.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/performance.gif" alt="Performance"></p>
<p>A ideia é dar performance ao desenvolvedor na hora de escrever códigos, e também performance ao entregar o projeto ao cliente final, deixando-o mais leve e rápido.</p>
<p>Um <em>task runner</em> pode executar tarefas rotineiras como <strong>minificação de arquivos</strong>, <strong>compilação de CSS com pré-processadores</strong>, <strong>minificação de imagens</strong>, <strong>deploy</strong>, etc., tudo isso de forma automatizada. <em>Cool, hum?</em> ;)</p>
<p>Para facilitar o entendimento, vou mostrar alguns exemplos de ferramentas que você precisa usar diariamente para executar essas tarefas:</p>
<h3 id="Javascript_Compressor">Javascript Compressor</h3>
<p>Após escrever seu JS, você cola seu código <a href="http://www.minifyjs.com/javascript-compressor/" target="_blank" rel="external">nessa ferramenta</a>, e ela te devolve o código todo minificado, pronto para entregar em produção!</p>
<h3 id="Lint_de_JS">Lint de JS</h3>
<p>O <a href="http://jshint.com/" target="_blank" rel="external"><strong>JSHint</strong></a> busca no seu código erros comuns, garantindo que você esteja usando as melhores práticas nas escrita do seu Javascript.</p>
<p>Existe também o <a href="http://www.jslint.com/" target="_blank" rel="external"><strong>JSLint</strong></a>, criado por <a href="">Douglas Crockford</a>. É uma ferramenta que tem um pouco mais de restrições que o JSHint, - JSHint é mais “maleável” - e é recomendado para quem gosta de <a href="https://github.com/twbs/bootstrap/issues/3057#issuecomment-5135512" target="_blank" rel="external">“desafios maiores”</a> :P</p>
<h3 id="Testes_(TDD/BDD/E2E)">Testes (TDD/BDD/E2E)</h3>
<p>Testar seu código não pode ser uma tarefa difícil, muito menos lenta, senão você acaba deixando eles de lado. Algumas ferramentas facilitam o trabalho, como o <a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a>, <a href="http://shouldjs.github.io/" target="_blank" rel="external">Should</a>, <a href="http://jasmine.github.io/" target="_blank" rel="external">Jasmine</a>, <a href="http://qunitjs.com/" target="_blank" rel="external">QUnit</a>, <a href="http://chaijs.com/" target="_blank" rel="external">Chai</a>, <a href="http://sinonjs.org/" target="_blank" rel="external">Sinon</a>, etc.</p>
<h3 id="Pré-processadores">Pré-processadores</h3>
<p>Com eles você “programa” dentro do CSS. Pode usar estruturas condicionais, funções, variáveis, includes, mixins, e ainda diminui muito a repetição de código. Os mais conhecidos são: <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>, <a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a> e <a href="http://lesscss.org/" target="_blank" rel="external">LESS</a>.</p>
<h3 id="Compressão_de_imagens">Compressão de imagens</h3>
<p>Ao exportar suas imagens, elas precisam ser tão leves quanto possível. Existem vários softwares que fazem esse trabalho, diminuindo o tamanho da imagem, mas mantendo a mesma qualidade. Uma ferramenta legal (e online) para fazer isso é o <a href="http://compressor.io/" target="_blank" rel="external">Compressor.io</a>.</p>
<h3 id="Sistema_de_controle_de_versão">Sistema de controle de versão</h3>
<p><a href="http://git-scm.com/" target="_blank" rel="external">Git</a>, <a href="http://mercurial.selenic.com/" target="_blank" rel="external">Mercurial</a>, <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> são sistemas que ajudam a controlar a versão do seu projeto. Você pode desenvolver por partes e ter o controle de cada feature implementada no seu sistema.</p>
<p>Então você pensa: <em>Nossa, eu posso usar milhões de ferramentas para otimizar meu projeto!</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/crazy-bird.gif" alt="Passarinho locão"></p>
<p>Mas ao mesmo tempo, você percebe que é muita coisa! Muita ferramenta para lembrar de usar, muito site para favoritar, e desiste de tudo isso! <em>Vou entregar o projeto assim mesmo! Não vou conseguir lembrar de usar todas essas ferramentas!</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/panda.gif" alt="Panda derrubando carrinho"></p>
<h3 id="E_se_pudéssemos_automatizar_esse_processo?">E se pudéssemos automatizar esse processo?</h3>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/blocks.gif" alt="Automatização"></p>
<p>Uma vez vi uma palestra do <a href="http://addyosmani.com/blog/" target="_blank" rel="external">Addy Osmani</a>, onde ele disse que:</p>
<blockquote>
<p>Automation isn’t about being lazy, It’s about being efficient.</p>
</blockquote>
<p>Mas como é possível ser eficiente tendo que lembrar de milhões de coisas pra usar? Não dá pra centralizar tudo isso em uma única ferramenta? Será que é possível?</p>
<p><strong>SIM!</strong> Nós podemos fazer isso usando <a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a>!</p>
<h2 id="Instalando_o_NodeJS">Instalando o NodeJS</h2>
<p>A instalação do NodeJS é bastante simples: acesse o site do <a href="http://nodejs.org/download/" target="_blank" rel="external">NodeJS</a>, baixe a versão para o seu sistema operacional e siga as instruções.</p>
<p>Fazendo isso, você terá no seu terminal o comando <code>node</code> disponível!</p>
<p>O Node também traz junto com ele o gerenciador de pacotes NPM. Logo, você também já deve ter o comando <code>npm</code> disponível no seu terminal para gerenciar os pacotes do Node! :D</p>
<p>Para quem não sabe, um gerenciador de pacotes é o cara que vai centralizar os pacotes de software disponíveis para a ferramenta em questão. </p>
<p>É como os gerenciadores de pacote do seus sistema operacional:</p>
<p>No Linux, nós temos o <code>apt-get</code> nos linux <em>Debian Like</em>, <code>yum</code> do Fedora;<br>No Mac, <code>brew</code> ou <code>ports</code>;<br>No Windows, bem… no Windows não tem! Mas se tivesse, acho que seria algo assim:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/windows-package-manager.gif" alt="Gerenciador de pacotes no Windows"></p>
<p>:P</p>
<p>Mas zueiras à parte, vamos ver como utilizar o NPM:</p>
<h2 id="Instalação_de_pacotes">Instalação de pacotes</h2>
<p>Para instalar algum módulo NodeJS com o NPM, você pode usar o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install &lt;module name&gt;</div></pre></td></tr></table></figure>

<p>Ou ainda:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i &lt;module name&gt;</div></pre></td></tr></table></figure>

<p>O <code>i</code> é apenas um <em>alias</em> para o <code>install</code>, ou seja, eles fazem a mesma coisa.</p>
<p>E <code>&lt;module name&gt;</code> é o nome do seu módulo. Você pode encontrar os <a href="https://www.npmjs.com/" target="_blank" rel="external">módulos disponíveis no NPM aqui</a>.</p>
<h2 id="Instalando_o_GulpJS">Instalando o GulpJS</h2>
<p>Depois do Node e NPM instalados e funcionando, precisamos começar instalando o GulpJS:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g gulp</div></pre></td></tr></table></figure>

<p>Com esse comando, instalamos o GulpJS globalmente (repare no <code>-g</code> do comando acima). Quando instalamos um módulo do Node globalmente, temos disponíveis no nosso terminal o comando que geralmente é o mesmo nome do módulo. Nesse caso, temos o comando <code>gulp</code> disponível :)</p>
<p>Vamos ver um exemplo na prática de como usá-lo. Crie a seguinte estrutura de arquivos:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── gulpfile.js</div><div class="line">└── package.json</div></pre></td></tr></table></figure>

<p>No <code>package.json</code> ficarão todas as informações do nosso módulo. Podemos criá-lo manualmente, ou através do comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>

<p>Ao utilizar o comando, serão feitas algumas perguntas relacionadas ao projeto. Vá dando <code>enter</code> para ignorar se não quiser preencher. Essas informações não serão relevantes para o nosso caso, usando um <em>task runner</em>.</p>
<p>Se não quiser usar o <code>npm init</code>, crie manualmente o <code>package.json</code>, com uma estrutura básica para um JSON, para que possamos começar a utilizá-lo. No arquivo <code>package.json</code>, adicione:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">{}</div></pre></td></tr></table></figure>

<p>É tudo o que precisamos para começar no <code>package.json</code>. Vamos agora instalar nossas dependências.</p>
<h2 id="Dependências">Dependências</h2>
<p>Para que possamos usar o Gulp no nosso projeto, precisamos instalar algumas dependências. Uma delas é o próprio Gulp, mas dessa vez, instalado de forma local:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp</div></pre></td></tr></table></figure>

<p>Repare na flag <code>--save-dev</code>. Na primeira vez, instalamos o Gulp globalmente (<code>-g</code>) para termos o comando <code>gulp</code> no terminal. Agora, instalamos ele localmente, em modo de desenvolvimento (<code>--save-dev</code>), para utilizar os métodos dele dentro do nosso <code>gulpfile.js</code>.</p>
<p>Usando essa flag, a dependência é salva automaticamente no nosso <code>package.json</code>. O porquê disso explicarei mais à frente.</p>
<p>Agora nosso arquivo <code>package.json</code> está assim:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">devDependencies</span>": <span class="value">{</span></div><div class="line">    "<span class="attribute">gulp</span>": <span class="value"><span class="string">"^3.8.10"</span></span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Todas as dependências que precisaremos para utilizar enquanto estivermos desenvolvendo devem ser instaladas com a flag <code>--save-dev</code>, que o NPM automaticamente vai salvar dentro dessa diretiva <code>devDependencies</code>.</p>
<p>Perceba também que foi criado um diretório <code>node_modules</code> na raiz do nosso projeto. Nesse diretório temos a seguinte estrutura:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">└── /node_modules</div><div class="line">    └── /gulp</div><div class="line">        └── // <span class="keyword">...</span> arquivos do gulp <span class="keyword">...</span></div></pre></td></tr></table></figure>

<p>Ou seja, quando instalamos algum módulo com o comando <code>npm install</code> ou <code>npm i</code>, o módulo fica no diretório <code>node_modules</code> (salvo quando instalamos globalmente).</p>
<p>Agora, no <code>gulpfile.js</code>, adicione:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Hello Gulp!'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Aqui é puro Javascript (no servidor, com NodeJS). Criamos uma variável <code>gulp</code>, que receberá o módulo <code>gulp</code>, que foi instalado localmente. Se você passa como parâmetro da função <code>require</code> somente uma string, sem definir caminho de arquivos (como <code>./</code>, <code>/</code> ou <code>../</code>, por exemplo), o NodeJS procura essa dependência dentro da pasta <code>node_modules</code>.</p>
<p>O <code>.js</code> no final do arquivo é opcional. E se vamos fazer <code>require</code> de um arquivo chamado <code>index.js</code>, o nome desse arquivo também é opcional.</p>
<p>Sabendo disso, podemos concluir que o <code>var gulp = require( &#39;gulp&#39; );</code> na verdade poderia ter sido chamado dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'./node_modules/gulp/index.js'</span> );</div></pre></td></tr></table></figure>

<p>O método <code>task()</code> do objeto <code>gulp</code> cria uma <em>task</em> que será executada. Como primeiro parâmetro, passamos o nome da task. Depois, uma função de callback que será executada quando a task for chamada.</p>
<p>Para chamar essa task, vamos executar no terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp default</div></pre></td></tr></table></figure>

<p>Ou somente:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure>

<p>Rodando o comando <code>gulp</code> sem nenhum parâmetro, ele deduz que você tem uma task chamada <code>default</code>, que é a task padrão do Gulp. Ou seja: para a task <code>default</code>, o nome da task, na chamada pelo terminal, é opcional.</p>
<p>Executando esse comando, temos o seguinte resultado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gulp</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Using gulpfile /var/www/<span class="number">01</span>-testes/test-gulp/gulpfile.js</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Starting <span class="string">'default'</span>...</div><div class="line">Hello Gulp!</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Finished <span class="string">'default'</span> after <span class="number">476</span> μs</div></pre></td></tr></table></figure>

<p>Na linha <code>2</code>, ele mostra que encontrou o arquivo <code>gulpfile.js</code> e mostra o caminho do arquivo;<br>Na linha <code>3</code>, a task que está sendo executada;<br>Na linha <code>4</code>, printa a mensagem que colocamos em <code>console.log()</code>;<br>Na linha <code>5</code> é mostrado o tempo que demorou para finalizar a task.</p>
<p>Reparou no tempo? Sabe o que significa o símbolo <code>μs</code>? MICROSSEGUNDOS!</p>
<p>Isso mesmo: microssegundos! A task roda muito rápido mesmo.</p>
<p><em>Mas essa task não faz nada.. só executa um console.log() ¬¬</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/nothing.gif" alt="Não faz nada"></p>
<p>Concordo! Mas você verá que, quando estivermos executando tarefas de verdade, o tempo ainda assim será muito baixo! :D</p>
<p>Agora que já aprendemos como criar uma task no Gulp, que tal fazer algo realmente útil?</p>
<h2 id="Minificar_CSS">Minificar CSS</h2>
<p>Vamos ver como podemos automatizar a minificação dos nossos arquivos CSS. Primeiro vamos instalar o módulo de minificação:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-minify-css</div></pre></td></tr></table></figure>

<p>Agora vamos adicionar o módulo ao nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/css/**/*.css'</span> )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p><em>Perae, tem muita coisa acontecendo aqui! Como vou saber tudo isso?</em></p>
<p>Calma gafanhoto, vou explicar linha por linha:</p>
<p>Já sabemos como funciona o <code>gulp.task()</code>.<br>A task vai definir uma ação que queremos fazer. A nossa ação será <strong>minificar o CSS</strong>.</p>
<p>Para isso, precisamos ter um CSS para minificar. Crie um diretório <code>src</code>, e dentro dele um diretório <code>css</code>. Esse será o nosso CSS fonte, onde iremos escrever nosso CSS todo organizado, com espaços necessários para fazer leitura, etc.</p>
<p>Esse CSS será minificado, e a versão minificada ficará no diretório <code>public/css</code> (não precisa criar esse diretório).</p>
<p>Agora, crie um arquivo chamado <code>style.css</code> no diretório <code>src/css</code> e coloque o seguinte código:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> purple</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fc0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">4rem</span> fantasy</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Voltando ao <code>gulpfile.js</code>: com o <code>gulp.src()</code>, você passa o source do CSS, ou seja, os arquivos que você está editando. Você pode passar um array de arquivos ou então utilizar o <em>glob pattern</em> para percorrer recursivamente o diretório <code>./src/css</code> em busca de todos os arquivos <code>.css</code>.</p>
<p>Usar o <code>.pipe()</code>, é o mesmo que você usar o <code>|</code> (pipe) na linha de comando do Unix: a saída do primeiro comando é a entrada do próximo.</p>
<p>Então, pegamos os arquivos <code>.css</code> que estão em <code>./src/css</code>, e mandamos executar o <code>minifycss()</code> em todos eles. A saída será todos os arquivos minificados. Mas eles ainda estão em memória, e precisam ser salvos em algum lugar.</p>
<p>É aí que vamos passá-los novamente para frente com o <code>.pipe()</code> para o comando <code>gulp.dest()</code>, que vai definir o caminho de destino dos nossos arquivos minificados.</p>
<p>Estamos dizendo ao Gulp que queremos que esses arquivos sejam salvos (fisicamente) no diretório <code>./public/css</code>.</p>
<p>Ao executar novamente o comando <code>gulp</code> no terminal, olhe agora como ficou nossa estrutura de diretórios:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── gulpfile.js</div><div class="line">├── /node_modules</div><div class="line">│   └── // ... dependências ...</div><div class="line">├── package.json</div><div class="line">├── /public</div><div class="line">│   └── /css</div><div class="line">│       └── style.css</div><div class="line">└── /src</div><div class="line">    └── /css</div><div class="line">        └── style.css</div></pre></td></tr></table></figure>

<p>Não precisamos criar o diretório <code>public</code>, pois ele foi automaticamente criado pelo Node.</p>
<p>E o nosso arquivo <code>style.css</code>, no diretório gerado <code>public</code>, ficou assim:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value">purple</span></span>;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#fc0</span></span></span>;<span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">4rem</span> fantasy</span></span></span>}</div></pre></td></tr></table></figure>

<p>Coisa linda, não? Sem precisar lembrar de passar em nenhum <em>minify online</em> xD</p>
<p>E olha o tempo que foi executado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gulp</div><div class="line">[18:49:35] Using gulpfile /var/www/01-testes/test-gulp/gulpfile.js</div><div class="line">[18:49:35] Starting 'default'...</div><div class="line">[18:49:35] Finished 'default' after 16 ms</div></pre></td></tr></table></figure>

<p>O Gulp sempre vai executar muito rápido, independente da quantidade de tasks que você tiver, pois ele usa <a href="https://github.com/vitorbritto/art-of-node/blob/master/readme.pt-br.md#streams" target="_blank" rel="external"><em>strems</em></a> e trabalha com alta concorrência, ou seja, ele executa muitas coisas em paralelo, deixando tudo muito mais rápido.</p>
<h2 id="Usando_pré-processadores">Usando pré-processadores</h2>
<p>Para usar pré-processadores com Gulp também é bastante simples. Vou mostrar como utilizá-lo com o <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>.</p>
<p>Primeiro, precisamos instalar o módulo do <strong>Stylus</strong>. Execute no terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-stylus</div></pre></td></tr></table></figure>

<p>Vamos tirar o <code>minifycss</code> por enquanto, para facilitar a visualização do nosso exemplo. No seu <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Agora nós buscamos todos os arquivos em <code>./src/stylus</code>, com a extensão <code>.styl</code>. Vamos criar esse diretório, e um arquivo chamado <code>style.styl</code>, com o seguinte conteúdo:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span></div><div class="line">  <span class="attribute">background</span> purple</div><div class="line">  <span class="attribute">color</span> <span class="id">#fc0</span></div><div class="line">  <span class="attribute">font</span> 4rem fantasy</div></pre></td></tr></table></figure>

<p>No <strong>Stylus</strong>, não precisamos de <em>brackets</em> (<code>{}</code>), nem dois-pontos (<code>:</code>) para separar as propriedades. E ele funciona com base na indentação.</p>
<p>Mas não é obrigatório remover. Você pode escrever no formato do CSS também, sem problemas.</p>
<p>Agora, execute novamente o <code>gulp</code> no terminal. Você terá no diretório <code>public/css</code> um arquivo <code>.css</code> compilado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#800080</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fc0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">4rem</span> fantasy</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Normalmente, os módulos retornam funções, que podem receber parâmetros para configurar o que eles devem fazer. Nesse caso do Stylus, nós só passamos a função <code>stylus()</code>, para que o arquivo <code>.styl</code> transforme corretamente o código em CSS válido. Mas e se quisermos minificar? </p>
<p>Temos duas formas de fazer isso: a primeira é passando parâmetros na função <code>stylus()</code>. No <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line"></div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus({ compress: <span class="literal">true</span> }) )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Passamos como objeto da função <code>stylus()</code> o parâmetro <code>compress: true</code>. Executando o <code>gulp</code> novamente no terminal, agora temos nosso CSS em <code>public/css</code> minificado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#800080</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fc0</span></span></span>;<span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">4rem</span> fantasy</span></span></span>}</div></pre></td></tr></table></figure>

<p>A outra forma de minificar, é usando o <code>minifycss</code> (que já vimos no primeiro exemplo), junto com o Stylus. Ficaria assim o seu <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>É interessante lembrar que a ordem que você coloca as coisas interfere no resultado final. Porque colocamos o <code>minifycss()</code> depois do <code>stylus()</code>?</p>
<p>Por que a função <code>stylus()</code> vai retornar o CSS gerado. Se colocarmos o <code>minifycss()</code> antes dele, o CSS ainda não foi gerado, e o arquivo final não será minificado. Muita atenção com isso, ok? ;)</p>
<p><em>Mas qual seria a vantagem de utilizar o <code>minifycss()</code> junto com o <code>stylus()</code>, sendo que o <code>stylus()</code> já tem uma opção de comprimir os arquivos?</em></p>
<p>O Stylus tem uma diretiva chamada <code>@css</code>, onde você pode colocar códigos CSS “brutos”. Imagine que você baixou um plugin para usar no seu app ou site, e esse veio com um CSS. Se você está assistindo arquivos <code>.styl</code>, não é legal misturar as coisas, e colocar um arquivo <code>.css</code> junto. </p>
<p>O que você pode fazer é usar a extensão <code>.styl</code> e colocar todo o seu CSS na diretiva <code>@css</code>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">css</span> </span>{</div><div class="line">  <span class="class">.plugin</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff0</span></span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Só que, tudo o que está dentro dessa diretiva, o Stylus ignora. Ele não compila, nem ao menos minifica. Assim, seu código ficaria com parte dele sem minificar. Então você pode usar em conjunto o <code>compress: true</code> do <code>stylus()</code> e o <code>minifycss()</code> para minificar o que restar dessas diretivas ;)</p>
<p><em>Ok, já sei como minificar CSS e também como utilizar um pré-processador. Mas toda vez que eu alterar um arquivo, vou precisar ficar rodando o comando <code>gulp</code> no terminal? Não tem como o Gulp ficar assistindo meus arquivos, como o SASS faz?</em></p>
<h2 id="O_método_watch()">O método <code>watch()</code></h2>
<p>Claro que tem! Você pode usar o método <code>watch()</code> pra isso! Vamos mudar um pouco a estrutura do nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'css'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.watch( <span class="string">'./src/stylus/**/*.styl'</span>, [ <span class="string">'css'</span> ] );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>O que eu fiz foi, basicamente, renomear a task <code>default</code> para <code>css</code> e criar uma nova task <code>default</code>, com o <code>watch()</code>.</p>
<p>No primeiro parâmetro, você passa os arquivos que você quer assistir. E no segundo, você passa um array de tasks que precisam ser executadas toda vez que você fizer alguma alteração nesses arquivos do primeiro parâmetro! Bem simples!</p>
<p>Agora, executando o comando <code>gulp</code> no terminal, ele não vai te devolver o prompt para voltar a digitar, pois estará assistindo às alterações dos arquivos. Para parar o <code>watch()</code>, use o <code>Ctrl + C</code>.</p>
<p>Esses são os métodos que você precisa conhecer do Gulp:</p>
<ul>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname-deps-fn" target="_blank" rel="external">gulp.task()</a>: cria uma task;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpsrcglobs-options" target="_blank" rel="external">gulp.src()</a>: caminho dos fontes;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpdestpath-options" target="_blank" rel="external">gulp.dest()</a>: caminho de destino;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb" target="_blank" rel="external">gulp.watch()</a>: assiste os arquivos.</li>
</ul>
<p>Cada um desses métodos tem mais opções além das que mostrei. A documentação completa está no links de cada um, acima. Mas para começar a brincar com Gulp, isso que eu mostrei já vai resolver!</p>
<p>Mais ainda temos outro problema: toda vez que estivermos compilando os arquivos, precisamos olhar no terminal para ver se já compilou, voltar no browser e recarregar a tela. Olhar no terminal, ir até o browser, recarregar a tela… infinitamente. Não dá pra melhorar isso?</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/watching.gif" alt="Assistindo"></p>
<h2 id="Notificações">Notificações</h2>
<p>O Gulp tem vários <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">plugins</a> que você pode utilizar. Um que é muito útil, é o <code>gulp-notify</code>. Ao finalizar uma task (ou no momento em que você escolher que quer executá-lo), ele utiliza as notificações do seu sistema para dizer que aquele momento chegou! Vamos instalar ele agora mesmo!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-notify</div></pre></td></tr></table></figure>

<p>Agora vamos configurar nosso <code>gulpfile.js</code>, adicionando o <code>notify()</code> para mostrar uma mensagem assim que o nosso arquivo CSS for gerado:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line"><span class="keyword">var</span> notify = <span class="built_in">require</span>( <span class="string">'gulp-notify'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'css'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) )</div><div class="line">    .pipe( notify( <span class="string">'CSS OK!'</span> ) );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.watch( <span class="string">'./src/stylus/**/*.styl'</span>, [ <span class="string">'css'</span> ] );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Agora, executando o comando <code>gulp</code> novamente, temos a notificação:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulp-notify.jpg" alt="Notificação com gulp-notify"></p>
<p>Uhuull!!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/uhul.gif" alt="Uhuull!!"></p>
<h2 id="Plugins">Plugins</h2>
<p>O Gulp tem milhões de outros plugins que você pode usar. Para encontrar todos os plugins homologados, acesse: <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">http://gulpjs.com/plugins/</a></p>
<p>Se não encontrar um plugin que você precisa, você pode facilmente usar algum módulo do NodeJS para criar sua tarefa, já que você escreve o seu <code>gulpfile.js</code> em puro NodeJS. Todos os pacotes do Node você encontra em <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></p>
<p>Na página do plugin, tanto no NPM como no Github, você vai encontrar a documentação de como utilizá-lo. Não tem segredo.</p>
<h2 id="A_flag_—save-dev">A flag —save-dev</h2>
<p>Lembra que instalamos todas as nossas dependências com a flag <code>--save-dev</code>? Porque isso é importante?</p>
<p>Como você pôde perceber, todas as dependências ficam listadas no arquivo <code>package.json</code>. Se você quiser começar um novo projeto, e for utilizar as mesmas configurações que você utilizou da última vez, você só precisa executar dois simples passos:</p>
<ol>
<li>Copiar os arquivos <code>package.json</code> e <code>gulpfile.js</code> para o diretório do novo projeto;</li>
<li>Executar o comando <code>npm i</code>.</li>
</ol>
<p>Fazendo isso, o NPM irá ler o seu <code>package.json</code> e, todos os módulos encontrados em <code>dependencies</code> e <code>devDependencies</code> serão automaticamente instalados. Você não precisa nem copiar a pasta node_modules (que ficará bem grande com o tempo), pois ela será criada automaticamente ao executar o <code>npm i</code> :D</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Existem vários plugins que irão facilitar o seu dia-a-dia usando o GulpJS. Nos próximos artigos, vou mostrar alguns deles, que acho bastante importante utilizar, mostrando também algumas boas práticas de como você poderá organizar suas tasks para que seu <code>gulpfile.js</code> não fique gigantesco. Fique ligado!</p>
<p>O que achou do GulpJS? Já conhecia? Utiliza outro task runner? Gostaria de compartilhar como é seu <em>workflow</em>? Comente! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs.png" alt=""></p>
<p>Em 2014 <a href="https://github.com/fdaciuk/talks" target="_blank" rel="external">palestrei em alguns eventos</a> evangelizando a galera sobre o uso do <a href="http://gulpjs.com/" target="_blank" rel="external">GulpJS</a>. Hoje resolvi transformar essa palestra em post, para facilitar futuras consultas e poder fazer outros posts falando mais a fundo sobre GulpJS e seus plugins!</p>
<p>Mas precisamos começar de algum lugar! Vem comigo? :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="task runner" scheme="http://blog.da2k.com.br/tags/task-runner/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Como criar Extensões para o Google Chrome]]></title>
    <link href="http://blog.da2k.com.br/2015/01/23/como-criar-extensoes-para-o-google-chrome/"/>
    <id>http://blog.da2k.com.br/2015/01/23/como-criar-extensoes-para-o-google-chrome/</id>
    <published>2015-01-23T00:00:00.000Z</published>
    <updated>2015-01-23T01:10:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/chrome-extensions.jpg" alt="Chrome Extension"></p>
<p>Sabe quando você está usando um aplicativo web, e percebe que falta alguma funcionalidade que, ao seu ver, você conseguiria resolver facilmente com <strong>Javascript</strong>? Mas como você não trabalha na empresa que criou o aplicativo, você fica de mãos atadas e diz: “- Eu mesmo vou fazer um aplicativo desses. Do zero!”, mas não faz, porque vai tomar muito tempo, ae você procrastina e continua chorando porque aquele app deveria ter a funcionalidade que você quer?</p>
<p><strong>Seus problemas acarabam!</strong> Agora você pode criar uma <strong>Chrome Extension</strong>, usando somente Javascript (que lindo isso cara *_* ) e EXTENDENDO as funcionalidades do aplicativo que você usa conforme a sua necessidade! </p>
<p>Curtiu a ideia? Quer aprender a fazer? Vem comigo xD</p>
<a id="more"></a>

<h2 id="Motivação">Motivação</h2>
<p>O que me motivou a criar uma <em>Chrome Extension</em> foi o <a href="http://grooveshark.com/" target="_blank" rel="external">Grooveshark</a>. É a ferramenta que mais gosto pra passar o dia todo ouvindo música - sem propagandas - e programando :D</p>
<p>Só que ele tem um problema: a cada <strong>x</strong> minutos (não tenho certeza se é 15 ou 30), ele pára de tocar e pergunta: “- Você ainda está aí?”; e para voltar a tocar, você precisa clicar no botão “Resume” ¬¬</p>
<p>Sério, já passei algumas horas do dia com o fone apertando o ouvindo, no silêncio, porque estava focando em algum código, e quando percebi o Grooveshark já havia parado a muito tempo.</p>
<p>Então pensei comigo: “- Por que não criar uma extensão do Chrome que clique nesse botão <strong>Resume</strong> pra mim?” E <a href="https://github.com/fdaciuk/dont-stop-grooveshark/" target="_blank" rel="external">foi exatamente o que eu fiz!</a></p>
<h2 id="Por_onde_começar">Por onde começar</h2>
<p>O Google tem um <a href="https://developer.chrome.com/extensions/getstarted" target="_blank" rel="external">guia</a> para que você possa desenvolver sua própria extensão, mas como está em Inglês, resolvi escrever esse artigo, até pra mostrar algumas <a href="#Surpresinha"><em>surpresinhas</em></a> que você não espera quando vai fazer uma treta dessas xD</p>
<p>Vamos começar então criando um diretório para nossa extensão e um arquivo <code>manifest.json</code>.</p>
<h2 id="O_arquivo_manifest-json">O arquivo manifest.json</h2>
<p>Esse arquivo não é nada mais que um JSON, onde ficarão os metadados relacionados à sua extensão: nome da extensão, descrição, versão, permissões, etc. <a href="https://developer.chrome.com/extensions/manifest" target="_blank" rel="external">Nesse link</a> você encontra todos os metadados que podem ser incluídos no <code>manifest.json</code>.</p>
<p>Vou mostrar os exemplos baseados no <a href="https://github.com/fdaciuk/dont-stop-grooveshark/" target="_blank" rel="external"><strong>Don’t stop Grooveshark</strong></a>. O <code>manifest.json</code> ficará assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  <span class="string">"name"</span>: <span class="string">"Don't stop Grooveshark"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.2"</span>,</div><div class="line">  <span class="string">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Google Chrome Extension that don't leaves Grooveshark stop playing."</span>,</div><div class="line">  <span class="string">"icons"</span> : {</div><div class="line">    <span class="string">"16"</span> : <span class="string">"icon128.png"</span>,</div><div class="line">    <span class="string">"48"</span> : <span class="string">"icon128.png"</span>,</div><div class="line">    <span class="string">"128"</span> : <span class="string">"icon128.png"</span></div><div class="line">  },</div><div class="line">  <span class="string">"content_scripts"</span>: [{</div><div class="line">    <span class="string">"matches"</span>: [ <span class="string">"*://grooveshark.com/*"</span> ],</div><div class="line">    <span class="string">"js"</span>: [ <span class="string">"dont-stop-grooveshark.js"</span> ]</div><div class="line">  }]</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Vou comentar os parâmetros que não são tão óbvios, ok?</p>
<h3 id="mainfest_version">mainfest_version</h3>
<p>Esse parâmetro recebe um número inteiro, que representa a versão do mainfesto que o sua extensão está usando. A partir do <em>Chrome 18</em>, a versão <code>1</code> foi depreciada. Você deveria sempre usar a <code>2</code> a partir de então.</p>
<h3 id="icons">icons</h3>
<p>O ícone da sua extensão, que será mostrado na Chrome Store, ou quando sua extensão for mostrada na barra de extensões do <em>Chrome</em>.</p>
<p>É recomendado que você tenha ao menos o tamanho de ícone em <code>128x128px</code>. Se possível, passe todos os tamanhos pedidos (16x16, 48x48, 128x128), pois o <em>Chrome</em> irá selecionar o que for mais apropriado para o momento que ele precisar ser apresentado.</p>
<h3 id="content_scripts">content_scripts</h3>
<p><em><strong>Content scripts</strong> is where the magic happens!</em> Aqui é o lugar onde você pode adicionar seus próprios <em>scripts</em> ou <em>css</em> e adicioná-los à alguma página na web.</p>
<p>A propriedade <code>matches</code> recebe um array de domínios que sua extensão precisa de permissão para acessar. </p>
<p>A propriedade <code>js</code> recebe um array de arquivos JS que serão incluídos quando esses domínios forem acessados.</p>
<p>Você ainda pode ter uma propriedade <code>css</code>, que também receberá um array de arquivos CSS para estilizar a página do(s) domínio(s) setado(s) em <code>matches</code>.</p>
<p>Basicamente é isso que você vai precisar. Se estiver pensando em fazer uma extensão um pouco mais complexa, talvez você precise setar mais alguns parâmetros, que podem ser encontrados <a href="https://developer.chrome.com/extensions/content_scripts" target="_blank" rel="external">nesse link</a>.</p>
<h2 id="A_magia">A magia</h2>
<p>No caso do <strong>Don’t stop Grooveshark</strong>, o que eu preciso que seja feito é que, sempre que aparecer na tela aquela mensagem perguntando se eu ainda estou ali, o botão de <strong>Resume</strong> deve receber um clique automaticamente.</p>
<p>O código utilizado no arquivo <code>dont-stop-grooveshark.js</code> é o seguinte:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( doc )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"Don't stop Grooveshark! ;)"</span> );</div><div class="line">  <span class="keyword">var</span> $resumePlaybackButton;</div><div class="line">  </div><div class="line">  <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $resumePlaybackButton = doc.querySelector( <span class="string">'[data-translate-text="LB_INTERACTION_TIME_RESUME"]'</span> );</div><div class="line">    <span class="keyword">if</span>( ! $resumePlaybackButton ) {</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    $resumePlaybackButton.click();</div><div class="line">  }, <span class="number">3000</span>);</div><div class="line">})( <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>A única referência que eu tenho para o botão de <strong>Resume</strong>, é um atributo <code>data-translate-text</code>, com o conteúdo <code>LB_INTERACTION_TIME_RESUME</code>. Então o que eu faço é, a cada 3 segundos, verificar se esse botão está na tela e dar um clique nele. Se ele não estiver, não faço nada. :)</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Tendo acesso direto a um app, e a possibilidade de injetar Javascript, você pode fazer QUALQUER COISA que quiser! Existem algumas extensões que precisam de uma tela específica para setar algumas configurações. Isso também é possível fazer, mas vou deixar pra mostrar isso em um próximo artigo :D</p>
<h2 id="Surpresinha">Surpresinha</h2>
<p>Para subir uma <em>Chrome Extension</em> para o <a href="">respositório oficial</a>, você precisa pagar <strong>U$ 5</strong> <del>doletas</del>. Apesar do preço baixo, - e você só precisar pagar esse valor uma única vez - ele serve como uma “segurança” para que muitos desenvolvedores não postem qualquer porcaria lá (apesar de já ter :P). Imagina se não cobrassem :P</p>
<p>Depois desse pagamento, você pode fazer quantas extensões quiser, e subir à vontade!</p>
<p>Por hoje é isso! </p>
<p>E aí: para qual app você vai fazer a sua extensão? :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/chrome-extensions.jpg" alt="Chrome Extension"></p>
<p>Sabe quando você está usando um aplicativo web, e percebe que falta alguma funcionalidade que, ao seu ver, você conseguiria resolver facilmente com <strong>Javascript</strong>? Mas como você não trabalha na empresa que criou o aplicativo, você fica de mãos atadas e diz: “- Eu mesmo vou fazer um aplicativo desses. Do zero!”, mas não faz, porque vai tomar muito tempo, ae você procrastina e continua chorando porque aquele app deveria ter a funcionalidade que você quer?</p>
<p><strong>Seus problemas acarabam!</strong> Agora você pode criar uma <strong>Chrome Extension</strong>, usando somente Javascript (que lindo isso cara *_* ) e EXTENDENDO as funcionalidades do aplicativo que você usa conforme a sua necessidade! </p>
<p>Curtiu a ideia? Quer aprender a fazer? Vem comigo xD</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="chrome extension" scheme="http://blog.da2k.com.br/tags/chrome-extension/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clean code em Javascript - troque seu if gigante por métodos]]></title>
    <link href="http://blog.da2k.com.br/2015/01/22/clean-code-em-javascript-troque-seu-if-gigante-por-metodos/"/>
    <id>http://blog.da2k.com.br/2015/01/22/clean-code-em-javascript-troque-seu-if-gigante-por-metodos/</id>
    <published>2015-01-22T00:00:00.000Z</published>
    <updated>2015-01-23T01:10:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/clean-code.jpg" alt="Clean Code"></p>
<p>Como você viu no título, hoje vou falar sobre uma forma interessante de deixar suas funções / métodos pequenos, usando-os no lugar de if’s gigantescos!</p>
<a id="more"></a>

<p>Quando você tem um código limpo, fica muito mais fácil entender como tudo acontece, facilitando a manutenção do código.</p>
<p>Para usar a técnica de <em>Clean Code</em> você precisa deixar de pensar da forma tradicional, e adotar um novo paradigma. Sair da casinha, pensar fora da caixa!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/guga-alves-thinking-outside-of-the-box.jpg" alt="Guga Alves pensando fora da caixa"></p>
<p>Imagine a seguinte situação: você tem um código que precisa executar uma ação baseada no retorno de uma requisição. Essa requisição retornará um valor qualquer, dentre vários conhecidos.</p>
<p>Vamos tomar como exemplo uma base de usuários, onde deve ser executada uma ação conforme o papel (<code>role</code>) desse usuário:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( UsersResource )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> users = UsersResource.get();</div><div class="line">      </div><div class="line">      users.forEach(<span class="function"><span class="keyword">function</span><span class="params">( user )</span> </span>{</div><div class="line">        <span class="keyword">if</span>( <span class="string">'superadmin'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'SUPERADMIN'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'admin'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'ADMIN'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'editor'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'EDITOR'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'author'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'AUTHOR'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'contributor'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'CONTRIBUTOR'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'subscriber'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'SUBSCRIBER'</span>, user );</div><div class="line">        }</div><div class="line">      });</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  App().init();</div><div class="line">})( <span class="built_in">window</span>.UsersResource );</div></pre></td></tr></table></figure>

<p>E o <code>UsersResource</code>, que consulta informações em um servidor (por exemplo), e retorna um objeto com várias informações sobre usuários cadastrados no seu sistema e seus respectivos papéis:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( win )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">UsersResource</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">  </div><div class="line">    $public.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        { name: <span class="string">'John'</span>, role: <span class="string">'superadmin'</span> },</div><div class="line">        { name: <span class="string">'Mark'</span>, role: <span class="string">'admin'</span> },</div><div class="line">        { name: <span class="string">'Robert'</span>, role: <span class="string">'editor'</span> },</div><div class="line">        { name: <span class="string">'Ana'</span>, role: <span class="string">'author'</span> },</div><div class="line">        { name: <span class="string">'Paul'</span>, role: <span class="string">'contributor'</span> },</div><div class="line">        { name: <span class="string">'Mariah'</span>, role: <span class="string">'subscriber'</span> }</div><div class="line">      ];</div><div class="line">    };</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="built_in">window</span>.UsersResource = UsersResource();</div><div class="line">})( <span class="built_in">window</span> );</div></pre></td></tr></table></figure>

<p>E aí, teve um <em>Déjà vu</em>? Quantas vezes já escrevemos códigos como esse? Muito fácil de ler não é? #sqn.<br>Todo o nosso código está centralizado em um único método - <code>$public.init()</code>. Temos várias coisas acontecendo aqui, mas ainda está tudo muito acoplado.</p>
<p>Que tal se tentarmos com <code>switch</code>?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( UsersResource )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> users = UsersResource.get();</div><div class="line">      </div><div class="line">      users.forEach(<span class="function"><span class="keyword">function</span><span class="params">( user )</span> </span>{</div><div class="line">        <span class="keyword">switch</span>( user.role ) {</div><div class="line">          <span class="keyword">case</span> <span class="string">'superadmin'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'SUPERADMIN'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'admin'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'ADMIN'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'editor'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'EDITOR'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'author'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'AUTHOR'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'contributor'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'CONTRIBUTOR'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'subscriber'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'SUBSCRIBER'</span>, user );</div><div class="line">        }</div><div class="line">      });</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  App().init();</div><div class="line">})( <span class="built_in">window</span>.UsersResource );</div></pre></td></tr></table></figure>

<p>Melhorou um pouco, mas ainda está tudo muito acoplado. Imagine se você precisar adicionar mais <strong>roles</strong> para os usuários.. pense no tamanho da zona que não vai virar?</p>
<p><em>Como resolver então?</em></p>
<h2 id="Funções_/_Métodos">Funções / Métodos</h2>
<p>O Javascript é uma linguagem funcional, então porque escrever código imperativo? Vamos nos aproveitar do que o JS tem de melhor: as funções!</p>
<p>A versão <em>clean code</em> do nosso código ficaria assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( UsersResource )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      $private.getUsers();</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.getUsers = <span class="function"><span class="keyword">function</span> <span class="title">getUsers</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> users = UsersResource.get();</div><div class="line">      users.forEach(<span class="function"><span class="keyword">function</span><span class="params">( user )</span> </span>{</div><div class="line">        <span class="keyword">var</span> role = $private.makeFirstLetterCapitalized( user.role );</div><div class="line">        $private[ <span class="string">'handle'</span> + role ]( user );</div><div class="line">      });</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.makeFirstLetterCapitalized = <span class="function"><span class="keyword">function</span> <span class="title">makeFirstLetterCapitalized</span><span class="params">( word )</span> </span>{</div><div class="line">      <span class="keyword">return</span> word.charAt(<span class="number">0</span>).toUpperCase() + word.slice(<span class="number">1</span>);</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleSuperadmin = <span class="function"><span class="keyword">function</span> <span class="title">handleSuperadmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'SUPERADMIN'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleAdmin = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'ADMIN'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleEditor = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'EDITOR'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleAuthor = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'AUTHOR'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleContributor = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'CONTRIBUTOR'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleSubscriber = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'SUBSCRIBER'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  App().init();</div><div class="line">})( <span class="built_in">window</span>.UsersResource );</div></pre></td></tr></table></figure>

<p>Aumentou um pouco a quantidade de linhas, mas é visível a separação de responsabilidades aqui. Cada método faz somente uma coisa. Primeiro, tiramos toda a lógica do método <code>init()</code>, e o deixamos somente para chamar outros métodos. </p>
<p>Criamos um método <code>makeFirstLetterCapitalized()</code>, para transformar a primeira letra do <code>role</code> em maiúscula, pois padronizamos assim nossos métodos que irão manipular as informações desses usuários.</p>
<p>Separamos os métodos de manipulação para cada <code>role</code>, seguindo o padrão nomeado de <code>handle{Role}</code>, onde <code>{Role}</code> é o papel do usuário, com a primeira letra maíuscula.</p>
<p>Fica claro que isso não é solução para todos os casos, e você não vai trocar todos os seus <code>if&#39;s</code> por métodos. Mas essa é uma solução diferente para um problema bastante comum, que você pode aplicar no seu dia-a-dia, deixando seu código muito mais legível :)</p>
<p>Essa foi uma dica simples, escrita em um código Javascript, mas que é possível aplicar também em praticamente qualquer outra linguagem. </p>
<p>Gostou do post? Tem algo a compartilhar sobre o assunto? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/clean-code.jpg" alt="Clean Code"></p>
<p>Como você viu no título, hoje vou falar sobre uma forma interessante de deixar suas funções / métodos pequenos, usando-os no lugar de if’s gigantescos!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="clean code" scheme="http://blog.da2k.com.br/tags/clean-code/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress: conhecendo o Painel - Parte 2]]></title>
    <link href="http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/"/>
    <id>http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/</id>
    <published>2015-01-21T00:00:00.000Z</published>
    <updated>2015-01-21T02:32:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-meet-the-panel-part2.jpg" alt="WordPress: Conhecendo o Painel"></p>
<p>Na primeira parte vimos várias funcionalidades do Painel do WP. Nesse post vamos continuar a saga e desvendar tudo o que podemos usar para personalizar nosso tema! Bora? ;)</p>
<a id="more"></a>

<h2 id="Adicionar_midia">Adicionar midia</h2>
<p>Ainda dentro da página de <strong>Adicionar novo post</strong>, para adicionar imagens, galerias, URLs embedadas, clique no botão <strong>Adicionar midia</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-add-media.png" alt=""></p>
<p>Você verá uma janela modal como essa:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-media-modal.png" alt=""></p>
<p>Aqui você consegue arrastar/soltar ou clicar no botão e selecionar arquivos em vários formatos para subir. O WordPress faz upload desses arquivos no diretório <code>wp-content/uploads</code>, organizando os diretórios por <code>ano/mês</code>.</p>
<p>Todos os arquivos que você faz upload por essa tela, podem ser vistos no menu <strong>Midia</strong>.</p>
<p>Ao selecionar uma imagem, temos algumas opções como setar Título, <em>alt</em> (texto alternativo), descrição para a imagem, tamanho que será inserido no post, etc. Mas também temos a opção de editar a imagem ali mesmo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-selected-image-options.png" alt=""></p>
<p>Com essa opção de edição, podemos recortar, girar, fazer um <em>flip</em> na imagem e redimensionar:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-edit-media.jpg" alt=""></p>
<p>Para recortar, clique e arraste com o mouse em cima da imagem. O primeiro botão será habilitado. Clique nele para recortar. Salve.</p>
<p>Agora você pode inserir sua imagem editada diretamente pelo Painel! :)</p>
<h2 id="Aparência">Aparência</h2>
<p>Escolhendo a opção <strong>Personalizar</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-customize.png" alt=""></p>
<p>O WP nos dá várias opções para personalizarmos nosso tema, e esse poder aumenta quando estamos usando as funções do WP!</p>
<h2 id="Menus">Menus</h2>
<p>Quando você ainda não tem nenhum menu, essa tela é mostrada, para que você possa criá-lo: </p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-new-menu.png" alt=""></p>
<p>Simplesmente escolha um nome e crie um menu. Depois você poderá relacionar esse menu com alguma área de menu disponível no seu site. Isso também é controlado pelo tema:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-menu-position.png" alt=""></p>
<p>E adicionando um item ao menu, você ainda tem algumas opções. Essa é a tela de <strong>Opções de tela</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-menu-options.png" alt=""></p>
<p>Que deixa o seu item de menu assim:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-item-menu.png" alt=""></p>
<p>Com essas opções, você já consegue dar um <em>up</em> ao seu menu padrão! Ainda tem muitas outras customizações possíveis, quando se extende a classe <em>Walker</em> do menu. Mas isso é assunto para um próximo post :D</p>
<h2 id="Plugins">Plugins</h2>
<p>Plugins são parte essencial do WordPress. Com eles, você pode extender funcionalidades para usar em qualquer projeto! Quem sabe em breve não começamos uma série falando só sobre plugins? ;)</p>
<h2 id="Usuários">Usuários</h2>
<p>Nessa tela você adiciona informações específicas referentes ao seu perfil de usuário, ou aos usuários cadastrados no site, se você tiver permissão para tal.</p>
<p>É possível adicionar alguns campos personalizados na tela de Perfil de Usuário. Vamos ver como fazer isso também, em breve!</p>
<h2 id="Ferramentas">Ferramentas</h2>
<p>Em Ferramentas, você tem algumas opções que facilitam na hora de publicar um novo post, importar conteúdo de outra instalação ou outro CMS e exportar os dados do seu site.</p>
<p>E, finalmente:</p>
<h2 id="Configurações">Configurações</h2>
<p>Essa área você precisa conhecer muito bem. Tem muita coisa aqui, então vamos aos poucos:</p>
<h3 id="Geral">Geral</h3>
<p><strong>Título do Site</strong> e <strong>Descrição</strong> são autodescritivos. Você adiciona um título geral para o seu site, e uma descrição curta para o mesmo. Você pode usar isso em vários lugares, como nas metatags <strong>title</strong> e <strong>meta content</strong> para ser mostrado pelos buscadores ao procurarem conteúdo relacionado com seu site!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-address.png" alt=""></p>
<p>Aqui temos duas opções de configuração de URL: <strong>Endereço do WordPress</strong> e <strong>Endereço do site</strong>.</p>
<p>Normalmente essas duas URLs são iguais. Mas vou explicar o porquê de ter duas:</p>
<h3 id="Endereço_do_WordPress">Endereço do WordPress</h3>
<p>É o endereço onde estão os arquivos do WordPress. Imagine que você instalou o WP em <code>http://seusite.com.br/wordpress</code>. Esse deve ser o endereço nesse campo.</p>
<h3 id="Endereço_do_site">Endereço do site</h3>
<p>Mas você não quer que o seu site seja acessado via <code>http://seusite.com.br/wordpress</code>, e sim pela raiz, em <code>http://seusite.com.br</code>. Fazendo algumas pequenas configurações, você passa a URL da raiz do seu site nesse campo e consegue fazer com que o WordPress continue instalado em <code>/wordpress</code>, mas responda na raiz ao acessar seu site :)</p>
<p>Não esqueça de setar corretamente as opções de fuso horário, para que as postagens do seu blog e os seus agendamentos de posts possam estar no horário e data corretos:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-location.png" alt=""></p>
<h3 id="Escrita,_Leitura_e_discussão">Escrita, Leitura e discussão</h3>
<p>Basicamente algumas configurações para formatação de posts, categoria padrão para posts. Em leitura, você pode escolher um template que será sua home, - mostraremos em breve - quantidade de posts por página, etc.</p>
<p>E discussão é sobre os comentários. Tem várias coisas ali que podemos configurar. Veremos com calma quando estivermos desenvolvendo a parte de comentários do nosso tema.</p>
<h3 id="Midia">Midia</h3>
<p>O WP tem 3 formatos padrão de imagens: miniatura, médio e grande. Quando você faz upload de uma imagem, o WP mantém o tamanho default da imagem, e gera outras três imagens com esses tamanhos (se a imagem original for maior que eles, obviamente).</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-image-size.png" alt=""></p>
<p>Se não precisar de algum desses formatos, você pode deixá-los com valor <strong>zero (0)</strong>, que o WP não vai gerar imagens novas com esse tamanho.</p>
<p>Para criar novos tamanhos, temos funções que poderemos utilizar no nosso tema.</p>
<p>Uma das coisas mais importantes sobre o Painel, mas que poucas pessoas sabem, é que o WordPress utiliza o tamanho médio setado nessa tela para mostrar as miniaturas em todo o Painel. Quando você vai adicionar uma imagem no post, sabe as miniaturas que aparecem? Elas são geradas com base nessa configuração.</p>
<p>Sabe as miniaturas que aparecem na tela de Mídia? Mesma coisa. Então, nunca zere os valores do formato <strong>médio</strong>.</p>
<h3 id="Links_permanentes">Links permanentes</h3>
<p>Para que seu site possa trabalhar com URLs amigáveis, selecione um formato de permalinks diferente do padrão. </p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-permalinks.png" alt=""></p>
<p>Fazendo isso, você ainda libera duas outras URLs por padrão: <code>/admin</code> e <code>/login</code> agora acessam o Painel do WP, ao invés de precisar lembrar de <code>/wp-admin</code> ou <code>/wp-login.php</code> :D</p>
<p>Você também pode, opcionalmente, selecionar uma estrutura para as categorias e tags:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-base-category-tags.png" alt=""></p>
<p>Se alguma opção ficou para trás, voltaremos para vê-la quando precisarmos dela ao desenvolver nosso tema :)</p>
<p>Tudo isso pode parecer besteira, mas muitos desenvolvedores se batem por não conhecer essas simples opções, que dão ao cliente final um poder gigantesco de personalização do seu tema, sem que o dev tenha muito mais trabalho por isso :)</p>
<p>Espero que esteja gostando da série! No próximo artigo, iremos voltar com o <em>hands on</em>! Temos muito código pra escrever!</p>
<p>Até lá! :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/</a></p>
<p><strong> Próximo post:</strong><br><a href="">EM BREVE!</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-meet-the-panel-part2.jpg" alt="WordPress: Conhecendo o Painel"></p>
<p>Na primeira parte vimos várias funcionalidades do Painel do WP. Nesse post vamos continuar a saga e desvendar tudo o que podemos usar para personalizar nosso tema! Bora? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress: conhecendo o Painel - Parte 1]]></title>
    <link href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/"/>
    <id>http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/</id>
    <published>2015-01-20T00:00:00.000Z</published>
    <updated>2015-01-21T02:32:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-meet-the-panel-part1.jpg" alt="WordPress: Conhecendo o Painel"></p>
<p>Para que possamos usar o máximo de recursos possíveis no nosso tema, precisamos conhecer de onde eles vêm. Que tal fazer um <em>tour</em> pelo Painel do WordPress e conhecer tudo o que podemos fazer lá dentro? Vem comigo :D</p>
<a id="more"></a>

<p>Para entrar no Painel, precisamos acessar a área de login - em <code>/wp-admin</code> ou <code>/wp-login.php</code>.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-login.png" alt="WordPress Login"></p>
<p>Entramos com o usuário e senha criados na instalação do nosso site. E temos a seguinte tela:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-panel.png" alt="Painel logado"></p>
<p>Como nosso tema ainda está <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">no início</a>, e ele está ativo, ainda não temos todas as opções possíveis do painel disponíveis. Então vamos ativar o tema padrão do WP e ver as funcionalidades que ele nos oferece no Painel!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-themes.png" alt="Aparência &gt; Temas"></p>
<p>Ativando o tema padrão, já podemos ver algumas opções a mais no menu <strong>Aparência</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-appearance-menu.png" alt="Painel com mais opções"></p>
<p>Mas vamos começar do início!</p>
<h2 id="Painel">Painel</h2>
<p>Começando pelo painel, você deve ter reparado nos itens <strong>“Opções de tela”</strong> e <strong>“Ajuda”</strong>, na lateral superior direita, né? Mas alguma vez você se interessou em clicar ali? Experimente!</p>
<p>Em <strong>Opções de tela</strong>, temos alguns checkboxes:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-screen-options.png" alt="Opções de tela"></p>
<p>Você pode marcá-los ou desmarcá-los para mostrar os widgets que aparecem nessa tela! Se você reparar, na maior parte das telas dentro do Painel do WP, você tem esse link <strong>Opções de tela</strong>, que tem as opções personalizadas para cada tela, em específico. Por exemplo: quando você está editando algum post, essa opção mostra todos os <em>metaboxes</em> disponíveis para o post :)</p>
<p>O menu <strong>Ajuda</strong> também tem algumas opções interessantes. Se você não sabe para que serve qualquer um desses widgets mostrados, nesse menu você vai encontrar a resposta ;)</p>
<p>Fique ligado nas telas que têm essas opções. Elas podem ser a resposta que você está a algum tempo procurando!</p>
<h2 id="Posts">Posts</h2>
<p>Na listagem de posts, temos as opções:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-list-posts.png" alt="Listagem de posts"></p>
<p>No link <strong>Opções de tela</strong>, temos as opções que aparecem na coluna da tabela. É importante frisar que, quando você marca ou desmarca alguma dessas opções, o WordPress se lembra da próxima vez que você entra nessa tela, e traz exatamente como você deixou quando saiu :)</p>
<p>Ao passar o mouse sobre um post, nos é mostrado um menu com algumas opções: “Editar”, “Edição Rápida”, “Lixeira”, “Ver”.</p>
<p><strong>Editar</strong> faz o mesmo efeito de clicar no título do post: abre para edição;</p>
<p><strong>Edição Rápida</strong> abre algumas opções que você pode editar rapidamente:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-quick-edition.png" alt="Edição Rápida"></p>
<p><strong>Lixeira</strong> é óbvio;</p>
<p><strong>Ver</strong> mostra o template renderizando esse post no seu tema.</p>
<p>Ainda na tabela, se você clicar no ícone dos comentários, você é direcionado para a página de comentários, com os mesmos filtrados somente para esse post :D<br>Mais uma vez, o link <strong>Ajuda</strong> pode tirar algumas dúvidas básicas que alguém pode não saber.</p>
<h2 id="Adicionar_novo_post">Adicionar novo post</h2>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-post-metabox.png" alt="Metabox novo post"></p>
<p>Essas caixas - marcada em vermelho na imagem acima - na tela de “Novo Post”, são as <em>metaboxes</em>. São caixas com algumas metainformações relacionadas ao post. Normalmente são utilizadas para categorizar o post.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-post-category-tag.png" alt="Taxonomias padrão"></p>
<p>Você provavelmente já conhece essas metaboxes acima: <strong>Categorias</strong> e <strong>Tags</strong>. Elas são taxonomias padrão do WP.</p>
<p><em>O que são taxonomias?</em></p>
<blockquote>

<p><strong>Taxonomia</strong> (do grego τασσεῖν ou tassein = “para classificar” e νόμος ou nomos = lei, ciência, administrar), foi a ciência de classificar organismos vivos (alfa taxonomia). Mais tarde a palavra foi aplicada em um sentido mais abrangente, podendo aplicar-se a uma das duas: classificação de coisas ou aos princípios subjacentes da classificação. Quase tudo - objetos animados, inanimados, lugares e eventos - pode ser classificado de acordo com algum esquema taxonômico. </p>
<footer><strong>Wikipedia</strong><cite><a href="http://pt.wikipedia.org/wiki/Taxonomia_(geral)" target="_blank" rel="external">pt.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<p>Então as taxonomias, dentro do WP, servem para classificar, ou categorizar o seu conteúdo. Você pode criar suas próprias taxonomias baseadas no padrão de <strong>Categorias</strong> ou <strong>Tags</strong>, que o WP oferece, ou então criar uma nova <em>metabox</em> e adicionar qualquer tipo de campo de formulário necessário para fazer uma categorização personalizada: <em>select</em>, <em>radio button</em>, <em>checkbox</em>, etc. Veremos como fazer isso nos próximos posts da série.</p>
<h2 id="O_editor">O editor</h2>
<p>No editor de texto do WordPress, temos algumas features bem interessantes. Uma delas é o <strong>oEmbed</strong>.</p>
<p>Essa feature nos permite <em>embedar</em> facilmente algumas coisas, somente pela URL.</p>
<p>Por exemplo, um vídeo do Youtube. Escolha um vídeo qualquer, copie a URL e cole no editor. Olha só o que acontece:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-oembed-youtube.png" alt="oEmbed Youtube"></p>
<p>Automagicamente, o vídeo é embedado e renderizado! Em tempo real! Você pode dar o play no vídeo ali mesmo!</p>
<p>Não era esse vídeo que você queria adicionar? Clicando em cima do vídeo, você ainda tem duas opções: <strong>editar</strong> ou <strong>remover</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-oembed-youtube-edit-remove.png" alt="Editar ou remover oEmbed"></p>
<p>Tudo isso sem plugin algum! Coisa linda, não? ;)</p>
<p><em>Que legal! E dá pra fazer isso só com o Youtube?</em></p>
<p>Claro que não jovem! Você consegue embedar <a href="http://codex.wordpress.org/Embeds#Okay.2C_So_What_Sites_Can_I_Embed_From.3F" target="_blank" rel="external">milhares de outras coisas</a>, incluindo um <em>tweet</em>, por exemplo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-oembed-twitter.png" alt="oEmbed Twitter"></p>
<p>E você ainda pode <strong>criar</strong> seu próprio <em>embed</em>! Vamos aprender a fazer isso também :D</p>
<p>Tá curtindo a série? Então fica ligado que continuaremos falando sobre o Painel no próximo post, trazendo mais novidades! Até lá :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-meet-the-panel-part1.jpg" alt="WordPress: Conhecendo o Painel"></p>
<p>Para que possamos usar o máximo de recursos possíveis no nosso tema, precisamos conhecer de onde eles vêm. Que tal fazer um <em>tour</em> pelo Painel do WordPress e conhecer tudo o que podemos fazer lá dentro? Vem comigo :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Parâmetros na URL]]></title>
    <link href="http://blog.da2k.com.br/2015/01/19/segredos-do-github-parametros-na-url/"/>
    <id>http://blog.da2k.com.br/2015/01/19/segredos-do-github-parametros-na-url/</id>
    <published>2015-01-19T00:00:00.000Z</published>
    <updated>2015-01-19T01:33:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github-url-params.jpg" alt=""></p>
<p>Hoje mais um segredo será revelado! Vamos brincar com alguns parâmetros na URL e ver o que podemos fazer com eles :D</p>
<a id="more"></a>

<h2 id="Ignorando_espaços_em_branco_no_commit">Ignorando espaços em branco no commit</h2>
<p>Sabe quando você tem um commit onde tem um monte de espaços em branco sendo removidos, e fica difícil visualizar onde realmente foi alterado algum código? Se você passar <code>?w=1</code> na URL, o Github ignora os espaços em branco, e mostra só o que realmente é necessário:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-whitespace.png" alt="Remover espaços em branco"></p>
<h2 id="Tamanho_da_tabulação">Tamanho da tabulação</h2>
<p>Manja aquele código indentado com 4 tabs que fica com tamanho de 8 em qualquer outro lugar diferente do seu editor?</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/url-8-tabs.png" alt="Tab 8"></p>
<p>Passando o parâmetro <code>?ts=4</code>, o Github mostra o código indentado com o valor passado para o parâmetro <code>ts</code>.<br>Nesse caso, <code>4</code>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/url-4-tabs.png" alt="Tab 4"></p>
<h2 id="Separar_commits_por_autor">Separar commits por autor</h2>
<p>Quer rever os só os seus commits que você fez naquele projeto open source, mas tem outros milhões de colaboradores?</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/all-commits.png" alt="Todos os commits"></p>
<p>Adicione o parâmetro <code>?author=username</code>, passando o seu username do Github para mostrar só os seus:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/author-commits.png" alt="Commits de um usuário específico"></p>
<p>E chega por hoje! xD</p>
<p>Até o próximo <strong>Segredos do Github</strong>!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github-url-params.jpg" alt=""></p>
<p>Hoje mais um segredo será revelado! Vamos brincar com alguns parâmetros na URL e ver o que podemos fazer com eles :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RequireJS - Carregando Javacript sob demanda]]></title>
    <link href="http://blog.da2k.com.br/2015/01/18/requirejs-carregando-javacript-sob-demanda/"/>
    <id>http://blog.da2k.com.br/2015/01/18/requirejs-carregando-javacript-sob-demanda/</id>
    <published>2015-01-18T00:00:00.000Z</published>
    <updated>2015-01-18T14:11:37.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/requirejs.png" alt="RequireJS"></p>
<p>Quando você tem uma aplicação onde vai usar muito código Javascript, é sempre importante pensar na performance. Mas além disso, para que sua aplicação possa escalar, seu código precisa ser modular.</p>
<p>Nesse momento surgem as dúvidas:<br><em>- Escrevo todo o meu código em um arquivo só, e minifico para não sobrecarregar os requests do browser?</em><br><em>- Separo em vários arquivos para facilitar o desenvolvimento, sem me preocupar com a quantidade de requests http?</em></p>
<p><em>Qual a melhor solução?</em></p>
<a id="more"></a>

<p>A resposta correta é: depende do seu projeto. Você vai precisar medir isso e ver o que é mais viável no seu caso. O problema que temos hoje é que, quando você adiciona vários scripts no seu app, ao baixar um arquivo <code>css</code> ou <code>js</code>, o browser bloqueia a renderização do navegador até que o arquivo seja baixado e parseado. Feito isso, a renderização continua, e faz o mesmo ao encontrar o próximo script.</p>
<p>Isso deixa sua aplicação muito lenta, pois cada request pode levar em torno de 20ms a 120ms, dependendo do tamanho do arquivo, para executar esse processo. Se saber mais sobre performance, e porque isso acontece, leia <a href="http://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/" target="_blank" rel="external">este artigo.</a>.</p>
<h2 id="RequireJS">RequireJS</h2>
<p>Mas ao carregarmos nossos scripts assincronamente, o browser não bloqueia a renderização, mas faz o download e parse dos arquivos em segundo plano, disponibilizando-os assim que estiverem prontos.</p>
<p>E o <a href="http://requirejs.org/" target="_blank" rel="external"><strong>RequireJS</strong></a> nos ajuda exatamente com isso: usando uma estrutura modular, baseada no <a href="http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/" target="_blank" rel="external">AMD</a>, você usa <em>Dependency Injection</em>, para que os scripts necessários sejam carregados de forma assincrona, sob demanda, ou seja, você só vai carregar um arquivo quando realmente precisar dele!</p>
<p>A configuração inicial do RequireJS é um pouco chata, mas vou mostrar o passo-a-passo para que você possa utilizar ele em seus projetos sem maiores problemas :D</p>
<h2 id="Obtendo_o_RequireJS">Obtendo o RequireJS</h2>
<p>Você pode baixar o RequireJS à partir <a href="http://requirejs.org/docs/download.html#requirejs" target="_blank" rel="external">desse link</a>. Pode baixar a <a href="http://requirejs.org/docs/release/2.1.15/minified/require.js" target="_blank" rel="external">versão minificada aqui</a>.</p>
<p>Com o Require em mãos, vamos criar a seguinte estrutura de diretórios:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── index.html</div><div class="line">└── js</div><div class="line">    ├── App.js</div><div class="line">    ├── boot.js</div><div class="line">    ├── controllers</div><div class="line">    │   └── HomeController.js</div><div class="line">    └── vendor</div><div class="line">        ├── jquery.js</div><div class="line">        ├── lodash.js</div><div class="line">        └── require.js</div></pre></td></tr></table></figure>

<p>No diretório <code>js/vendor/</code> é onde iremos centralizar <em>libs</em> de terceiros. Baixe o <a href="http://jquery.com/" target="_blank" rel="external">jQuery</a> e a <a href="https://lodash.com/" target="_blank" rel="external">LoDash</a>, e adicione nesse diretório.</p>
<p>Na <code>index.html</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"pt-br"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>RequireJS<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">data-main</span>=<span class="value">"js/boot"</span> <span class="attribute">src</span>=<span class="value">"js/vendor/require.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Se você reparar na linha <code>9</code>, onde adicionamos o script do RequireJS, temos um atributo <code>data-main</code>. Esse atributo diz ao Require que, quando ele for baixado, esse é o arquivo que deve ser executado: <code>js/boot.js</code>. Então é nesse arquivo que nós iremos fazer nossas configurações iniciais. </p>
<p>O Require faz a adição do <code>.js</code> no final do arquivo, então sempre chame-o sem a extensão.</p>
<p>Se você abrir a aba <code>Network</code> no seu navegador, com a <code>index.html</code> do nosso projeto aberta, pode constatar que os dois arquivos foram baixados corretamente:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/bootjs.png" alt="boot.js"></p>
<p>Agora no <code>js/boot.js</code>, vamos iniciar as configurações:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>([ <span class="string">'vendor/jquery'</span> ], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'jQuery carregado!'</span>, $( <span class="built_in">document</span> ) );</div><div class="line">  });</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>O <strong>RequireJS</strong> tem 3 funções:</p>
<ul>
<li><code>require()</code> / <code>requirejs()</code> - Injeta um arquivo;</li>
<li><code>define()</code> - Cria um componente no padrão AMD.</li>
</ul>
<p>Para fazer a injeção de dependências, você pode usar tanto o <code>require()</code> quanto o <code>requirejs()</code>, que fazem exatamente a mesma coisa. </p>
<p><em>E pra quê duas funções que fazem a mesma coisa?</em></p>
<p>Porque você pode estar usando alguma outra lib que use a função <code>require()</code>. Nesse caso, o <strong>RequireJS</strong> não sobrescreve essa função, mas te dá a opção de usar <code>requirejs()</code> no lugar, mantendo tudo sob controle :)</p>
<p>A sintaxe das funções <code>require()</code> e <code>requirejs()</code> é a seguinte:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( deps, callback );</div></pre></td></tr></table></figure>

<p>E a sintaxe da função <code>define()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define( <span class="string">'moduleName'</span>, deps, callback );</div></pre></td></tr></table></figure>

<p>A única diferença das funções <code>require()</code> e <code>requirejs()</code> para a função <code>define()</code>, é que na <code>define()</code> você pode - opcionalmente - adicionar o nome do seu módulo.</p>
<p><em>E como saber quando usar <code>define</code> e quando usar <code>require</code> ou <code>requirejs</code>?</em></p>
<p>A regra basicamente é essa:</p>
<ul>
<li><code>define</code> será usado sempre no início de novos arquivos - levando em consideração que cada módulo será um arquivo;</li>
<li><code>require</code> ou <code>requirejs</code>, se você precisar injetar uma dependência no corpo de um módulo já existente.</li>
</ul>
<p>Ainda confuso? Quando estivermos criando nossos módulos, você vai entender melhor :)</p>
<h2 id="Entendendo_os_parâmetros">Entendendo os parâmetros</h2>
<p>O parâmetro <code>moduleName</code>, na função <code>define()</code>, é o nome do seu módulo.</p>
<p>No parâmetro <code>deps</code>, você vai passar um array de dependências. Coloque o caminho completo dos arquivos, tomando como base o caminho do arquivo chamado no atributo <code>data-main</code> do seu script. No nosso caso, o <code>js/boot.js</code>. E não é necessário adicionar o <code>.js</code> no final do arquivo.</p>
<p><strong>Nota:</strong> ainda que você vá utilizar somente uma dependência, é necessário utilizar a notação de array. Se não houver dependências (quando utilizar o <code>define()</code>), esse parâmetro é opcional. Nesse caso, passe somente a função de callback. E se você não tiver dependências e precisar retornar, por exemplo, somente um objeto, você pode passar ele diretamente para a função <code>define()</code>, sem precisar instanciar a função de callback:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define({</div><div class="line">  color: <span class="string">'black'</span>,</div><div class="line">  size: <span class="string">'large'</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p><em>Quer dizer que só no <code>require()</code> e <code>requirejs()</code> as dependências são obrigatórias?</em></p>
<p>Se não há a necessidade de injetar dependências, então você não precisará do <code>require</code> ;)</p>
<p>E o parâmetro <code>callback</code> é uma função que será executada assim que todas as dependências forem resolvidas (ou um objeto, como mostrado acima).</p>
<h2 id="require-config()"><code>require.config()</code></h2>
<p>As funções <code>require</code> e <code>requirejs</code> - a partir daqui vou parar de citar as duas. Quando eu me referir a <code>require</code>, estou falando das duas, ok? ;) - têm um método <code>config()</code>, onde você pode configurar algumas coisas para facilitar a injeção de dependências. Vamos adicionar essas configurações no nosso <code>js/boot.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>.config({</div><div class="line">    baseUrl: <span class="string">'./js'</span>,</div><div class="line">    paths: {</div><div class="line">      jquery: [</div><div class="line">        <span class="string">'https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min'</span>,</div><div class="line">        <span class="string">'vendor/jquery'</span></div><div class="line">      ],</div><div class="line">      lodash: <span class="string">'vendor/lodash'</span></div><div class="line">    }</div><div class="line">  });</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>([ <span class="string">'jquery'</span>, <span class="string">'lodash'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $, _ )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'jQuery carregado!'</span>, $( <span class="built_in">document</span> ) );</div><div class="line">  });</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>Primeiro vou explicar o parâmetro na função de callback do <code>require()</code>.</p>
<h2 id="Parâmetros_do_callback">Parâmetros do callback</h2>
<p>Quando uma dependência é injetada, o retorno dessa dependência pode ser obtido a partir dos parâmetros na função de callback. Os parâmetros do callback devem ser passados <strong>na mesma ordem</strong> das dependências injetadas.</p>
<p>No nosso primeiro exemplo, no início do artigo, fizemos a injeção do jQuery, mas não passamos parâmetro algum no callback. O código funciona corretamente porque o jQuery passa para o objeto <code>window</code> os objetos <code>jQuery</code> e <code>$</code>. Logo, você pode usar esses objetos globais. Mas, por questões de boas práticas e performance, é melhor você usar sempre objetos e variáveis locais. Nesse caso, no último exemplo, passamos como parâmetro para a função de callback o <code>$</code>, que recebe o <code>jquery</code> injetado, para que possamos usar <code>$</code> localmente.</p>
<p>Injetamos também a <code>lodash</code>, e passamos como parâmetro no callback o <code>_</code>, para ser usado também localmente.</p>
<h2 id="Agora_sim,_o_método_config()">Agora sim, o método <code>config()</code></h2>
<p>Como já havia dito, para fazer a injeção de dependências, o <strong>RequireJS</strong> toma como base o caminho do arquivo passado no parâmetro <code>data-main</code> do nosso script. Mas nós podemos passar um parâmetro <code>baseUrl</code> para setar manualmente esse caminho. A partir daí, todos os caminhos de scripts injetados tomam essa URL como base. Você pode passar tanto caminhos absolutos como relativos.</p>
<p>Para usar caminhos relativos com o <code>baseUrl</code>, a base será o caminho do HTML onde está inserido o <code>&lt;script&gt;</code> que chama o <strong>RequireJS</strong>.</p>
<p>A propriedade <code>paths</code> é um objeto, que recebe como chave uma referência para o módulo que será injetado, e como valor, a URL desse módulo. Isso facilita na hora da injeção, para que você não precise passar todo o caminho da dependência.</p>
<p>Se você voltar no primeiro exemplo, vai ver que injetamos o jQuery com <code>vendor/jquery</code>. Nesse segundo exemplo, usamos somente <code>jquery</code>, pois no <code>paths</code> já setamos o caminho completo.</p>
<p>Você deve ter percebido também que podemos usar um array como valor da dependência. O que o <strong>RequireJS</strong> faz nesse caso é tentar carregar os arquivos na ordem que está no array. Se a primeira URL falhar, ele tenta carregar a segunda, e assim por diante. No caso do jQuery, a vantagem é poder usar um CDN e, se esse método falhar, chamamos a lib localmente, em <code>vendor/jquery</code>.</p>
<p>A ideia de usar o <strong>RequreJS</strong> é basicamente essa. Mas para facilitar a visualização, vamos escrever um pouco mais de código, pois ainda não vimos a função <code>define()</code> em ação.</p>
<p>No nosso arquivo <code>js/App.js</code> coloque o seguinte código:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([ <span class="string">'jquery'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $ )</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Carregou App.js'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>E no arquivo <code>js/boot.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>.config({</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  });</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>([ <span class="string">'jquery'</span>, <span class="string">'lodash'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $, _ )</span> </span>{</div><div class="line">    <span class="built_in">require</span>([ <span class="string">'App'</span> ]);</div><div class="line">  });</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>Perceba que podemos aninhar os métodos <code>require</code> para garantir que, ao carregar <code>js/App.js</code>, o <code>jquery</code> e a <code>lodash</code> já estejam carregados!</p>
<p>No arquivo <code>js/App.js</code>, nós usamos o <code>define</code> para definir esse módulo. Porque não utilizamos o <code>require</code>?</p>
<p>Por que esse módulo ainda não existe, e está sendo definido. Se eu precisar injetar dependências dentro do módulo, que dependam das dependências passadas no array do primeiro parâmetro, aí sim eu vou usar o <code>require()</code>. Ficou mais claro o uso deles agora?</p>
<p><em>Hey, mas você passou o <code>jquery</code> como dependência do módulo <code>App</code>. Isso não vai fazer o <strong>RequireJS</strong> trabalhar dobrado e baixar duas vezes o jQuery?</em></p>
<p>Não. Em cada módulo você deve injetar todas as dependências que você precisa usar internamente nele, ou que você precisa que estejam carregadas para usá-lo. O <strong>RequireJS</strong> se encarrega de - se essa dependência já tiver sido carregada antes - usar o arquivo que foi carregado da primeira vez.</p>
<p>Nesse nosso exemplo, o arquivo <code>js/boot.js</code> vai fazer o boot do <strong>RequireJS</strong>, e o <code>js/App.js</code> vai controlar toda a nossa aplicação.</p>
<p>Dentro do <code>js/App.js</code>, você pode escrever qualquer código Javascript para chamar os seus scripts sob demanda, somente quando necessário.</p>
<p>Vou deixar <a href="https://github.com/fdaciuk/workflow-requirejs" target="_blank" rel="external">nesse repositório</a> um exemplo de <em>workflow</em> com <strong>RequireJS</strong>, tomando como base os exemplos passados nesse artigo, mas com algumas coisas a mais, para que você possa se basear nele para montar seu próprio <em>workflow</em>, dependendo do seu projeto, ok?</p>
<p>Ficou com dúvidas? Poste nos comentários!</p>
<p>Até o próximo artigo!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/requirejs.png" alt="RequireJS"></p>
<p>Quando você tem uma aplicação onde vai usar muito código Javascript, é sempre importante pensar na performance. Mas além disso, para que sua aplicação possa escalar, seu código precisa ser modular.</p>
<p>Nesse momento surgem as dúvidas:<br><em>- Escrevo todo o meu código em um arquivo só, e minifico para não sobrecarregar os requests do browser?</em><br><em>- Separo em vários arquivos para facilitar o desenvolvimento, sem me preocupar com a quantidade de requests http?</em></p>
<p><em>Qual a melhor solução?</em></p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="requirejs" scheme="http://blog.da2k.com.br/tags/requirejs/"/>
    
      <category term="amd" scheme="http://blog.da2k.com.br/tags/amd/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Tabelas e Task lists]]></title>
    <link href="http://blog.da2k.com.br/2015/01/17/segredos-do-github-tabelas-e-task-lists/"/>
    <id>http://blog.da2k.com.br/2015/01/17/segredos-do-github-tabelas-e-task-lists/</id>
    <published>2015-01-17T00:00:00.000Z</published>
    <updated>2015-01-19T00:45:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github-tables-and-task-lists.jpg" alt="Segredos do Github"></p>
<p>Continuando a série, hoje vou mostrar algumas outras features legais que você pode usar no Github: <strong>tabelas</strong> e <strong>task lists</strong>!</p>
<a id="more"></a>

<h2 id="Task_lists">Task lists</h2>
<p>Sabe aquela <em>issue</em> que você abriu no Github e precisa quebrá-la em partes, mas não quer criar uma <em>issue</em> para cada coisa? Você pode usar as <strong>task lists!</strong></p>
<p>Basta você usar a notação <code>- [ ] Texto da task</code> (com um espaço dentro dos colchetes) para criar um checkbox desmarcado, ou então <code>- [x] Texto da task</code>, para um checkbox marcado. Exemplo:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>[ ] Comprar arroz</div><div class="line"><span class="bullet">- </span>[ ] Comprar feijão</div><div class="line"><span class="bullet">- </span>[ ] Comprar batata</div><div class="line"><span class="bullet">- </span>[x] Comprar macarrão</div></pre></td></tr></table></figure>

<p>Que resulta nisso:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/task-list-markdown.png" alt=""></p>
<p>Agora você não se perde mais xD</p>
<h2 id="Tabelas">Tabelas</h2>
<p>Para criar tabelas, também é bem simples:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alimentos | Preço</div><div class="line"><span class="horizontal_rule">--------- | ------</span></div><div class="line">Arroz     | R$ 10</div><div class="line">Feijão    | R$ 8</div><div class="line">Batata    | R$ 7</div><div class="line">Macarrão  | R$ 8</div></pre></td></tr></table></figure>

<p>O título da tabela é marcado com os traços <code>-</code> abaixo da palavra. O pipe <code>|</code> cria as colunas. Não é necessário alinhar com espaços, mas visualmente fica melhor. Não precisa fazer se tiver preguiça :P</p>
<p><strong>O resultado:</strong></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/table.png" alt="Tabela"></p>
<p><em>O preço ficou estranho alinhado à esquerda. Pra ficar alinhado à direita, tenho que fazer manualmente?</em></p>
<p>Não! Você consegue alinhar usando <code>:</code> nos traços que ficam abaixo do título da tabela. </p>
<p>Se usar <code>:</code> no lado esquerdo, o alinhamento será feito à esquerda (padrão);<br>Se usar <code>:</code> no lado direito, o alinhamento será feito à direita;<br>E para centralizar, use dos dois lados.</p>
<p><strong> Preço alinhado à direita:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alimentos | Preço</div><div class="line"><span class="horizontal_rule">--------- | ------:</span></div><div class="line">Arroz     | R$ 10</div><div class="line">Feijão    | R$ 8</div><div class="line">Batata    | R$ 7</div><div class="line">Macarrão  | R$ 8</div></pre></td></tr></table></figure>

<p><strong>Resultado:</strong></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/table-right.png" alt="Preços alinhados à direita"></p>
<p><strong>Nome dos alimentos centralizados e preço à direita:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alimentos | Preço</div><div class="line">:-------: | ------:</div><div class="line">Arroz     | R$ 10</div><div class="line">Feijão    | R$ 8</div><div class="line">Batata    | R$ 7</div><div class="line">Macarrão  | R$ 8</div></pre></td></tr></table></figure>

<p><img src="http://blog.da2k.com.br/uploads/2015/01/table-center-right.png" alt="Nome dos alimentos centralizados e preços alinhados à direita"></p>
<p>Era isso! Até o próximo post :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github-tables-and-task-lists.jpg" alt="Segredos do Github"></p>
<p>Continuando a série, hoje vou mostrar algumas outras features legais que você pode usar no Github: <strong>tabelas</strong> e <strong>task lists</strong>!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="markdown" scheme="http://blog.da2k.com.br/tags/markdown/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Variáveis]]></title>
    <link href="http://blog.da2k.com.br/2015/01/16/segredos-do-github-variaveis/"/>
    <id>http://blog.da2k.com.br/2015/01/16/segredos-do-github-variaveis/</id>
    <published>2015-01-16T00:00:00.000Z</published>
    <updated>2015-01-17T03:02:25.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github.png" alt="Segredos do Github"></p>
<p>Hoje estarei dando início a uma nova série de posts chamada <strong>Segredos do Github</strong>. Essa série trará dicas de coisas <em>secretas</em> que vão dar um <em>up</em> na sua forma de utilizar a rede social mais adorada pelos nerds do mundo todo: o <a href="https://github.com" target="_blank" rel="external">Github</a>!</p>
<a id="more"></a>

<p>E o primeiro post será sobre… <strong>variáveis</strong>! Isso mesmo! Sabia que é possível utilizar variáveis nos seus arquivos Markdown?</p>
<p>Vou mostrar como e porque você deveria utilizar!</p>
<p>Imagine que o seu Markdown tem vários links. Vou dar um exemplo do meu repositório do <a href="https://github.com/fdaciuk/getmodule" target="_blank" rel="external">getmodule</a>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="header"># Get Module</span></div><div class="line">  </div><div class="line"><span class="blockquote">&gt; Include local NodeJS modules relative to your root path</span></div><div class="line">  </div><div class="line">[<span class="link_label">![NPM version</span>](<span class="link_url">https://badge.fury.io/js/getmodule.svg?style=flat</span>)](<span class="link_url">https://npmjs.org/package/getmodule</span>)</div><div class="line">[<span class="link_label">![Build Status</span>](<span class="link_url">https://travis-ci.org/fdaciuk/getmodule.svg</span>)](<span class="link_url">https://travis-ci.org/fdaciuk/getmodule</span>)</div><div class="line">[<span class="link_label">![Coverage Status</span>](<span class="link_url">https://img.shields.io/coveralls/fdaciuk/getmodule.svg?style=flat</span>)](<span class="link_url">https://coveralls.io/r/fdaciuk/getmodule?branch=master</span>)</div><div class="line">[<span class="link_label">![Code Climate</span>](<span class="link_url">https://codeclimate.com/github/fdaciuk/getmodule/badges/gpa.svg?style=flat</span>)](<span class="link_url">https://codeclimate.com/github/fdaciuk/getmodule</span>)</div><div class="line">[<span class="link_label">![NPM</span>](<span class="link_url">https://nodei.co/npm/getmodule.png?downloads=true&downloadRank=true&stars=true</span>)](<span class="link_url">https://nodei.co/npm/getmodule/</span>)</div></pre></td></tr></table></figure>

<p>Como você pode ver, no início do arquivo <strong>README.md</strong>, eu tenho alguns badges com links apontando para versão do módulo no <a href="https://www.npmjs.com/" target="_blank" rel="external">NPM</a>, Status do <a href="https://travis-ci.com/" target="_blank" rel="external">TravisCI</a>, Status do <a href="http://blog.da2k.com.br/2015/01/07/code-coverage-em-javascript/" target="_blank" rel="external">Code Coverage</a> no <a href="https://coveralls.io/" target="_blank" rel="external">Coveralls</a>, <a href="https://codeclimate.com/" target="_blank" rel="external">Code Climate</a>, etc. </p>
<p>Isso acaba ficando bastante verboso no seu arquivo e, se você precisar usar a mesma URL em outro lugar do seu <strong>README</strong>, terá que repetí-la.</p>
<h2 id="Variáveis">Variáveis</h2>
<p>Mas podemos usar um segredo guardado a sete chaves pelos Ninjas do Github, que são as variáveis! </p>
<p><em>Tá, fala logo, como que usa isso! ¬¬</em></p>
<p>Calma, vou dizer :P</p>
<p>No final do seu arquivo, você coloca as suas variáveis nesse formato:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="link_reference">nome-da-variavel</span>]:<span class="link_url"> valor-da-variavel</span></div></pre></td></tr></table></figure>

<p>E para usar, só fazer assim:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[nome-da-variavel]</div></pre></td></tr></table></figure>

<p>No caso do arquivo Markdown acima, aquele trecho de código ficaria assim:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="header"># Get Module</span></div><div class="line">  </div><div class="line"><span class="blockquote">&gt; Include local NodeJS modules relative to your root path</span></div><div class="line">  </div><div class="line">[<span class="link_label">![NPM version</span>][<span class="link_reference">npm-version-image</span>]][<span class="link_reference">npm-version-url</span>]</div><div class="line">[<span class="link_label">![Build Status</span>][<span class="link_reference">travis-image</span>]][<span class="link_reference">travis-url</span>]</div><div class="line">[<span class="link_label">![Coverage Status</span>][<span class="link_reference">coveralls-image</span>]][<span class="link_reference">coveralls-url</span>]</div><div class="line">[<span class="link_label">![Code Climate</span>][<span class="link_reference">codeclimate-image</span>]][<span class="link_reference">codeclimate-url</span>]</div><div class="line">[<span class="link_label">![NPM</span>][<span class="link_reference">npm-image</span>]][<span class="link_reference">npm-url</span>]</div><div class="line">  </div><div class="line">[<span class="link_reference">npm-version-image</span>]:<span class="link_url"> https://badge.fury.io/js/getmodule.svg?style=flat</span><span class="link_url"></span></div><div class="line">[npm-version-url]: https://npmjs.org/package/getmodule<span class="link_url"></span></div><div class="line">[travis-image]: https://travis-ci.org/fdaciuk/getmodule.svg<span class="link_url"></span></div><div class="line">[travis-url]: https://travis-ci.org/fdaciuk/getmodule<span class="link_url"></span></div><div class="line">[coveralls-image]: https://img.shields.io/coveralls/fdaciuk/getmodule.svg?style=flat<span class="link_url"></span></div><div class="line">[coveralls-url]: https://coveralls.io/r/fdaciuk/getmodule?branch=master<span class="link_url"></span></div><div class="line">[npm-image]: https://nodei.co/npm/getmodule.png?downloads=true&downloadRank=true&stars=true<span class="link_url"></span></div><div class="line">[npm-url]: https://nodei.co/npm/getmodule/<span class="link_url"></span></div><div class="line">[codeclimate-image]: https://codeclimate.com/github/fdaciuk/getmodule/badges/gpa.svg?style=flat<span class="link_url"></span></div><div class="line">[codeclimate-url]: https://codeclimate.com/github/fdaciuk/getmodule</div></pre></td></tr></table></figure>

<p>Da hora não? ;)</p>
<p>Curtiu? Paia? Comente!</p>
<h3 id="Update">Update</h3>
<p>Como algumas pessoas comentaram, isso não é algo específico do Github, mas funciona em alguns outros lugares que seguem a <a href="http://daringfireball.net/projects/markdown/syntax#link" target="_blank" rel="external">especificação do Markdown</a>.</p>
<p>Ou seja: o foco da série é no Github, mas você pode encontrar também outros lugares onde essas dicas também funcionarão :D</p>
<p>Até o próximo post falando sobre os <strong>Segredos do Github</strong> :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github.png" alt="Segredos do Github"></p>
<p>Hoje estarei dando início a uma nova série de posts chamada <strong>Segredos do Github</strong>. Essa série trará dicas de coisas <em>secretas</em> que vão dar um <em>up</em> na sua forma de utilizar a rede social mais adorada pelos nerds do mundo todo: o <a href="https://github.com" target="_blank" rel="external">Github</a>!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="markdown" scheme="http://blog.da2k.com.br/tags/markdown/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Como ser um dev frontend usando Linux]]></title>
    <link href="http://blog.da2k.com.br/2015/01/15/como-ser-um-dev-frontend-usando-linux/"/>
    <id>http://blog.da2k.com.br/2015/01/15/como-ser-um-dev-frontend-usando-linux/</id>
    <published>2015-01-15T00:00:00.000Z</published>
    <updated>2015-01-15T01:40:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/linux.jpg" alt=""></p>
<p>Muita gente me pergunta:<br>“<em>Você trabalha com frontend e usa Linux? Como faz pra usar Photoshop?</em>“</p>
<p>Como se frontend só trabalhasse com Photoshop :P<br>Mas vem comigo que te mostro ;)</p>
<a id="more"></a>

<p>Trabalhar com desenvolvimento frontend envolve muito código, por isso Linux - ao menos pra mim - é a melhor solução. Usar uma distribuição que não te deixe na mão e facilite a instalação de pacotes é essencial. No momento estou usando duas distros: <a href="http://ubuntugnome.org/" target="_blank" rel="external"><strong>Ubuntu Gnome</strong></a> - porque o <a href="https://unity.ubuntu.com/" target="_blank" rel="external"><strong>Unity</strong></a> é muito palha :P - e <a href="http://elementaryos.org/" target="_blank" rel="external"><strong>Elementary OS</strong></a>.</p>
<p>As duas resolvem bem qualquer tipo de problema. </p>
<p>Uso o <a href="https://apps.ubuntu.com/cat/applications/precise/terminator/" target="_blank" rel="external">Terminator</a> no lugar do terminal padrão do Ubuntu (dica do <a href="https://github.com/caarlos0/" target="_blank" rel="external">Carlos Becker</a>, que inclusive tem uma coleção de <a href="https://github.com/caarlos0/dotfiles" target="_blank" rel="external">dotfiles</a> bem da hora xD).</p>
<p>Para codar, <strong>Sublime Text</strong> com algumas <a href="https://gist.github.com/fdaciuk/8b3269a3d797ee723672" target="_blank" rel="external">configurações específicas</a>.</p>
<p><a href="https://apps.ubuntu.com/cat/applications/shutter/" target="_blank" rel="external">Shutter</a>, para tirar prints da tela.</p>
<p><a href="https://apps.ubuntu.com/cat/applications/gimp/" target="_blank" rel="external">Gimp</a> para tratar alguma imagem - não fico mexendo muito com imagens, uso mais para fazer as capas dos posts do blog :P</p>
<p><a href="https://apps.ubuntu.com/cat/applications/fogger/" target="_blank" rel="external">Fogger</a> para criar apps a partir de web apps - um que faz uma frente é o <a href="http://devdocs.io/" target="_blank" rel="external">DevDocs.io</a> :)</p>
<p><em>Mas e quando você recebe um layout no Photoshop, como você abre os PSDs?</em></p>
<p>Bom, já rodei Photoshop no Wine, - fica razoavelmente bom, com poucos bugs, mas fica pesado - já testei em máquina virtual, mas fica lento também. Até pouco tempo atrás, essas eram as únicas soluções.</p>
<p>Mas - por incrível que pareça - a Adobe pensou nos devs frontend que, como eu, gostam de usar Linux e só usam Photoshop para fazer recorte de imagens, pegar medidas, fontes, tamanhos de fontes, cores, etc., e lançou um serviço <strong>lindo</strong> chamado <a href="https://projectparfait.adobe.com/" target="_blank" rel="external">Project Parfait</a>, onde você faz exatamente isso: pode fazer upload de um PSD (ou vários), e extrair cores, fontes, exportar imagens, etc.</p>
<p>Agora você não tem mais desculpinha pra ficar usando Windows! E nem falo nada de programador BACKEND que usa Windows! :P</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/its-not-windows.jpg" alt="Don&#39;t Panic - It&#39;s not Windows"></p>
<p>Mas brincadeiras à parte, use o sistema que você se sentir mais confortável, e te fizer mais produtivo! :D <span style="color: #f0f0f0">Desde que não seja Windows.</span></p>
<p>E você, qual o seu sistema operacional? E qual o seu workflow? Comenta ae! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/linux.jpg" alt=""></p>
<p>Muita gente me pergunta:<br>“<em>Você trabalha com frontend e usa Linux? Como faz pra usar Photoshop?</em>“</p>
<p>Como se frontend só trabalhasse com Photoshop :P<br>Mas vem comigo que te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="linux" scheme="http://blog.da2k.com.br/tags/linux/"/>
    
      <category term="workflow" scheme="http://blog.da2k.com.br/tags/workflow/"/>
    
      <category term="frontend" scheme="http://blog.da2k.com.br/categories/frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress: o arquivo functions.php]]></title>
    <link href="http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/"/>
    <id>http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/</id>
    <published>2015-01-14T00:00:00.000Z</published>
    <updated>2015-01-20T02:59:11.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-functions-php.jpg" alt="WordPress - O arquivo functions.php"></p>
<p>O <strong>functions.php</strong> é o canal que liga o seu tema a todas as coisas legais que o WP tem a oferecer! Códigos personalizados, estrutura de arquivos… todo tipo de manipulação que você imagina no seu site WordPress, você faz através do <strong>functions.php</strong>. Vamos conhecê-lo? ;)</p>
<a id="more"></a>

<p>O <strong>functions.php</strong> é um arquivo que fica na raiz do seu tema WordPress, e ele é carregado antes de qualquer arquivo de template do tema.</p>
<p>Sem perder tempo, vamos então criá-lo!</p>
<h2 id="Segurança">Segurança</h2>
<p>Uma pequena pausa para tratar de uma melhoria para segurança: no post anterior, comentei sobre como previnir acesso direto a um arquivo do seu tema, lembra? Pois o <strong>Pedro Diaz</strong> fez um comentário muito relevante:</p>
<blockquote>
<p>Uma dúvida: eu poderia colocar este código em um arquivo .php e somente dar um include nos outros arquivos?</p>
</blockquote>
<p>E a resposta é: SIM, é possível!</p>
<p>Para manter a organização do nosso tema, vamos adicionar nossos códigos personalizados em um diretório chamado <code>functions</code>, e criar um arquivo chamado <code>security.php</code>. A estrutura de arquivos do nosso tema deve estar assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .editorconfig</div><div class="line">├── footer.php</div><div class="line">├── functions</div><div class="line">│   └── security.php</div><div class="line">├── functions.php</div><div class="line">├── header.php</div><div class="line">├── index.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Criamos o arquivo <code>functions.php</code> e o arquivo <code>security.php</code>. Então transferimos nosso código que faz o redirect para esse arquivo <code>security.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">if</span>( ! defined( <span class="string">'ABSPATH'</span> ) ) {</div><div class="line">    header( <span class="string">'Location: /00-opensource/wordpress/'</span> );</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><em>Ei, você esqueceu de fechar o <code>&lt;?php</code></em>?</p>
<p>Não! Essa é uma boa prática no desenvolvimento com PHP. Sempre que você tiver um arquivo que só irá conter código PHP, você não precisa (e não deve) fechar com a tag <code>?&gt;</code>, pois, se esse arquivo tiver a tag de fechamento e você esquecer um espaço ou quebra de linha após essa tag; e ele for carregado antes de qualquer outro arquivo que faça alguma modificação de <code>headers</code>, você terá um erro como esse:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">Erro</span> PHP: Cannot modify header information – headers already sent</div></pre></td></tr></table></figure>

<p>Agora você precisa somente fazer o include do arquivo <code>security.php</code> nos seus arquivos, ao invés de adicionar o <code>if</code> todo :)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">'functions/security.php'</span> <span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>

<p>Só não esqueça que, se você estiver dentro de diretórios, vai precisar passar o caminho relativo ao arquivo. Mas use isso como você achar melhor, ok? ;)</p>
<h2 id="Suporte_para_funcionalidades">Suporte para funcionalidades</h2>
<p>O WordPress tem várias <a href="http://codex.wordpress.org/Function_Reference/add_theme_support" target="_blank" rel="external">funcionalidades legais</a>, mas que não vêm ativadas por padrão, pois consumiriam muitos recursos se estivessem ativadas e você não precisasse delas. Então, você ativa essas funcionalidades conforme a sua necessidade.</p>
<p>Se você olhar no Painel, por exemplo, na tela de edição de post, você terá as seguintes opções:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/single-post.png" alt="Single post"></p>
<p>Vamos adicionar a funcionalidade de <strong>Post Thumbnails</strong>, para que possamos adicionar uma imagem ao nosso post. No seu <code>functions.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="string">'functions/security.php'</span>;</div><div class="line">  </div><div class="line">add_action( <span class="string">'after_setup_theme'</span>, <span class="string">'setup_features'</span> );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup_features</span><span class="params">()</span> </span>{</div><div class="line">    add_theme_support( <span class="string">'post-thumbnails'</span> );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>E temos como resultado:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/featured-image.png" alt="Imagem destacada"></p>
<p>Agora temos essa nova funcionalidade disponível para todos os nossos <em>tipos de conteúdo</em>!</p>
<p><em>E como eu uso isso?</em></p>
<p>Na sua <code>index.php</code>, adicione o código:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php <span class="keyword">if</span>( have_posts() ) : <span class="keyword">while</span>( have_posts() ) : the_post() ?&gt;</div><div class="line">    &lt;?php</div><div class="line">        <span class="keyword">if</span>( has_post_thumbnail() ) {</div><div class="line">            the_post_thumbnail();</div><div class="line">        }</div><div class="line">    ?&gt;</div><div class="line">    <span class="comment">// ...</span></div></pre></td></tr></table></figure>

<p>Adicionei o loop novamente (linha 1) só para que você possa se encontrar para saber onde deve adicionar o código.</p>
<p><strong>Uma outra boa prática que preciso comentar aqui:</strong> percebeu que eu abri novamente uma tag PHP, ainda que na linha de cima eu já tinha uma linha só com código PHP? Por que eu não utilizei o mesmo escopo, deixando o código como abaixo?</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php <span class="keyword">if</span>( have_posts() ) : <span class="keyword">while</span>( have_posts() ) : the_post();</div><div class="line">    <span class="keyword">if</span>( has_post_thumbnail() ) {</div><div class="line">        the_post_thumbnail();</div><div class="line">    }</div><div class="line">    ?&gt;</div><div class="line">    <span class="comment">// ...</span></div></pre></td></tr></table></figure>

<p>Bom, por essa implementação, você já pode perceber que o alinhamento das indentações não bate. Procure sempre manter as indentações bem definidas. Sempre que você precisar fazer uma validação PHP usando <code>if</code> por exemplo, e vai precisar imprimir código HTML dentro desse <code>if</code>, use a notação com <code>:</code>, dessa forma, e abra um novo escopo de tags:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php <span class="keyword">if</span>( verifique_alguma_coisa() ) : ?&gt;</div><div class="line">    &lt;h1&gt;Título&lt;/h1&gt;</div><div class="line">&lt;?php <span class="keyword">endif</span> ?&gt;</div></pre></td></tr></table></figure>

<p>Dessa forma o código fica muito mais limpo e consistente, pois você sabe onde o <code>if</code> termina, por causa do <code>endif</code>. Se usar com chaves, já fica ruim de visualizar:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php <span class="keyword">if</span>( verifique_alguma_coisa() ) { ?&gt;</div><div class="line">    &lt;h1&gt;Título&lt;/h1&gt;</div><div class="line">&lt;?php } ?&gt;</div></pre></td></tr></table></figure>

<p>Da mesma forma, quando precisamos adicionar um código PHP indentado, mas precisamos fechar o PHP para adicionar HTML. Quando indentar, abrar um novo escopo de tags <code>&lt;?php ?&gt;</code>, para que seu código se mantenha o mais legível possível.</p>
<p><strong>Fica a dica!</strong></p>
<p>Agora temos duas novas funções: <code>has_post_thumbnail()</code> e <code>the_post_thumbnail()</code>. Os nomes são bem semânticos, não?</p>
<p><code>has_post_thumbnail()</code> retorna <code>true</code> se o post tem uma imagem destacada, e <code>false</code> se não houver. E <code>the_post_thumbnail()</code>, gera uma tag de imagem, com a imagem destacada que você adicionar no seu post. Se não houver imagem, continua a exibição normal do post :)</p>
<p>Para ver o código completo até aqui, siga esse repositório: <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br</a></p>
<p>Lembra que comentamos sobre <em>hooks</em>? No código mais acima, podemos ver o hook <code>after_setup_theme</code> em ação.</p>
<p><em>Como ele funciona?</em></p>
<p>Os desenvolvedores do WordPress “largam” algumas chamadas aos <em>hooks</em> (ganchos) no meio do <em>core</em> do WP, para que você possa “pendurar” os seus próprios códigos. Nesse caso, dizemos ao WordPress que, quando chegar no local do código onde está posicionado o <em>hook</em> <code>after_setup_theme</code>, ele deve executar a função <code>setup_features</code>, passada no segundo parâmetro.</p>
<p>O WordPress tem vários <em>hooks</em> no <em>core</em>, que podem ser encontrados aqui: <a href="http://codex.wordpress.org/Plugin_API/Hooks" target="_blank" rel="external">http://codex.wordpress.org/Plugin_API/Hooks</a></p>
<p>Mas não se preocupe com isso agora. Veremos isso mais a fundo nos próximos posts, inclusive aprenderemos como criar nossos próprios hooks :D</p>
<p>Bom, paramos por aqui, mas saiba que estamos apenas começando! Temos muitas coisas legais ainda pra ver! Continue acompanhando a série!</p>
<p>Até o próximo post :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-functions-php.jpg" alt="WordPress - O arquivo functions.php"></p>
<p>O <strong>functions.php</strong> é o canal que liga o seu tema a todas as coisas legais que o WP tem a oferecer! Códigos personalizados, estrutura de arquivos… todo tipo de manipulação que você imagina no seu site WordPress, você faz através do <strong>functions.php</strong>. Vamos conhecê-lo? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Brincando com números]]></title>
    <link href="http://blog.da2k.com.br/2015/01/13/javascript-brincando-com-numeros/"/>
    <id>http://blog.da2k.com.br/2015/01/13/javascript-brincando-com-numeros/</id>
    <published>2015-01-13T00:00:00.000Z</published>
    <updated>2015-01-14T02:41:59.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/js-numbers.jpg" alt=""></p>
<p>Quando você começa a estudar sobre a <a href="https://insidejavascript.wordpress.com/2011/09/16/lexical-structure/" target="_blank" rel="external">estrutura léxica</a> da <strong>Javascript</strong>, você vê que as “bizarrices” encontradas em <a href="http://wtfjs.com/" target="_blank" rel="external">http://wtfjs.com/</a> são todos comportamentos esperados! Hoje eu quero mostrar algo simples, mas que pode te ajudar bastante ao trabalhar com números em Javascript :D</p>
<a id="more"></a>

<h2 id="Conversão_de_números">Conversão de números</h2>
<p>Em um projeto que você recebe uma entrada de dados do usuário, você precisa sempre tratar essa entrada, para saber se está realmente recebendo o valor que você espera. Vamos dar um exemplo, onde você tem uma função chamada <code>sum()</code>, que soma dois números. Esses dois números são recebidos através de dois <code>inputs</code> (vou deixar tudo em um só arquivo somente para exemplificar. Eviter fazer isso):</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Somar dois números<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Somar dois números<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">data-js</span>=<span class="value">"number1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">data-js</span>=<span class="value">"number2"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span>&gt;</span>Somar<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-js</span>=<span class="value">"result"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.querySelector( <span class="string">'button'</span> )</div><div class="line">      .addEventListener( <span class="string">'click'</span>, handleClick, <span class="literal">false</span> );</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> number1 = <span class="built_in">document</span>.querySelector( <span class="string">'[data-js="number1"]'</span>).value;</div><div class="line">      <span class="keyword">var</span> number2 = <span class="built_in">document</span>.querySelector( <span class="string">'[data-js="number2"]'</span>).value;</div><div class="line">      </div><div class="line">      <span class="built_in">document</span>.querySelector( <span class="string">'[data-js="result"]'</span> ).innerHTML = sum( number1, number2 );</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">      <span class="keyword">return</span> number1 + number2;</div><div class="line">    }</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Esse seria mais ou menos o código que você iria utilizar para fazer a soma, correto?</p>
<p>Entre com dois números nos inputs e veja o resultado:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sum-1-2-12.png" alt="Somar &quot;1&quot; e &quot;2&quot; é igual a &quot;12&quot;"></p>
<p>Eu entrei com os números <code>1</code> e <code>2</code> e tive como resultado… <strong><code>12</code></strong>!</p>
<p><em>12??? Como assim?</em></p>
<p>O Javascript recebeu os valores dos inputs da forma como eles vieram. Normalmente esses valores vêm como <code>String</code>. Se você conhece a estrutura léxica do Javascript, você sabe que, ao usar o sinal de <code>+</code>, ele pode tanto somar números, como concatenar strings. Quando você tem ao menos uma string em uma das partes, ele assume que o que você quer fazer é concatenar.</p>
<p><em>Então como eu posso resolver isso?</em></p>
<p>Precisamos converter esses valores de string para números, antes de efetuar a soma!</p>
<h2 id="parseInt()">parseInt()</h2>
<p>Temos a função <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="external">parseInt()</a>, que recebe dois parâmetros: o primeiro é o valor que você quer converter para um número inteiro, e o segundo, um número inteiro que vai representar o tipo de conversão que será feito. </p>
<p>No nosso caso, vamos utilizar como segundo parâmetro o número <code>10</code>, que representa números decimais.</p>
<p>Mudamos um pouco nossa função de soma para ficar assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  <span class="keyword">var</span> DECIMAL = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>( number1, DECIMAL ) + <span class="built_in">parseInt</span>( number2, DECIMAL );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Como já vimos em posts anteriores, vamos utilizar boas práticas de <em>Clean Code</em>. Coloquei o número 10 em uma variável chamada <code>DECIMAL</code> (tudo maiúsculo, pois é convenção para constantes), para que saibamos o que significa esse segundo parâmetro. </p>
<p>A boa prática é nunca usar números mágicos, mas sempre atribuí-los à uma constante.</p>
<p>Agora tente novamente fazer a soma:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sum1-2-3.png" alt="Soma 1 + 2 = 3"></p>
<p>E temos o resultado correto :)</p>
<p>É importante frisar o uso do segundo parâmetro do <code>parseInt()</code>, pois isso pode alterar o resultado final. Por exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>( <span class="string">'10px'</span> ); <span class="comment">// 10</span></div><div class="line"><span class="built_in">parseInt</span>( <span class="string">'10px'</span>, <span class="number">10</span> ); <span class="comment">// 10</span></div><div class="line"><span class="built_in">parseInt</span>( <span class="string">'0x'</span> ); <span class="comment">// NaN</span></div><div class="line"><span class="built_in">parseInt</span>( <span class="string">'0x'</span>, <span class="number">10</span> ) <span class="comment">// 0</span></div></pre></td></tr></table></figure>

<p>Como você pode ver nos exemplos acima, o <code>parseInt()</code> converte a string baseado nos primeiros caracteres, se o segundo parâmetro não for passado.</p>
<p>No primeiro e segundo exemplos, ele retorna <code>10</code>. Mas no terceiro e quarto exemplos, temos uma pequena diferença.</p>
<p>Quando uma string é iniciada em <code>0X</code> ou <code>0x</code>, e o segundo parâmetro não for definido, o <code>parseInt()</code> entende que essa é uma notação <strong>hexadecimal</strong>, e tenta converter ao inteiro equivalente. Como <code>0x</code> é só o início da string, não retorna número algum, o resultado é <code>NaN</code> (Not a number).</p>
<p>No quarto exemplo, nós dizemos ao <code>parseInt()</code> que a string deve ser interpretada como <strong>decimal</strong>. Então ele apresenta o resultado esperado.</p>
<p>Muito cuidado com isso ;)</p>
<blockquote>
<p>Para ver todos os tipos disponíveis para usar no segundo parâmetro, acesse <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="external">https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt</a>.</p>
</blockquote>
<h2 id="O_operador_+">O operador <code>+</code></h2>
<p>Mas tem outra malandragem pouco conhecida para a conversão de números: o sinal de <code>+</code>. Quando usado antes de uma string, e a string for um número, ele converte o tipo dessa string para <code>Number</code>! Duvida? Mude a função <code>sum()</code> novamente:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  number1 = +number1;</div><div class="line">  number2 = +number2;</div><div class="line">  <span class="keyword">return</span> number1 + number2;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Convertemos os valores para número antes de somar e… agora nosso resultado está correto novamente!</p>
<h2 id="Conclusão">Conclusão</h2>
<p>A intenção desse post foi mostrar o uso do operador <code>+</code>, que facilita muito na hora de converter <code>String</code> para <code>Number</code>, além de frisar a importância do uso do segundo parâmetro no <code>parseInt()</code>.</p>
<p>Gostou da dica? Ficou com alguma dúvida? Comente! </p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/js-numbers.jpg" alt=""></p>
<p>Quando você começa a estudar sobre a <a href="https://insidejavascript.wordpress.com/2011/09/16/lexical-structure/" target="_blank" rel="external">estrutura léxica</a> da <strong>Javascript</strong>, você vê que as “bizarrices” encontradas em <a href="http://wtfjs.com/" target="_blank" rel="external">http://wtfjs.com/</a> são todos comportamentos esperados! Hoje eu quero mostrar algo simples, mas que pode te ajudar bastante ao trabalhar com números em Javascript :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/tags/tips/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress: Estrutura inicial do tema, padrões de codificação e uso do editor]]></title>
    <link href="http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/"/>
    <id>http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/</id>
    <published>2015-01-12T00:00:00.000Z</published>
    <updated>2015-01-14T02:41:59.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/serie-wp-01.jpg" alt="WordPress"></p>
<p>Este é o primeiro post da nossa série <strong>Como criar temas para WordPress</strong>! É importante salientar que todos os posts serão <em>hands on</em>, então não adianta ficar só lendo! Para aprender de verdade é preciso praticar! Siga todos os passos citados nos posts, crie os arquivos conforme as orientações, que em breve você estará apto para criar seu próprio tema, combinado? ;)</p>
<a id="more"></a>

<h2 id="Padrões_de_codificação">Padrões de codificação</h2>
<p>Para manter um padrão de codificação, vamos seguir os <a href="http://codex.wordpress.org/WordPress_Coding_Standards" target="_blank" rel="external"><em>Coding Standards</em> do WordPress</a> para PHP, HTML, CSS e Javascript.</p>
<h2 id="Editor">Editor</h2>
<p>Eu irei utilizar o <strong>Sublime Text</strong> para codificar nosso tema, mas você pode utilizar qual você preferir, contanto que mantenha os padrões de codificação dos arquivos, não haverá maiores problemas em utilizar outro editor ou IDE.</p>
<p>Se quiser usar o <strong>Sublime Text</strong> nas mesmas configurações que eu uso, siga as instruções <a href="https://gist.github.com/fdaciuk/8b3269a3d797ee723672" target="_blank" rel="external">desse gist</a>.</p>
<h2 id="Estrutura_inicial_de_arquivos">Estrutura inicial de arquivos</h2>
<p>Nós vamos criando os arquivos conforme a necessidade das funcionalidades do tema, enquanto estivermos desenvolvendo. Então vamos começar apenas com a estrutura abaixo:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .editorconfig</div><div class="line">├── index.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Já vimos no <a href="http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/" target="_blank" rel="external">artigo de apresentação</a> que essa é a estrutura base de um tema para WordPress. Nós iremos utilizar essa mesma estrutura para dar início ao nosso tema.</p>
<p>O único arquivo novo aqui é o <code>.editorconfig</code> (se escreve assim mesmo, com um ponto no início). Com esse arquivo, nós conseguimos setar algumas configurações para criação de arquivos, para que não venhamos ter problemas ao usar editores diferentes.</p>
<p>Vamos usar a seguinte configuração no <code>.editorconfig</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># editorconfig.org</span></div><div class="line"><span class="variable">root =</span> <span class="constant">true</span></div><div class="line">  </div><div class="line">[*]</div><div class="line"><span class="variable">charset =</span> utf-<span class="number">8</span></div><div class="line"><span class="variable">end_of_line =</span> lf</div><div class="line"><span class="variable">indent_size =</span> <span class="number">4</span></div><div class="line"><span class="variable">indent_style =</span> space</div><div class="line"><span class="variable">insert_final_newline =</span> <span class="constant">false</span></div><div class="line"><span class="variable">trim_trailing_whitespace =</span> <span class="constant">true</span></div></pre></td></tr></table></figure>

<p>É necessário instalar o plugin do <em>Editorconfig</em> no seu editor. Para saber mais sobre o <code>.editorconfig</code>, e ver como instalar o plugin para o editor de sua preferência, acesse <a href="http://editorconfig.org/" target="_blank" rel="external">http://editorconfig.org/</a></p>
<p>Nesse caso, nós definimos que todos os nossos arquivos serão salvos com o charset <strong>utf-8</strong>, o estilo de indentação será com espaços (<code>indent_style = space</code>), com tamanho de indentação de <strong>4 espaços</strong> (<code>indent_size = 4</code>). </p>
<p> Nos <em>Coding Standards</em> do WordPress, ele diz que devemos utilizar <code>tabs</code>, mas vamos utilizar espaços aqui. Se você for desenvolver algum tema ou plugin para subir no repositório do WP, você precisa seguir todos os <em>Coding Standards</em> corretamente, nesse caso, usando <em>tab</em> ao invés de <em>space</em>.</p>
<p>Não se preocupe, você não vai precisar ficar dando 4 espaços a todo momento que for indentar. A diferença é que, ao pressionar a tecla <em>TAB</em>, o que o seu editor faz é usar quatro <code>\s</code> (que representa espaços) ao invés de usar um <code>\t</code> (que representa tabulação) com tamanho 4.</p>
<p>A vantagem de utilizar espaços é que, em qualquer editor, o tamanho da indentação vai permanecer sempre igual. Se utilizarmos tab, esse tamanho pode variar para 8 ou 16, dependendo da configuração do editor (não tenho certeza se com o <em>editorconfig</em> instalado o problema continua, mas por garantia, vamos usar espaços).</p>
<p>Também não iremos deixar adicionar uma nova linha ao final do arquivo quando salvar (<code>insert_final_newline = false</code>), e iremos remover espaços em branco sobrando no final das linhas (<code>trim_trailing_whitespace = true</code>).</p>
<h2 id="Quebrando_a_index">Quebrando a index</h2>
<p>Feito isso, vamos quebrar nossa index em algumas partes. O header e o footer serão padrão para todos os templates, então iremos separá-los em mais dois arquivos: <code>header.php</code> e <code>footer.php</code>.</p>
<p>O <code>header.php</code> vai ficar assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"pt-br"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Meu tema WordPress<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> wp_head() <span class="preprocessor">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E o <code>footer.php</code> assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> wp_footer() <span class="preprocessor">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Isso porque nós iremos incluir o mesmo header e o footer em cada arquivo do nosso tema, então separamos em <em>partials</em> para que possamos aproveitá-los sem ficar repetindo código. Mais pra frente você vai entender a vantagem de usar o header e o footer dessa forma, quebrando a abertura / fechamento da tag <code>body</code>.</p>
<p>Temos duas novidades aqui: as funções <code>wp_head()</code> e <code>wp_footer()</code>. Elas são usadas pelo WordPress como <em>hooks</em> (ganchos), para <strong>pendurar</strong> alguns códigos. Veremos o uso disso em posts futuros.</p>
<p>E a nossa <code>index</code> vai ficar assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> get_header() <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">if</span>( have_posts() ) : <span class="keyword">while</span>( have_posts() ) : the_post() <span class="preprocessor">?&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;?php the_permalink() ?&gt;"</span>&gt;</span></div><div class="line">            <span class="php"><span class="preprocessor">&lt;?php</span> the_title() <span class="preprocessor">?&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></div><div class="line">        <span class="php"><span class="preprocessor">&lt;?php</span> the_content() <span class="preprocessor">?&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endwhile</span>; <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">else</span> : <span class="preprocessor">?&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Não existem posts.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endif</span> <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> get_footer() <span class="preprocessor">?&gt;</span></span></div></pre></td></tr></table></figure>

<p>Nas linhas <code>1</code>e <code>19</code> podemos ver duas funções novas: <code>get_header()</code> e <code>get_footer()</code>. Essas funções incluem os arquivos <code>header.php</code> e <code>footer.php</code> no nosso template.</p>
<p><em>Mas o PHP já tem uma função <code>include</code>. Por que eu não posso usar o <code>include</code> do PHP ao invés das funções do WordPress?</em></p>
<p>Em breve iremos falar sobre <em>hooks</em>, e, além da questão <strong>segurança</strong>, é por causa desses <em>hooks</em> que iremos utilizar as funções do WordPress, ao invés de usar o <code>include</code> puro do PHP.</p>
<p><em>E como o WordPress sabe que são esses arquivos que ele precisa incluir, sendo que você acabou de criá-los?</em></p>
<p>O WordPress tem algumas funções que nos ajudam no desenvolvimento do nosso tema. Você pode ler mais sobre isso acessando <a href="http://codex.wordpress.org/Theme_Development" target="_blank" rel="external">http://codex.wordpress.org/Theme_Development</a></p>
<p>Falaremos com mais detalhes sobre cada uma dessas funções nos próximos posts.</p>
<p>Nossa estrutura inicial separada em partials está legal! Mas ainda temos um problema se segurança.</p>
<p><em>Ah é? Onde?</em></p>
<p>Tente acessar o arquivo <code>index.php</code> diretamente pela URL do seu navegador, por exemplo.<br>O index do meu tema está localizado em:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/<span class="number">00</span>-opensource/wordpress/wp-content/themes/wordpress-base-theme-da2k.com.br/index.php</div></pre></td></tr></table></figure>

<p>Será mostrado esse erro: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Fatal error: <span class="operator"><span class="keyword">Call</span> <span class="keyword">to</span> undefined <span class="keyword">function</span> get_header() <span class="keyword">in</span> /<span class="keyword">var</span>/www/<span class="number">00</span>-opensource/wordpress/wp-content/themes/wordpress-base-theme-da2k.com.br/<span class="keyword">index</span>.php <span class="keyword">on</span> line <span class="number">1</span></span></div></pre></td></tr></table></figure>

<p>O erro diz: <em>Chamada para função indefinida get_header() no arquivo [caminho do arquivo] na linha 1</em></p>
<p><em>Por que deu esse erro?</em></p>
<p>A função não está definida, porque o WordPress começa a ser carregado a partir da <code>index.php</code> na raiz do projeto. Ali ele vai incluindo os arquivos necessários para que todas as funções funcionem corretamente. Como nós adicionamos as funções <code>get_header()</code> e <code>get_footer()</code> em nossa <code>index</code>, ao acessar o arquivo diretamente, o WordPress não foi carregado, e o PHP acusou esse erro.</p>
<p>E o problema maior é que ele mostra o caminho completo até o arquivo onde deu o erro! Se alguém com más intenções fizer isso no seu site em produção, ele poderá ter facilmente o caminho desde a raiz do seu servidor, até a sua pasta pública, para tentar atacar de alguma forma.</p>
<p><em>E como podemos contornar isso?</em></p>
<p>Se você abrir o arquivo <code>index.php</code> do WordPress, na raiz do projeto, vai ver que ele faz um include (usando <code>require</code>) do arquivo <code>wp-blog-header.php</code>, e nesse arquivo, tem um include para <code>wp-load.php</code>. Nesse arquivo, você verá uma constante definida chamada <code>ABSPATH</code> no início do arquivo.</p>
<p>Como é o WordPress que define essa constante, nós podemos deduzir que, se essa constante não estiver definida, então o WordPress não foi carregado. Logo, podemos ir um pouco mais longe e deduzir que, se esse erro foi mostrado, algum safado-sem-vergonha está tentando acessar nosso site pra tentar encontrar alguma brecha de segurança, correto? Então vamos nos previnir disso! </p>
<p>O código abaixo você precisa colocar em todos os arquivos <code>.php</code> dentro do SEU TEMA, ok?</p>
<p>Por enquanto temos só o <code>header.php</code>, <code>footer.php</code> e <code>index.php</code>, mas quando tivermos mais, esse código deve ser adicionado a cada um deles, ok?</p>
<p>Coloque no início do arquivo:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span></div><div class="line"><span class="keyword">if</span>( ! defined( <span class="string">'ABSPATH'</span> ) ) {</div><div class="line">    header( <span class="string">'Location: /'</span> );</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">}</div><div class="line"><span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>

<p><em>O que nós estamos fazendo aqui?</em></p>
<p>Estamos verificando se o <code>ABSPATH</code> está definido. Se não tiver, vamos redirecionar o safado-sem-vergonha para a home do site! O <code>exit</code> diz ao PHP para parar de renderizar qualquer coisa que vier após esse código, pois se o redirect demorasse, ainda seria possível ver o erro na tela.</p>
<p>E se a constante <code>ABSPATH</code> estiver definida, o PHP pula esse <code>if</code> e segue o fluxo normal :)</p>
<p>Se o seu site estiver em uma subpasta, você precisa adicionar ela no lugar da barra. No meu caso, está em <code>/00-opensource/wordpress/</code>, então vou colocar dessa forma:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span></div><div class="line"><span class="keyword">if</span>( ! defined( <span class="string">'ABSPATH'</span> ) ) {</div><div class="line">    header( <span class="string">'Location: /00-opensource/wordpress/'</span> );</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">}</div><div class="line"><span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>

<p>Agora tente acessar novamente o arquivo <code>index.php</code> e você será redirecionado para a home :D</p>
<p>Não esqueça que isso deve ser feito em todo arquivo <code>.php</code> do seu tema, ok?</p>
<p>Por hoje é só! No próximo post daremos continuidade!</p>
<p>Até lá!</p>
<blockquote>

<p><strong>Link para o índice:</strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/serie-wp-01.jpg" alt="WordPress"></p>
<p>Este é o primeiro post da nossa série <strong>Como criar temas para WordPress</strong>! É importante salientar que todos os posts serão <em>hands on</em>, então não adianta ficar só lendo! Para aprender de verdade é preciso praticar! Siga todos os passos citados nos posts, crie os arquivos conforme as orientações, que em breve você estará apto para criar seu próprio tema, combinado? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Índice da série: Como criar temas para WordPress]]></title>
    <link href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/"/>
    <id>http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</id>
    <published>2015-01-11T00:00:00.000Z</published>
    <updated>2015-01-21T02:32:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-intro.jpg" alt="WordPress"></p>
<p>Como falei <a href="http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/" target="_blank" rel="external">nesse post</a>, vamos começar uma série completa de posts, mostrando como criar temas para WordPress. Vamos abordar todas as partes necessárias, começando com o básico para criar um blog, passando por criação de páginas institucionais, campos personalizados, até que tenhamos uma estrutura que suporte qualquer tipo de site! </p>
<a id="more"></a>

<p>Não vamos nos ater a nenhum tipo de conteúdo em específico. Ao longo dos posts, vamos criar vários tipos de conteúdo diferentes, para mostrar tudo o que é possível fazer com o WordPress. O código do tema ficará disponível <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">nesse repositório do Github</a> - se você ainda não tem uma conta no Github, é a sua hora de criar :D</p>
<p>Se você tem sugestões sobre o que gostaria que fosse abordado, deixe um comentário no final desse post. </p>
<p>Se tiver algum problema com algum código, dê um <em>fork</em> no projeto e submeta um <em>Pull Request</em>. Se a sua correção for válida, o <em>Pull Request</em> será aceito e você será citado no post que falarmos da correção. Então se você ainda não tem familiaridade com o <a href="https://github.com" target="_blank" rel="external">Github</a>, agora é o momento de aprender isso também :)</p>
<p>Vamos sempre consultar o <a href="http://codex.wordpress.org/" target="_blank" rel="external">Codex</a> e a <a href="http://php.net/manual/en/" target="_blank" rel="external">documentação do PHP</a> para nos auxiliar. Isso vai ajudar também àqueles que têm dificuldades em buscar informações nesses canais.</p>
<p>Informação importante: você deve conhecer os <a href="http://codex.wordpress.org/WordPress_Coding_Standards" target="_blank" rel="external"><em>Coding Standards</em> do WordPress</a>. Acesse o link, leia, experimente. Iremos usá-lo muito, ok? ;)</p>
<p>Esse post servirá como uma introdução à série, e como índice, para organização das postagens. Ele será atualizado conforme os posts forem sendo escritos. E em cada post da série, você verá um link para esse post de introdução, um para o post anterior e um para o próximo post da série.</p>
<p>Aproveite, e bons estudos!</p>
<h2 id="Índice">Índice</h2>
<ol>
<li><a href="http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/" target="_blank" rel="external">Estrutura inicial do tema, padrões de codificação e uso do editor</a></li>
</ol>
<ul>
<li><a href="http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/" target="_blank" rel="external">O arquivo functions.php</a></li>
<li><a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/" target="_blank" rel="external">Conhecendo o Painel - Parte 1</a></li>
<li><a href="http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/" target="_blank" rel="external">Conhecendo o Painel - Parte 2</a></li>
</ul>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-intro.jpg" alt="WordPress"></p>
<p>Como falei <a href="http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/" target="_blank" rel="external">nesse post</a>, vamos começar uma série completa de posts, mostrando como criar temas para WordPress. Vamos abordar todas as partes necessárias, começando com o básico para criar um blog, passando por criação de páginas institucionais, campos personalizados, até que tenhamos uma estrutura que suporte qualquer tipo de site! </p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Debugar Javascript no browser]]></title>
    <link href="http://blog.da2k.com.br/2015/01/10/debugar-javascript-no-browser/"/>
    <id>http://blog.da2k.com.br/2015/01/10/debugar-javascript-no-browser/</id>
    <published>2015-01-10T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/keep-calm-and-start-debugging.png" alt="Debugue!"></p>
<p>Antigamente a única forma que tínhamos de debugar um código Javascript no browser era usando <code>alert()</code>. Hoje os browsers mais modernos disponibilizam  algumas ferramentas para ajudar nosso desenvolvimento. Uma delas é a API <code>console</code>.</p>
<p>Mas apesar de todos os seus métodos, nem sempre é possível resolver um problema de forma prática somente usando <code>console</code>. </p>
<p><em>Quais são então nossas outras opções?</em> Vem comigo que eu te mostro ;)</p>
<a id="more"></a>

<p>A maior parte das ferramentas de desenvolvimento são bastante parecidas. Para os exemplos desse post, vou usar o <strong>Chrome DevTools</strong>, mas se você estiver usando <strong>Firefox</strong>, <strong>Opera</strong> ou qualquer outro navegador moderno, pode usar o <em>Inspetor</em> do seu próprio browser, que vai ser praticamente a mesma ideia :)</p>
<h2 id="Source">Source</h2>
<p>Abrindo o <strong>DevTools</strong>, temos várias abas. Uma delas é a <strong>Sources</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sources-tab.jpg" alt="Sources"></p>
<p>Nessa aba, podemos ver todos os <em>assets</em> que foram carregados com a nossa página. Se você digitar <code>Ctrl + P</code> (ou <code>Cmd + P</code> no Mac), você consegue escolher um arquivo para abrir, com uma interface bem parecida com a do <strong>Sublime Text</strong> :)</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sources-tab-search-file.jpg" alt="Aba Source com busca de arquivos"></p>
<p>Para facilitar a visualização do arquivo, você também pode esconder as abas laterais, clicando nos botões marcados:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sources-tab-toggle.jpg" alt="Aba Source - botões para esconder abas"></p>
<p><em>Tá, e no que isso vai me ajudar?</em></p>
<p>Calma jovem, vamos ver isso agora :D</p>
<h2 id="Estrutura_de_arquivos">Estrutura de arquivos</h2>
<p>Vamos brincar um pouco. Crie uma estrutura de arquivos assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── index.html</div><div class="line">└── js</div><div class="line">    └── app.js</div></pre></td></tr></table></figure>

<p>Na <code>index.html</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Test Debugger<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"./"</span> <span class="attribute">method</span>=<span class="value">"get"</span> <span class="attribute">data-js</span>=<span class="value">"form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"submit"</span>&gt;</span>Enviar<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">form</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/app.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Um simples formulário que envia um parâmetro <code>name</code> via <code>GET</code>. Perceba que, na aba <strong>Sources</strong> são mostrados todos os arquivos que são públicos do nosso projeto:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/form-html.jpg" alt="Formulário"></p>
<p>Se você submeter esse formulário, ele vai fazer o que precisa ser feito: direcionar a ação para a mesma página (<code>action=&quot;./&quot;</code>) e passar via <em>query string</em> na URL o parâmetro do campo <code>name</code> com o valor preenchido:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/form-html-sent.jpg" alt="Formulário enviado via GET"></p>
<p>Até aqui, nada demais. Vamos agora escrever um pouco de JS para escutar o evento que faz o envio desse formulário. No arquivo <code>js/app.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( doc, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      $private.initEvents();</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.initEvents = <span class="function"><span class="keyword">function</span> <span class="title">initEvents</span><span class="params">()</span> </span>{</div><div class="line">      doc.querySelector( <span class="string">'[data-js="form"]'</span> )</div><div class="line">        .addEventListener( <span class="string">'submit'</span>, $private.handleFormSubmit, <span class="literal">false</span> );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleFormSubmit = <span class="function"><span class="keyword">function</span> <span class="title">handleFormSubmit</span><span class="params">()</span> </span>{</div><div class="line">      <span class="comment">// do something</span></div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  doc.addEventListener( <span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    App().init();</div><div class="line">  }, <span class="literal">false</span> );</div><div class="line">})( <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Nada demais também até aqui. Simplesmente esperamos o DOM estar totalmente carregado e então iniciamos nossa função. Adicionamos um <em>listener</em> ao formulário para ouvir o evento <strong>submit</strong>. Antes do formulário ser enviado, a função de callback para o evento de <em>submit</em> (<code>$private.handleFormSubmit</code>) será executada.</p>
<p><em>Será?</em></p>
<p>Tente submeter o formulário. Como saber se entramos mesmo nessa função? Vamos adicionar um <code>console.log</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$private.handleFormSubmit = <span class="function"><span class="keyword">function</span> <span class="title">handleFormSubmit</span><span class="params">( e )</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Enviou formulário'</span> );</div><div class="line">};</div></pre></td></tr></table></figure>

<p>No seu console, marque a opção <strong>“Preserve log”</strong> para não apagar os logs se a página recarregar:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/console-preserve-log.jpg" alt="Console - Preserve log"></p>
<p>Agora, submeta o formulário novamente. Se olharmos no console, a frase “Enviou formulário” será mostrada.</p>
<p><em>Tá, mas ainda eu não sei em que momento ele entrou nesse evento.</em></p>
<p>Certo, vamos então começar a debugar. Mudando a função de callback do submit, adicionando o comando <code>debugger</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$private.handleFormSubmit = <span class="function"><span class="keyword">function</span> <span class="title">handleFormSubmit</span><span class="params">( e )</span> </span>{</div><div class="line">  debugger;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Enviou formulário'</span> );</div><div class="line">};</div></pre></td></tr></table></figure>

<p>Recarregue a página e tente submeter o formulário novamente. O que aconteceu? O comando <code>debugger</code> não faz parte do Javascript. Ele é uma implementação dos browsers para criar um <em>breakpoint</em> na linha que tem o comando. Fazendo isso, você consegue literalmente parar a execução do browser naquele ponto:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/breakpoint-with-debugger.png" alt="Breakpoint com debugger"></p>
<p> <em>Para ver a imagem acima em tamanho real, abra-a em uma nova aba.</em></p>
<p>Se você reparar na aba lateral, onde mostra <em>Scope Variables</em>, ali você tem todas as variáveis locais e os seus respectivos valores. Ali ele mostra a variável <code>e</code>, representando o objeto <code>Event</code>, que é passada como parâmetro para a função <code>handleFormSubmit</code> pelo evento <code>submit</code>. Nesse objeto contém todas as informações relacionadas ao evento de submit do formulário.</p>
<p>Temos também o famoso <code>this</code>, que, nesse caso, é o nosso formulário. Se você pressionar <code>F8</code> ou clicar na seta azul, ao lado da mensagem que aparece no topo <code>Paused in debugger</code>, o browser continua a execução do script até o próximo breakpoint. Como não temos mais nenhum, ele simplesmente executa as próximas ações normalmente, submetendo o formulário.</p>
<p><em>Legal, mas como eu posso tirar proveito disso?</em></p>
<p>Vou te mostrar algo bem legal agora. Vá no seu console, digite <code>this</code> e dê enter:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/this-window.png" alt="Console this window"></p>
<p>O objeto <code>this</code> aponta para <code>window</code>, porque estamos no escopo global. Até aqui, nenhuma novidade. Agora, submeta o formulário para ele parar no debugger e faça a mesma coisa:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/this-form.png" alt="Console this form"></p>
<p>Percebeu o que acabou de acontecer? Quando estamos parados em algum <em>breakpoint</em>, o escopo do console muda junto! Agora o <code>this</code> aponta para o nosso formulário!</p>
<p>Isso é bastante útil para debugar variáveis locais. Assim você consegue saber exatamente o valor que cada variável está recebendo naquele ponto exato do seu programa xD</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/this-form-name.png" alt="Console this com valor do campo name"></p>
<p><em>Que loko véi! Tem mais? :D</em></p>
<p>Tem sim xD</p>
<p>Você também pode criar seus próprios <em>breakpoints</em> diretamente na aba <strong>Sources</strong>, clicando no número da linha. Mas primeiro, remova a linha <code>debugger</code> do <code>app.js</code>. Agora crie seu breakpoint diretamente no browser:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/manual-breakpoint.png" alt="Breakpoint manual"></p>
<p>Coloquei o DevTools na lateral para facilitar a visualização. Criei dois <em>breakpoints</em> nas linhas <code>18</code> e <code>25</code>, somente clicando sobre o número da linha. Na parte de baixo do DevTools (antes na lateral direita), temos uma guia chamada <strong>Breakpoints</strong>. Ali mostra todos os breakpoints que você adicionou no seu código. Clicando em cima de algum, o navegador dá o foco na linha com o breakpoint.</p>
<p>Agora, recarregue a tela.</p>
<p>Quando o DOM estiver pronto, o navegador para a execução na linha 25, onde fazemos o <code>init</code> do <code>App</code>. Clicando na seta azul ou pressionando <code>F8</code>, o navegador vai até o próximo breakpoint. Como só marcamos o breakpoint dentro do evento, então ele só vai parar quando submetermos o formulário.</p>
<p>Recarregue a tela novamente.</p>
<p>Perceba que, quando parados no breakpoint, ao lado da seta azul, temos uma outra seta, com uma bolinha embaixo. Clicando nela, ou pressionando <code>F10</code>, podemos ver qual o fluxo dentro do arquivo o navegador está seguindo, ou seja, quais são as próximas linhas que ele executa em ordem:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/next-step.png" alt="Próximo passo"></p>
<p>Coloque um breakpoint na linha <code>2</code> e vá clicando nesse botão, e veja você mesmo o que acontece :)</p>
<h2 id="Event_Listener_Breakpoints">Event Listener Breakpoints</h2>
<p>Sabe quando você tem um código muito grande e bagunçado, e está tentando encontrar qual função de callback é chamada quando você clica em determinado elemento da tela? Você faz <em>find</em> no seu editor em busca da função, vasculha arquivos, e perde mó tempão pra conseguir achar. Na aba <strong>Sources</strong>, nós temos a guia <strong>Event Listener Breakpoints</strong> que pode nos ajudar a encontrar isso de forma mais fácil:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/event-listener-breakpoints.png" alt="Source guia Event Listener Breakpoints"></p>
<p>Abrindo essa guia, podemos ver vários eventos que podemos debugar. No caso do clique, você pode selecionar “Mouse &gt; click”. Para exemplificar, vamos ver como podemos ver quando o DOM foi carregado. Abra a opção <strong>DOM Mutation</strong> e selecione <strong>DOMContentLoaded</strong>.</p>
<p>Recarregue a página.</p>
<p>Quando esse evento for executado, será mostrado qual (ou quais, se tiver mais de um) arquivo chama esse evento. Assim podemos ver exatamente, se estivermos usando alguma lib de terceiros, quem precisa esperar o DOM ser carregado, e o que essa lib carrega ao executar esse evento:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/dom-content-loaded.png" alt="DOM Content Loaded"></p>
<p>Essas são apenas algumas funcionalidades que você pode usar para debugar seu código Javascript. Experimente você mesmo as outras opções da aba <strong>Sources</strong> e veja o quanto isso te ajudará no dia a dia!</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/keep-calm-and-start-debugging.png" alt="Debugue!"></p>
<p>Antigamente a única forma que tínhamos de debugar um código Javascript no browser era usando <code>alert()</code>. Hoje os browsers mais modernos disponibilizam  algumas ferramentas para ajudar nosso desenvolvimento. Uma delas é a API <code>console</code>.</p>
<p>Mas apesar de todos os seus métodos, nem sempre é possível resolver um problema de forma prática somente usando <code>console</code>. </p>
<p><em>Quais são então nossas outras opções?</em> Vem comigo que eu te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="debugger" scheme="http://blog.da2k.com.br/tags/debugger/"/>
    
      <category term="devtools" scheme="http://blog.da2k.com.br/tags/devtools/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Estrutura básica de um tema]]></title>
    <link href="http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/"/>
    <id>http://blog.da2k.com.br/2015/01/09/wordpress-estrutura-basica-de-um-tema/</id>
    <published>2015-01-09T00:00:00.000Z</published>
    <updated>2015-01-12T08:23:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress.jpg" alt="WordPress"></p>
<p><strong>WordPress</strong> é uma marca registrada, por isso a necessidade de escrever corretamente: com o W e o P maiúsculos, ok? Mas isso não tem nada a ver com o assunto do post, onde iremos aprender a montar a estrutura básica de um tema para WordPress :P </p>
<p>Sabia que, para criar um tema, você não precisa de nada mais que 2 arquivos? Duvida? Vem que eu te mostro ;)</p>
<a id="more"></a>

<p>Criar temas para <strong>WordPress</strong> é um trabalho bem simples, desde que você conheça PHP, HTML, CSS e Javascript.</p>
<h2 id="Requisitos_mínimos">Requisitos mínimos</h2>
<p>Além do conhecimento citado acima, você precisa ter instalado no seu computador o PHP 5.2.4 ou superior, e o MySQL 5.0 (ou Maria DB) ou superior.</p>
<h2 id="Instalação">Instalação</h2>
<p>A instalação do WordPress é bastante simples. <a href="https://wordpress.org/latest.zip" target="_blank" rel="external">Baixe aqui a última versão</a>. Descompacte-o em algum diretório que seja acessível pelo seu servidor (Apache ou Nginx), e acesse via browser.</p>
<p>Seguindo todos os passos da tela corretamente, não terá problemas :)</p>
<p>Só algumas dicas para a hora da instalação:</p>
<ul>
<li>Não use o nome do usuário como <code>admin</code>;</li>
<li>Use uma senha forte;</li>
<li>Altere o prefixo das tabelas da sua base de dados para algo diferente de <code>wp_</code>.</li>
</ul>
<p>O WordPress é uma ferramenta muito conhecida e bastante utilizada, por isso não use configurações que seriam fáceis de descobrir. Nome de usuário <code>admin</code> é muito comum. Usando esse nome, para invadir seu site só precisa de uns ataques de força bruta na senha. O mesmo vale para sua base de dados: mantendo o prefixo padrão <code>wp_</code>, fica muito mais fácil de alguém tentar invadir.</p>
<h2 id="Criação_do_tema">Criação do tema</h2>
<p>Crie um diretório dentro de <code>wp-content/themes</code> com o nome do seu tema. Use a conveção de letras minúsculas e separação de palavras com um traço <code>-</code>.</p>
<p>Fazendo isso, crie a seguinte estrutura:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── index.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Isso mesmo, só dois arquivos! O WordPress não é que nem “certos CMSs” que você precisar criar milhões de arquivos e XMLs de configuração para criar um tema :P</p>
<p>Brincadeiras à parte, o WordPress tem uma convenção que facilita e muita na hora de criar um tema. </p>
<h2 id="style-css">style.css</h2>
<p>O WordPress pega do seu arquivo <code>style.css</code> alguns parâmetros para apresentar informações do seu tema no Painel.</p>
<p>Os parãmetros mínimos que você precisa adicionar no <code>style.css</code> são esses:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">Theme Name: Nome do seu tema</div><div class="line">Author: Seu nome</div><div class="line">Description: Descrição do tema</div><div class="line">Version: 1.0</div><div class="line">*/</div></pre></td></tr></table></figure>

<p>Com esses parâmetros passados como comentário no início do arquivo <code>style.css</code>, o WP já vai mostrar essas informações no Painel, quando você visualizar o tema.</p>
<p>Para ativar o seu tema, logue-se no painel, em <code>http://seusite.com.br/wp-admin</code>. Vá até o menu <code>Aparência &gt; Temas</code>, selecione o seu tema e ative-o. E pronto! Todos os posts que você fizer já irão utilizar o tema que estamos desenvolvendo :D</p>
<h2 id="index-php">index.php</h2>
<p>O código que o WordPress usa para mostrar os posts é bem simples. Coloque na <code>index.php</code> do seu tema:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"pt-br"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Meu tema WordPress<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">if</span>( have_posts() ) : <span class="keyword">while</span>( have_posts() ) : the_post(); <span class="preprocessor">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="title">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;?php the_permalink() ?&gt;"</span>&gt;</span></div><div class="line">      <span class="php"><span class="preprocessor">&lt;?php</span> the_title() <span class="preprocessor">?&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> the_content() <span class="preprocessor">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endwhile</span>; <span class="preprocessor">?&gt;</span></span> </div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">else</span> : <span class="preprocessor">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Não existem posts.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">endif</span> <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Na linha <code>9</code>, temos o que chamamos de <strong>Loop do WordPress</strong>. As funções do WordPress são muito semânticas, e dizem exatamente o que elas fazem: </p>
<p>Primeiro, verificamos se existem posts, com a função <code>have_posts()</code> (o WordPress chama de <code>posts</code>, ou postagens, todo tipo de conteúdo que é possível cadastrar através do painel);</p>
<p>Depois, fazemos um loop por todos os posts (<code>while( have_posts() )</code>) e, para cada post, é chamada a função <code>the_post()</code>. Essa função é responsável por trazer as informações de cada post específico que está relacionado no loop.</p>
<p>Dependendo da URL em que você se encontra, o WordPress sabe exatamente onde deve buscar os posts corretos, por isso o Loop é padrão para todos os arquivos de template.</p>
<p>O WordPress também tem alguns <em>fallbacks</em> para os arquivos do tema. Por exemplo: se no seu tema você tiver um arquivo chamado <code>single.php</code>, com esse mesmo conteúdo, quando você acessar a URL de um post, o WordPress vai procurar pelo arquivo arquivo <code>single.php</code> no seu tema para usar. Se o arquivo não estiver presente, ele usará como fallback o <code>index.php</code>. O <code>index.php</code> é fallback para qualquer arquivo de template do seu tema. Falaremos sobre os arquivos de template em posts futuros.</p>
<p>As outras funções, usadas dentro do Loop, são chamadas de <strong>Template Tags</strong>. Essas funções trazem informações do post. Por exemplo: <code>the_permalink()</code> traz o link do post. <code>the_title()</code> traz o título. <code>the_content()</code> traz o conteúdo. Percebe como os nomes são bastante semânticos? Para ver a lista das Template Tags disponíveis que você pode usar, acesse <a href="http://codex.wordpress.org/Template_Tags#Tags" target="_blank" rel="external">esse link</a>.</p>
<p>Com esse código, você tem a estrutura básica para mostrar praticamente qualquer tipo de conteúdo que cadastrar no seu painel do WordPress.</p>
<p>Obviamente que você não vai deixar seu tema assim, pois tem muuuuita coisa que precisa tratar: </p>
<ul>
<li>categorias;</li>
<li>tags;</li>
<li>datas; </li>
<li>se for um post aberto (single) não precisa do link no título;</li>
<li>página de erro 404;</li>
<li>separar páginas institucionais dos posts de blog;</li>
<li>etc.</li>
</ul>
<p>Mas é só pra mostrar que, ainda assim, você pode começar a aprender WP e fazer um tema somente utilizando dois arquivos :)</p>
<p>Esse artigo é o primeiro de uma série que vou mostrar como criar temas completos, passando desde as funções do WordPress, hooks, até organização e separação de arquivos, boas práticas de desenvolvimento, orientação à objetos com PHP, para separar a lógica da view, entre outras coisinhas mais xD</p>
<p>Ficou curioso? <a href="http://blog.da2k.com.br/atom.xml" target="_blank" rel="external">Assine o RSS</a> e não perca nenhum post! Acompanhe diariamente :D</p>
<p>Ficou alguma dúvida sobre esse post? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress.jpg" alt="WordPress"></p>
<p><strong>WordPress</strong> é uma marca registrada, por isso a necessidade de escrever corretamente: com o W e o P maiúsculos, ok? Mas isso não tem nada a ver com o assunto do post, onde iremos aprender a montar a estrutura básica de um tema para WordPress :P </p>
<p>Sabia que, para criar um tema, você não precisa de nada mais que 2 arquivos? Duvida? Vem que eu te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="tema wordpress" scheme="http://blog.da2k.com.br/tags/tema-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Medindo o tempo de suas instruções]]></title>
    <link href="http://blog.da2k.com.br/2015/01/08/javascript-medindo-o-tempo-de-suas-instrucoes/"/>
    <id>http://blog.da2k.com.br/2015/01/08/javascript-medindo-o-tempo-de-suas-instrucoes/</id>
    <published>2015-01-08T00:00:00.000Z</published>
    <updated>2015-01-08T01:17:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/timer.jpg" alt=""></p>
<p>Quanto tempo demora aquela instrução que você escreveu em JS? Isso, aquele <code>for</code> que itera um array com 350.452 elementos.. você sabe como medir esse tempo? Vem que eu te mostro ;)</p>
<a id="more"></a>

<h2 id="Console">Console</h2>
<p>Todos os navegadores modernos, hoje em dia, tem um <code>console</code> à sua disposição, que você já deve conhecer. Inclusive o <a href="https://github.com/vitorbritto" target="_blank" rel="external">Vitor Britto</a> escreveu um <a href="http://www.vitorbritto.com.br/blog/examinando-sua-aplicacao/" target="_blank" rel="external">ótimo post</a> sobre isso, mostrando os métodos disponíveis no objeto <code>console</code>.</p>
<p>Mas hoje eu queria focar em dois desses métodos, que servirão para medir o tempo que uma instrução demora para executar: o <code>time()</code> e o <code>timeEnd()</code>.</p>
<h2 id="Como_usar">Como usar</h2>
<p>O uso deles não tem segredo algum. Coloque o <code>console.time()</code>, antes da sua instrução, e o <code>console.timeEnd()</code> no final da instrução. Passe como parâmetro uma <em>String</em>, que será a referência utilizada para identificar a instrução. Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.time( <span class="string">'How long does it take to run my "for"?'</span> );</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">350452</span>; i++ ) {</div><div class="line">  i;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.timeEnd( <span class="string">'How long does it take to run my "for"?'</span> );</div></pre></td></tr></table></figure>

<p>Cole o código acima no seu console. A resposta que eu tive foi:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">How long does it take to run my <span class="string">"for"</span>?: <span class="number">257.039</span>ms</div></pre></td></tr></table></figure>

<p>Ou seja, com esses dois métodos simples, eu consigo medir o tempo que a minha instrução está levando para executar, e fica muito fácil tomar ações para otimizar esse código.</p>
<p>Curtiu a dica? Já conhecia? </p>
<p>Nos próximos posts, falaremos um pouco mais sobre performance, e também como otimizar isso, para fazer nossa aplicação voar baixo! Fique ligado!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/timer.jpg" alt=""></p>
<p>Quanto tempo demora aquela instrução que você escreveu em JS? Isso, aquele <code>for</code> que itera um array com 350.452 elementos.. você sabe como medir esse tempo? Vem que eu te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="performance" scheme="http://blog.da2k.com.br/tags/performance/"/>
    
      <category term="debug" scheme="http://blog.da2k.com.br/tags/debug/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code Coverage em Javascript]]></title>
    <link href="http://blog.da2k.com.br/2015/01/07/code-coverage-em-javascript/"/>
    <id>http://blog.da2k.com.br/2015/01/07/code-coverage-em-javascript/</id>
    <published>2015-01-07T00:00:00.000Z</published>
    <updated>2015-01-07T00:10:11.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/istanbul.jpg" alt="Istanbul"></p>
<p>Já conversamos um pouco sobre TDD/BDD e montamos nosso ambiente para começar a brincar com testes. Que tal agora verificarmos como anda nossa cobertura de código? Let’s go!</p>
<a id="more"></a>

<h2 id="Code_Coverage">Code Coverage</h2>
<p>Ferramentas de <em>Code Coverage</em> testam quantos porcento do nosso código está coberto por testes. Se você acompanhou o <a href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/" target="_blank" rel="external">post anterior sobre testes</a>, você já deve ter o <a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="external">Istanbul</a> instalado. Se não tiver, dá uma lida lá no post e prepare seu ambiente :D</p>
<h2 id="Começando">Começando</h2>
<p>Para facilitar, vamos começar usando o mesmo módulo do <a href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/" target="_blank" rel="external">post anterior</a>, o <code>sum.js</code>, e ver quanto o nosso módulo está coberto por testes. Na raiz do seu projeto, execute o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">istanbul cover _mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>Que vai executar o Istanbul, fazendo coverage, e dizendo a ele que estamos usando a interface do Mocha para escrever nossos testes.</p>
<p>E esse será o resultado gerado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ istanbul cover _mocha tests/sumTest.js</div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    ✓ sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span> </div><div class="line">    ✓ sum of <span class="number">10</span> + <span class="number">10</span> should <span class="keyword">return</span> <span class="number">20</span> </div><div class="line">    </div><div class="line">    </div><div class="line">  <span class="number">2</span> passing (<span class="number">11</span>ms)</div><div class="line">  </div><div class="line">=============================================================================</div><div class="line">Writing coverage object [/var/www/tdd/coverage/coverage.json]</div><div class="line">Writing coverage reports at [/var/www/tdd/coverage]</div><div class="line">=============================================================================</div><div class="line"></div><div class="line">=============================== Coverage summary ===============================</div><div class="line">Statements   : <span class="number">100</span>% ( <span class="number">2</span>/<span class="number">2</span> )</div><div class="line">Branches     : <span class="number">100</span>% ( <span class="number">0</span>/<span class="number">0</span> )</div><div class="line">Functions    : <span class="number">100</span>% ( <span class="number">1</span>/<span class="number">1</span> )</div><div class="line">Lines        : <span class="number">100</span>% ( <span class="number">2</span>/<span class="number">2</span> )</div><div class="line">================================================================================</div></pre></td></tr></table></figure>

<p>Nesse resultado, no terminal, ele mostra o resumo de tudo o que os nossos testem cobrem do nosso módulo. Perceba que ele criou um diretório <strong>coverage/</strong> dentro do nosso projeto. Se você acessar via browser a URL do seu projeto + <code>/coverage/lcov-report/</code>, vai conseguir navegar pelos arquivos e visualizar quais partes estão ou não cobertas por testes.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/coverage-sumjs.jpg" alt="Coverage do arquivo sum.js"></p>
<p>Nesse nosso exemplo, todo o nosso código está coberto por testes! Se continuarmos escrevendo TDD corretamente, escrevendo sempre um teste que quebre, um <em>baby step</em> para passar, e fazendo o refactor, nós iremos escrever sempre o mínimo possível de código, e todo ele estará coberto pelos testes.</p>
<p><strong>IMPORTANTE:</strong><br>É importante salientar que um código com 100% de cobertura não garante que todas as possibilidades foram testadas, mas que, tudo o que está sendo testado está passando por todo o código. Mas, como vimos no módulo <code>sum.js</code>, ainda podemos fazer mais uns testes em áreas que já estão cobertas por outros testes.</p>
<p>Só por questões de visualização, vamos adicionar um pouco mais de código no nosso módulo para ver a cobertura cair (NÃO FAÇA ISSO EM CASA!). No arquivo <code>sum.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  <span class="keyword">if</span>( <span class="built_in">isNaN</span>( number1 ) || <span class="built_in">isNaN</span>( number2 ) ) {</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> number1 + number2;</div><div class="line">};</div></pre></td></tr></table></figure>

<p>E execute novamente o comando para verificarmos a cobertura:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">istanbul cover _mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>Olhando no navegador, podemos ver que a cobertura já diminuiu:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/coverage-sumjs2.jpg" alt="Coverage diminuiu"></p>
<p>O <code>I</code> quer dizer que aquele <code>IF</code> não está coberto. Se fosse um <code>E</code>, faltava cobertura para o <code>ELSE</code>. E a linha vermelha é o <em>Statement</em> que não está coberto pelos testes.</p>
<p>Para cobrir essa parte do nosso código por testes, nós precisamos fazer a seguinte pergunta a nós mesmos:</p>
<p><em>- Essa parte não coberta por testes: eu realmente preciso dela no meu código?</em></p>
<p>Se a sua resposta for <em>SIM</em>, então você precisa escrever um teste para cobrí-la. Senão, remova do seu código. Simples assim.</p>
<p>No nosso caso, vamos precisar, pois precisamos saber se o a nossa função realmente recebeu um número. Senão, iremos retornar <code>undefined</code>. Vamos então fazer nosso teste. No arquivo <code>tests/sumTest.js</code>, adicione mais um teste:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'If any parameter is not number, should return undefined'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  should( sum( <span class="number">1</span>, <span class="string">'arroz'</span> ) ).not.be.ok;</div><div class="line">});</div></pre></td></tr></table></figure>

<p><em>Perae, porque você mudou o formato do uso do ShouldJS?</em></p>
<p>Você está retornando <code>undefined</code> quando passar um valor que não seja número por parâmetro na função <code>sum()</code>, certo? Sabemos que <code>undefined</code> e <code>null</code> não têm propriedades. Logo, sempre que você precisar testar se um valor é <code>undefined</code> ou <code>null</code>, você precisa usar o <code>should</code> como função, ok? ;)</p>
<p>Voltando: se o usuário passar um parâmetro que não seja número, devemos retornar <code>undefined</code>. Na nossa asserção, o <code>not.be.ok</code> quer dizer exatamente isso: algo que não esteja <em>ok</em>, ou que seja diferente de <code>true</code>. Em JS, os valores para isso são: <code>&#39;&#39;, null, undefined, 0, NaN</code>. Para ver todas as asserções do ShouldJS, acesse <a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">esse link</a>.</p>
<p>Vamos agora executar o Istanbul e ver como o nosso teste se comporta e o quanto ele cobre do nosso código:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">istanbul cover _mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>E pronto! Agora nosso código está com 100% de cobertura novamente :D</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/coverage-sumjs3.jpg" alt="Novamente 100% coberto"></p>
<h2 id="Extras">Extras</h2>
<p>Para facilitar a execução dos testes, podemos usar o próprio NPM, fazendo algumas malandragens.</p>
<p>Primeiro crie um <code>package.json</code> com o comando <code>npm init</code>. Confirme os dados e edite o arquivo.</p>
<p>Na diretiva <code>scripts</code>, adicione:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": {</div><div class="line">  "test": "mocha -w tests/**/*.js",</div><div class="line">  "coverage": "istanbul cover _mocha tests/**/*.js"</div><div class="line">},</div></pre></td></tr></table></figure>

<p>Então você pode executar os seus testes com o comando <code>npm test</code>. O <code>-w</code> ali significa que o Mocha irá assistir a cada alteração que fizermos no nosso arquivo de teste, e já executará o teste automaticamente.</p>
<p>Para fazer o Coverage, execute <code>npm run coverage</code>, e pronto!</p>
<p>Espero que tenha ficado claro! Dúvidas, poste nos comentários :)</p>
<p>Ah, e não esqueça de se <a href="http://blog.da2k.com.br/atom.xml" target="_blank" rel="external">inscrever no RSS</a> :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/istanbul.jpg" alt="Istanbul"></p>
<p>Já conversamos um pouco sobre TDD/BDD e montamos nosso ambiente para começar a brincar com testes. Que tal agora verificarmos como anda nossa cobertura de código? Let’s go!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="coverage" scheme="http://blog.da2k.com.br/tags/coverage/"/>
    
      <category term="istanbul" scheme="http://blog.da2k.com.br/tags/istanbul/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pensando TDD com Javascript]]></title>
    <link href="http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/"/>
    <id>http://blog.da2k.com.br/2015/01/06/pensando-tdd-com-javascript/</id>
    <published>2015-01-06T00:00:00.000Z</published>
    <updated>2015-01-06T07:49:26.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/tdd-red-refactor-green.jpg" alt="TDD"></p>
<p><strong>TDD</strong> é uma técnica de desenvolvimento. Provavelmente você já leu muitos artigos falando sobre TDD. Talvez você até já experimentou alguma ferramenta de TDD ao desenvolver seus códigos. Mas você continua usando? Você sabe o valor de desenvolver um código testável?</p>
<a id="more"></a>

<p>Assisti muitas palestras sobre TDD, vi vários slides, li artigos e iniciei meus estudos, tentando colocar em prática tudo o que tinha visto. </p>
<p><em>“- Por que iniciar com baby steps?”</em><br><em>“- Por onde eu devo começar?”</em><br><em>“- Devo fazer testes nos meus arquivos já existentes?”</em>,<br><em>“- O que eu devo escrever primeiro?”</em>,<br><em>“- O que realmente eu preciso testar?”</em> </p>
<p>Eram perguntas que sempre vinham a minha mente quando eu começava.</p>
<p>O nome do negócio é auto-explicativo: <strong>TDD - Test Drive Development</strong>, ou “<strong>Desenvolvimento Guiado por Testes</strong>“. Se o desenvolvimento deve ser guiado por testes, significa que eu preciso começar a escrever testes que irão guiar meu desenvolvimento, correto? Correto! Mas como fazer isso? Não é tão simples para começar.</p>
<p>Nas palestras que eu assistia, sempre mostravam as mesmas coisas:</p>
<ul>
<li>Escreva um teste</li>
<li>Desenvolva em cima do teste algo com baby steps</li>
<li>Faça o teste passar</li>
<li>Refatore o código</li>
<li>Escreva outro teste</li>
<li>Continue nessa sequência</li>
</ul>
<p>Eu começava a escrever meus testes e, chegava uma hora que eu já estava todo perdido, pois tinha feito um teste onde eu precisaria escrever uma lógica muito grande de código, e acabava deixando tudo de lado novamente.</p>
<p>Os princípios que eu ouvia estavam corretos, mas eu não conseguia começar sem ver um exemplo real.</p>
<p>Foi então que em Janeiro do ano passado (2014), eu assisti uma palestra do <a href="https://twitter.com/caiofbpa" target="_blank" rel="external">Caio Andrade</a> sobre <strong>Artesanato de Software</strong>, onde ele falava de TDD e Código Limpo( o cara manja muito, sigam ele ae xD).</p>
<p>Trocando algumas ideias com ele, percebi que, o que faltava pra eu entender de vez o porquê de escrever testes, é que eu precisava <strong>pensar TDD</strong> e aprender a escrever código limpo de verdade.</p>
<h2 id="Clean_Code">Clean Code</h2>
<p>Na palestra do Caio, ele recomenda o livro <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="external"><strong>Clean Code</strong></a>, que apesar de ser baseado em Java, os conceitos são possíveis de se aplicar em qualquer linguagem, inclusive Javascript. </p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/clean-code-book.jpg" alt="Livro Clean Code"></p>
<p>Recomendo fortemente a leitura do livro, que tem inclusive <a href="http://www.saraiva.com.br/codigo-limpo-habilidades-praticas-do-agile-software-edicao-revisada-2666082.html" target="_blank" rel="external">versão em pt-BR</a>, se você preferir :D</p>
<p>Vou procurar falar bastante de <em>Clean Code</em> nos meus artigos, citando algumas dicas enquanto estiver mostrando códigos. Mas sério, leia o livro. Você não vai se arrepender, e vai te ajudar muito a pensar de forma diferente enquanto estiver programando :)</p>
<h2 id="Como_começar">Como começar</h2>
<p>Se você está começando agora com TDD, você precisa experimentar bastante, mas fora do seu ambiente de trabalho! Pratique muito as dicas passadas aqui até que fique clara a sua implementação. Se tiver dúvidas, poste nos comentários e vamos crescendo juntos! Também estou a pouco tempo escrevendo testes, mas quanto mais praticamos, mais aprendemos!</p>
<p>Inicialmente, vou mostrar como fazer testes usando Javascript do lado do servidor, com NodeJS. Mas em posts futuros, iremos ver também como implementar no <em>client side</em>, quando criarmos nossos próprios componentes, colocando em prática o que aprendemos nos <a href="http://blog.da2k.com.br/2015/01/05/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-3-3/" target="_blank" rel="external">posts sobre módulos</a>!</p>
<h2 id="Preparando_o_ambiente">Preparando o ambiente</h2>
<p>Vamos começar pela instalação das ferramentas necessárias para iniciarmos nossos testes. Iremos precisar de:</p>
<ul>
<li>NodeJS (óbvio);</li>
<li><a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a> - Para rodar os testes. Deve ser instalado globalmente;</li>
<li><a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="external">Istanbul</a> - Para Code Coverage. Também iremos instalar globalmente;</li>
<li><a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">ShouldJS</a> - Para fazer as asserções. Esse módulo será instalado localmente.</li>
</ul>
<h2 id="Mocha">Mocha</h2>
<p>O Mocha é a ferramenta que vamos utilizar para executar nossos testes, e que vai disponibilizar a interface que necessitamos para padronizar a escrita dos testes. Por questões de legibilidade, iremos utilizar o formato <strong>BDD</strong>.</p>
<p>BDD significa <em>Behavior Driven Development</em>, ou <em>Desenvolvimento Guiado por Comportamento</em>. Ele nada mais é do que uma forma mais “legível” (digamos assim), de escrever nossos testes.</p>
<p>Só pra você entender melhor: em uma interface com TDD (usando <a href="http://nodejs.org/api/assert.html" target="_blank" rel="external">assert</a>, você escreveria seu código mais ou menos assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>( <span class="string">'assert'</span> );</div><div class="line">assert.equal( ( <span class="number">1</span> + <span class="number">2</span> ), <span class="number">3</span>, <span class="string">'1 + 2 should be equal 3'</span> );</div></pre></td></tr></table></figure>

<p>O módulo <code>assert</code> faz parte do core do NodeJS, e ele usa TDD. Seu método <code>equal()</code> recebe 3 parâmetros: o valor atual (que você quer testar), o valor esperado e uma mensagem que será mostrada no seu terminal quando esse teste rodar.</p>
<p>Os parâmetros não ficam implícitos ao olhar esse código pela primeira vez, e sem conhecer o módulo assert. Você sabe que ali tem 3 parâmetros, mas não sabe o que exatamente eles são até que você olhe a documentação.</p>
<p>Agora, olhe como ficaria o mesmo código usando BDD, com o módulo <a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">should</a>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>( <span class="string">'should'</span> );</div><div class="line">( <span class="number">1</span> + <span class="number">2</span> ).should.be.equal( <span class="number">3</span> );</div></pre></td></tr></table></figure>

<p>Precisa dizer algo? O <code>should</code> extende os objetos nativos do JS, adicionando uma propriedade <code>should</code>.<br>Essa propriedade é um objeto com outras propriedades e métodos que dizem exatamente o que é esperado do teste. Traduzindo o código acima, você pode ler:</p>
<blockquote>
<p>1 + 2 deveria ser igual a 3.</p>
</blockquote>
<p>Você também pode usar a variável <code>should</code>, que definimos ao usar <code>require( &#39;should&#39; )</code>, dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>( <span class="string">'should'</span> );</div><div class="line">should( <span class="number">1</span> + <span class="number">2</span> ).be.equal( <span class="number">3</span> );</div></pre></td></tr></table></figure>

<p>Que você terá o mesmo resultado. E a leitura é bastante semãntica.</p>
<p>Esse é o motivo de escolhermos BDD :)</p>
<p>Se quiser, depois você pode visitar o site do Mocha e ver quais são as outras interfaces que ele disponibiliza, e exemplos de cada uma delas, ok? Vamos em frente!</p>
<p><em>Perae, perae.. e o que é esse tal Istanbul?</em></p>
<p>Não comentei sobre ele porque ainda não tinha chegado a hora. Mas já que você perguntou, vamos lá: </p>
<h2 id="Code_Coverage">Code Coverage</h2>
<p>O <strong>Istanbul</strong> vai nos ajudar a fazer a cobertura do nosso código. Quando você começa a escrever testes, como você vai saber se esses testes estão cobrindo todos os <code>if&#39;s</code>, <code>switch&#39;s</code>, <code>function&#39;s</code>, etc, do seu código? O <strong>Istanbul</strong> nos ajuda com isso. Ele mostra a porcentagem de quanto o seu código está coberto por testes, e o que ainda não está testado. Vai ficar mais fácil entender quando começarmos a mexer com ele :)</p>
<h2 id="Continuando…">Continuando…</h2>
<p>Após instalar o NodeJS (se já não o tiver instalado), instale o Mocha e o Istanbul globalmente:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g mocha istanbul</div></pre></td></tr></table></figure>

<p>Agora precisamos de um projeto para ver na prática como fazer nossos testes.</p>
<h2 id="Iniciando_nosso_projeto">Iniciando nosso projeto</h2>
<p>Vamos criar um módulo de soma. Uma função que recebe dois números e retorna a soma desses dois números. Exemplo bem besta, para você ver do início como deve testar um código. Crie a seguinte estrutura para nosso projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app.js</div><div class="line">├── sum.js</div><div class="line">└── /tests</div><div class="line">    └── sumTest.js</div></pre></td></tr></table></figure>

<p>O arquivo <code>app.js</code> executará nossa aplicação. O <code>sum.js</code> será nosso módulo responsável por fazer a soma.<br>E no diretório <code>tests</code>, iremos centralizar nossos testes.</p>
<p>Ainda não temos nenhum código escrito. A ideia de usar TDD (ou BDD), é fazer com que todo o nosso desenvolvimento seja <strong>guiado</strong> por testes. Então, antes de escrever qualquer código, precisamos dizer o que esperamos que o nosso código faça. </p>
<p>Parece insano não? Mas pense como se você estivesse criando uma documentação. Você vai escrever a <strong>interface</strong> do seu projeto, aquilo que você espera que seja público, mostrando como usá-lo. A diferença é que, com TDD, nós vamos garantir que essa interface realmente funciona como deveria.</p>
<p>No final, você vai ver que os seus testes são exatamente isso: a documentação do seu projeto :)</p>
<p>Mas antes de tudo, vamos instalar o <code>should</code>, pois sabemos que vamos precisar dele, como vimos no exemplo lá no começo do artigo:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i should</div></pre></td></tr></table></figure>

<p>Então vamos começar pelo nosso arquivo <code>test/sumTest.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>( <span class="string">'should'</span> );</div><div class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>( <span class="string">'../sum'</span> );</div><div class="line"></div><div class="line">describe( <span class="string">'sum.js'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  it( <span class="string">'sum of 2 + 3 should return 5'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    sum( <span class="number">2</span>, <span class="number">3</span> ).should.be.equal( <span class="number">5</span> );</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>As funções <code>describe()</code> e <code>it()</code> fazem parte da interface do Mocha. O <code>describe()</code> cria um escopo de testes. No nosso caso, vamos usá-lo para testar todo o nosso módulo <code>sum.js</code>. O primeiro parâmetro que ele recebe é uma descrição para esse escopo. Vou deixar somente o nome do módulo, para simplificar. </p>
<p>O segundo parâmetro é a função que será executada quando rodarmos esse escopo.</p>
<p>A função <code>it()</code> é o que vamos usar como <em>wrapper</em> para o nosso teste. No primeiro parâmetro, você coloca a descrição do que você vai testar. O segundo parâmetro é a função que executará quando esse teste rodar.</p>
<p>Devemos usar somente um <code>it()</code> por teste. E cada teste deve testar apenas uma coisa por vez. Da mesma forma que, no seu código, cada método ou função vai ter apenas uma responsabilidade, seguindo o <strong>SRP (Single Responsibility Principle)</strong>, devemos seguir o mesmo princípio para os testes: um <code>it()</code> por teste.</p>
<p>E dentro do <code>it()</code>, fazemos a asserção. O que nós queremos é que, ao passar dois números como parâmetro para nosso módulo, ele retorne a soma desses dois números.</p>
<p>Agora vamos executar nosso teste e ver o que vai acontecer:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>O resultado que você vai obter deve ser parecido com isso:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ mocha tests/sumTest.js </div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    <span class="number">1</span>) sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span></div><div class="line">    </div><div class="line">    </div><div class="line">  <span class="number">0</span> passing (<span class="number">11</span>ms)</div><div class="line">  <span class="number">1</span> failing</div><div class="line">  </div><div class="line">  <span class="number">1</span>) sum.js sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span>:</div><div class="line">     TypeError: object is not a function</div><div class="line">      at Context.&lt;anonymous&gt; (/var/www/tdd/tests/sumTest.js:<span class="number">6</span>:<span class="number">5</span>)</div><div class="line">      at callFn (/usr/lib/node_modules/mocha/lib/runnable.js:<span class="number">251</span>:<span class="number">21</span>)</div><div class="line">      at Test.Runnable.run (/usr/lib/node_modules/mocha/lib/runnable.js:<span class="number">244</span>:<span class="number">7</span>)</div><div class="line">      at Runner.runTest (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">374</span>:<span class="number">10</span>)</div><div class="line">      at /usr/lib/node_modules/mocha/lib/runner.js:<span class="number">452</span>:<span class="number">12</span></div><div class="line">      at next (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">299</span>:<span class="number">14</span>)</div><div class="line">      at /usr/lib/node_modules/mocha/lib/runner.js:<span class="number">309</span>:<span class="number">7</span></div><div class="line">      at next (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">248</span>:<span class="number">23</span>)</div><div class="line">      at Object._onImmediate (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">276</span>:<span class="number">5</span>)</div><div class="line">      at processImmediate [as _immediateCallback] (timers.js:<span class="number">345</span>:<span class="number">15</span>)</div></pre></td></tr></table></figure>

<p>Na linha <code>1</code> mostra o comando de execução do teste.<br>Na linha <code>4</code>, mostra o texto que passamos para o <code>describe()</code>.<br>Na linha <code>5</code> mostra o texto que passamos para o <code>it()</code>, descrevendo o teste.<br>Na linha <code>8</code> e <code>9</code>, mostra quantos dos nossos passaram, e quantos falharam, e o tempo que demoraram para executar.<br>Na linha <code>11</code> ele mostra a descrição do teste que falhou.<br>Na linha <code>12</code> vai mostrar o motivo da falha: <code>TypeError: object is not a function</code>.</p>
<p>Você sabe por que deu erro? Porque ainda não temos a função o nosso módulo <code>sum</code>. Mas no nosso teste, nós fizemos o <code>require</code> dele na variável <code>sum</code>. E dentro do nosso teste, esperávamos que ele fosse uma função, recebendo dois números e retornando a soma dos mesmos.</p>
<p>Acabamos de concluir com sucesso a primeira parte dos testes: o <span style="color: red"><strong>RED</strong></span>. Lembra dos passos completos de um teste, que você vê em todo lugar? Se não sabe, os passos são esses:</p>
<ul>
<li><span style="color: red"><strong>RED</strong></span> - Fazer um teste para quebrar;</li>
<li><span style="color: green"><strong>GREEN</strong></span> - Escrever um código, usando baby steps, para que o teste passe;</li>
<li><strong>REFACTOR</strong> - Com o teste passado, refatorar o código, se necessário, para que funcione de maneira aceitável.</li>
</ul>
<p>Agora vamos para o segundo passo: fazer nosso código funcionar, com o mínimo de código possível.</p>
<p>No arquivo <code>sum.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><em>Por que você retornou <code>5</code> direto?</em></p>
<p>Isso são <em>baby steps</em>. Você não vai fazer toda a implementação do seu código agora, mas somente o MÍNIMO NECESSÁRIO para que o teste passe. Qual o resultado que o nosso teste precisa para passar? Não é <code>5</code>? Então iremos retornar <code>5</code>. Logo você vai entender melhor.</p>
<p>Vamos rodar o teste novamente:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>E o resultado:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ mocha tests/sumTest.js </div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    ✓ sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span> </div><div class="line">    </div><div class="line">  </div><div class="line">  <span class="number">1</span> passing (<span class="number">10</span>ms)</div></pre></td></tr></table></figure>

<p>Nosso teste passou! Aeeee!! Já temos o <span style="color: green"><strong>GREEN</strong></span>. </p>
<p><em>O que precisamos fazer agora?</em></p>
<p>Passamos nesse primeiro teste pelo <span style="color: red"><strong>RED</strong></span> e pelo <span style="color: green"><strong>GREEN</strong></span>. Agora temos que verificar se o nosso código está sujo, se tem algo que poderia melhorar nele para que seja mais legível. Essa é a etapa do <strong>REFACTOR</strong>. </p>
<p>O que pode ser melhorado nesse código? A resposta é: <strong>NADA</strong>!</p>
<p><em>Mas como <strong>NADA</strong>? Você tá louco? Vai deixar um número fixo no código? Tá maluco? Não era pra somar? Vou sair daqui, não quero ler mais!</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/senta-aqui-jovem.jpg" alt="Que rebeldia é essa jovem? Senta aqui, vamos conversar."></p>
<p>Calma jovem. Você vai entender isso agora. Os testes servem para testar todas as possibilidades de entrada de dado que podem chegar ao nosso código. Então ainda não acabou. Vamos testar mais uma possibilidade. </p>
<p>Voltando ao <code>tests/sumTest.js</code>, adicione logo após o primeiro <code>it()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">it( <span class="string">'sum of 10 + 10 should return 20'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  sum( <span class="number">10</span>, <span class="number">10</span> ).should.be.equal( <span class="number">20</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Vamos rodar nosso teste novamente:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>E temos como resultado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ mocha tests/sumTest.js </div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    ✓ sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span> </div><div class="line">    <span class="number">1</span>) sum of <span class="number">10</span> + <span class="number">10</span> should <span class="keyword">return</span> <span class="number">20</span></div><div class="line">    </div><div class="line">    </div><div class="line">  <span class="number">1</span> passing (<span class="number">14</span>ms)</div><div class="line">  <span class="number">1</span> failing</div><div class="line">  </div><div class="line">  <span class="number">1</span>) sum.js sum of <span class="number">10</span> + <span class="number">10</span> should <span class="keyword">return</span> <span class="number">20</span>:</div><div class="line">      </div><div class="line">      AssertionError: expected <span class="number">5</span> to be <span class="number">20</span></div><div class="line">      + expected - actual</div><div class="line">      </div><div class="line">      +<span class="number">20</span></div><div class="line">      -<span class="number">5</span></div><div class="line">      </div><div class="line">      at Assertion.fail (/var/www/tdd/node_modules/should/lib/assertion.js:<span class="number">113</span>:<span class="number">17</span>)</div><div class="line">      at Assertion.prop.(anonymous function) (/var/www/tdd/node_modules/should/lib/assertion.js:<span class="number">39</span>:<span class="number">14</span>)</div><div class="line">      at Context.&lt;anonymous&gt; (/var/www/tdd/tests/sumTest.js:<span class="number">10</span>:<span class="number">29</span>)</div><div class="line">      at callFn (/usr/lib/node_modules/mocha/lib/runnable.js:<span class="number">251</span>:<span class="number">21</span>)</div><div class="line">      at Test.Runnable.run (/usr/lib/node_modules/mocha/lib/runnable.js:<span class="number">244</span>:<span class="number">7</span>)</div><div class="line">      at Runner.runTest (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">374</span>:<span class="number">10</span>)</div><div class="line">      at /usr/lib/node_modules/mocha/lib/runner.js:<span class="number">452</span>:<span class="number">12</span></div><div class="line">      at next (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">299</span>:<span class="number">14</span>)</div><div class="line">      at /usr/lib/node_modules/mocha/lib/runner.js:<span class="number">309</span>:<span class="number">7</span></div><div class="line">      at next (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">248</span>:<span class="number">23</span>)</div><div class="line">      at Object._onImmediate (/usr/lib/node_modules/mocha/lib/runner.js:<span class="number">276</span>:<span class="number">5</span>)</div><div class="line">      at processImmediate [as _immediateCallback] (timers.js:<span class="number">345</span>:<span class="number">15</span>)</div></pre></td></tr></table></figure>

<p>Na linha <code>5</code>, mostra que o nosso primeiro teste continua passando.<br>Na linha <code>6</code>, mostra que o nosso segundo teste quebrou.<br>A partir da linha <code>12</code>, mostra a descrição do teste que quebrou: <code>AssertionError: expected 5 to be 20</code>. Ou seja: houve um erro na asserção: era esperado que, o 5 que a função está retornando fosse igual a 20.</p>
<p>Na linha <code>15</code> mostra que, nas linhas abaixo, o que está com o sinal de <code>+</code> é o esperado <em>(expected)</em>, e o que está com o sinal de <code>-</code> é o valor atual <em>(actual)</em>, que foi retornado.</p>
<p>Voltamos ao ciclo, passando com sucesso pelo <span style="color: red"><strong>RED</strong></span>, criando uma nova possibilidade que quebra nosso código.</p>
<p>Tá conseguindo compreender agora o que estamos fazendo? Imagine os testes como aquele usuário que acessa seu site, fazendo aquelas ações que você sempre diz: <em>- Não, o usuário nunca vai fazer isso -</em> e é exatamente o que ele faz :P</p>
<p>Os testes vão garantir que, qualquer bizarrice que o seu código receber como entrada, vai ser tratado corretamente para devolver sempre o valor correto no final. Agora tá ficando legal né, fala a verdade :D</p>
<p>Então, vamos refatorar nosso código, para fazer com que o segundo teste passe. Lembrando que o primeiro teste não deve quebrar, pois já passamos por ele. Agora os dois testes precisam passar. Como vamos fazer isso?</p>
<p>Voltamos ao <code>sum.js</code> e mudamos o nosso <code>return</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> number1 + number2;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Então, executamos novamente nosso teste:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha tests/sumTest.js</div></pre></td></tr></table></figure>

<p>E temos o resultado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mocha tests/sumTest.js </div><div class="line">  </div><div class="line">  </div><div class="line">  sum.js</div><div class="line">    ✓ sum of <span class="number">2</span> + <span class="number">3</span> should <span class="keyword">return</span> <span class="number">5</span> </div><div class="line">    ✓ sum of <span class="number">10</span> + <span class="number">10</span> should <span class="keyword">return</span> <span class="number">20</span> </div><div class="line">    </div><div class="line">    </div><div class="line">  <span class="number">2</span> passing (<span class="number">14</span>ms)</div></pre></td></tr></table></figure>

<p>Uhuull!! Passamos mais um teste! o/</p>
<p>Agora, verificamos se podemos refatorar alguma coisa. Nos dois casos, não houve necessidade de refactor. O código está bem simples e legível. Fizemos somente uma função simples, que retorna dois números passados como parâmetro. Mas aí eu te pergunto: dá pra testar mais alguma coisa ainda nesse código?</p>
<p>Se você começar a pensar nas possibilidades, dá sim. Mas esse post já está grande demais. Como lição de casa, vou deixar para VOCÊ JOVEM, complementar isso e fazer mais alguns testes. Por exemplo: você pode testar se o usuário vai entrar algum valor diferente de número. Se entrar, você precisa ver o que é o mais correto retornar: dispara um erro? Retorna <code>undefined</code>? Você decide. O módulo é seu. Você só precisa testar as possibilidades para ver se ele retorna o que realmente você espera.</p>
<p>Quando você terminar de testar o seu módulo, e executar o <code>mocha</code> com todos os testes passados, vai perceber que tem a documentação completa do seu módulo, dizendo exatamente o que ele faz, o que ele espera e o que ele retorna :D</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Essa foi só uma introdução aos testes. Nem mostrei sobre <em>Code Coverage</em>, mas o farei em um próximo post. E esse vai ser breve, pois minha meta é fazer <a href="">1 post por dia</a> :D</p>
<p>Iremos falar muito sobre TDD/BDD e Clean Code também. Aguarde, nos próximos artigos :D</p>
<p>Não esqueça de assinar o <a href="http://blog.da2k.com.br/atom.xml" target="_blank" rel="external">RSS</a> para receber atualizações sempre que tiver um post novo :)</p>
<p>O <a href="http://willianjusten.com.br/" target="_blank" rel="external">Willian Justen</a> escreveu um <a href="http://willianjusten.com.br/um-post-por-dia/" target="_blank" rel="external">post citando o <strong>#1postperday</strong></a>, pois ele também está participando!</p>
<p>No post, ele dá dicas de algumas ferramentas que você pode usar para se manter atualizado! Siga o blog dele também, tem conteúdo muito bom vindo por ae :D</p>
<p>E então.. deu pra entender bem? Ficou alguma dúvida? Comenta ae, e até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/tdd-red-refactor-green.jpg" alt="TDD"></p>
<p><strong>TDD</strong> é uma técnica de desenvolvimento. Provavelmente você já leu muitos artigos falando sobre TDD. Talvez você até já experimentou alguma ferramenta de TDD ao desenvolver seus códigos. Mas você continua usando? Você sabe o valor de desenvolver um código testável?</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="tdd" scheme="http://blog.da2k.com.br/tags/tdd/"/>
    
      <category term="bdd" scheme="http://blog.da2k.com.br/tags/bdd/"/>
    
      <category term="code coverage" scheme="http://blog.da2k.com.br/tags/code-coverage/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
</feed>
