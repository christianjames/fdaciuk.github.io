<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Da2k Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.da2k.com.br/"/>
  <updated>2015-02-01T02:13:05.312Z</updated>
  <id>http://blog.da2k.com.br/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Segredos do Github - mantendo a ordem no seu repositório]]></title>
    <link href="http://blog.da2k.com.br/2015/02/01/segredos-do-github-mantendo-a-ordem-no-seu-repositorio/"/>
    <id>http://blog.da2k.com.br/2015/02/01/segredos-do-github-mantendo-a-ordem-no-seu-repositorio/</id>
    <published>2015-02-01T00:00:00.000Z</published>
    <updated>2015-01-31T14:10:00.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/2015/01/github-secrets-clean-repository.png" alt=""></p>
<p>Uma dica simples, mas funcional!</p>
<a id="more"></a>

<p>Quando vocẽ cria uma nova feature para um projeto open source, normalmente você cria uma branch nova, faz suas alterações, faz o <em>push</em> para o seu repositório nessa nova branch e então envia um <em>pull request</em>.</p>
<p>Quando o <em>pull request</em> é aceito, você faz o <a href="http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/" target="_blank" rel="external">processo para atualizar o seu repositório com o repositório forkado</a> e tudo fica 100% como deveria!</p>
<p>Mas, com o tempo, sua lista de branchs no <strong>Github</strong> vai aumentando, mas você não vai mais precisar delas, pois seu <em>pull request</em> já foi aceito. Como limpar a sujeira e deixar somente as branchs que você precisa?</p>
<h2 id="Removendo_branchs_do_Github">Removendo branchs do Github</h2>
<p>Para remover uma branch do <strong>Github</strong>, você pode usar o comando no seu terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin nome_da_branch --delete</div></pre></td></tr></table></figure>

<p>Isso irá deletar a branch do <strong>Github</strong>!</p>
<p>Você pode ainda fazer assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :nome_da_branch</div></pre></td></tr></table></figure>

<p>Com os dois pontos (<code>:</code>) na frente do nome da branch, o resultado é o mesmo :D</p>
<h2 id="Removendo_branchs_localmente">Removendo branchs localmente</h2>
<p>E para remover branchs localmente, o comando é:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -D nome_da_branch</div></pre></td></tr></table></figure>

<p>Dica rápida, mas ajuda a organizar a casa :D</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/2015/01/github-secrets-clean-repository.png" alt=""></p>
<p>Uma dica simples, mas funcional!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - incentivar a contribuição para seus projetos open source]]></title>
    <link href="http://blog.da2k.com.br/2015/01/31/segredos-do-github-incentivar-a-contribuicao-para-seus-projetos-open-source/"/>
    <id>http://blog.da2k.com.br/2015/01/31/segredos-do-github-incentivar-a-contribuicao-para-seus-projetos-open-source/</id>
    <published>2015-01-31T00:00:00.000Z</published>
    <updated>2015-01-31T13:32:26.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-contributing.png" alt=""></p>
<p>Contribuir para projetos open source é algo que nos faz crescer muito como profissionais. Temos a oportunidade de aprender coisas novas e praticar o que muitas vezes não utilizamos comumente no nosso dia-a-dia. Como o Github nos ajuda com isso?</p>
<a id="more"></a>

<p>Cada pessoa que cria um projeto open source tem sua forma de escrever seus códigos, organizar a estrutura de arquivos, etc. Se o projeto é interessante, outras pessoas acabam ficando interessadas em contribuir. Mas a frustração vem quando descobrimos que cada um escreve seu código de uma forma: alguns usam tabs, outros espaços; uns preferem 4 espaços, outros preferem 2; colocar espaço entre o <code>if</code> e os <code>()</code> ou não, escrever o<code>else</code> em uma nova linha, ou na mesma linha do fechamento do <code>}</code>, etc.</p>
<p>Nenhuma forma está errada! São apenas diferentes modos de escrever o mesmo código! Mas se um mesmo código tiver várias dessas formas misturadas, o projeto vai acabar virando uma zona!</p>
<p>Então, normalmente você coloca no <strong>README.md</strong> do seu repositório uma área de <strong>Como contribuir</strong>, citando os padrões que você utilizou no código, mostrando como criar uma nova feature, etc.</p>
<p>Mas no momento de empolgação, muitas vezes os devs nem chegam nessa parte do seu <strong>README</strong>, e acabam enviando <em>pull requests</em> com seus próprios padrões.</p>
<h2 id="O_arquivo_CONTRIBUTING-md">O arquivo CONTRIBUTING.md</h2>
<p>Uma feature bem simples do Github, mas que pode ajudar a organizar melhor a colaboração nos seus projetos, é você adicionar um arquivo chamado <code>CONTRIBUTING.md</code>.</p>
<p>Nesse arquivo você coloca tudo o que a pessoa que vai colaborar com o seu projeto precisa saber.</p>
<p><em>Mas se o dev nem chega a ler o <strong>README</strong>, como ele vai saber que tem um arquivo separado com as informações de como contribuir?</em></p>
<p>É aí que está o pulo do gato! Quando você cria esse arquivo, sempre que alguém for criar uma nova <em>issue</em> ou enviar um <em>pull request</em>, olha o que vai aparecer pra ele:</p>
<p><img src="https://camo.githubusercontent.com/b38f439e43db12ebcbf6f6f2b8afe88862d31e47/687474703a2f2f692e696d6775722e636f6d2f726e38334e58672e706e67" alt=""></p>
<p>O “<strong>guidelines for contributing</strong>“ que aparece na mensagem acima, é linkado diretamente com o seu arquivo <strong>CONTRIBUTING.md</strong>! Assim, sempre que alguém for colaborar, ele verá esse aviso, e ainda que não leia o <strong>README</strong>, verá que existem alguns padrões a serem seguidos para que ele possa contribuir! :D</p>
<p>Claro que pode acontecer do dev nem clicar pra ler, mas com certeza ele verá o aviso ;)</p>
<p>Já conhecia essa feature? Bacana, não? :D</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-contributing.png" alt=""></p>
<p>Contribuir para projetos open source é algo que nos faz crescer muito como profissionais. Temos a oportunidade de aprender coisas novas e praticar o que muitas vezes não utilizamos comumente no nosso dia-a-dia. Como o Github nos ajuda com isso?</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - como invocar funções]]></title>
    <link href="http://blog.da2k.com.br/2015/01/30/javascript-como-invocar-funcoes/"/>
    <id>http://blog.da2k.com.br/2015/01/30/javascript-como-invocar-funcoes/</id>
    <published>2015-01-30T00:00:00.000Z</published>
    <updated>2015-01-30T09:00:46.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/functions-invoke.jpg" alt=""></p>
<p>Funções são objetos de primeira classe em <strong>Javascript</strong>. É o que faz do <strong>Javascript</strong> a <em>coisa fofa</em> que ele é hoje. Por isso, é muito importante saber todas as formas das quais podemos invocar funções, e como isso afeta nossos programas. Já sabe? Não sabe? Não sabe se sabe? Vem ver então!</p>
<a id="more"></a>

<h2 id="Funções_como_objetos_de_primeira_classe">Funções como objetos de primeira classe</h2>
<p><strong>Objetos de primeira classe</strong> em Javascript, são os tipos de objetos que apresentam capacidades comuns dentro da linguagem, como:</p>
<ul>
<li>podem ser criados a partir de literais;</li>
<li>podem ser atribuídos a variáveis, arrays e propriedades de outros objetos;</li>
<li>podem ser passados como argumentos para funções;</li>
<li>podem ser retornados como valores de funções;</li>
<li>podem ter propriedades, sendo criadas e atribuídas dinamicamente.</li>
</ul>
<p>Por isso <strong>funções</strong> são <strong>objetos de primeira classe</strong>; pois, exatamente como qualquer outro tipo de objeto, elas têm as capacidades citadas acima.</p>
<h2 id="Estrutura_de_uma_função">Estrutura de uma função</h2>
<p>Uma função é formada por quatro partes:</p>
<ul>
<li>A palavra-chave <code>function</code>;</li>
<li>um nome (opcional);</li>
<li>os parênteses <code>()</code>, que podem receber - opcionalmente - parâmetros;</li>
<li>as chaves <code>{}</code>, onde ficará o corpo da função. O corpo também é opcional.</li>
</ul>
<p>Então, para que possa ser considerada uma função, ela precisa ao menos ter a seguinte estrutura:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div></pre></td></tr></table></figure>

<h2 id="Invocando_funções_como_função">Invocando funções como função</h2>
<p>Parece um termo meio estranho, mas é assim mesmo. Essa é a forma mais conhecida de invocar funções. Para invocar funções <em>como função</em>, nós utilizamos o operador <code>()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'Hi!'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( hello() ); <span class="comment">// Hi!</span></div></pre></td></tr></table></figure>

<p>Criamos uma função chamada <code>hello</code> e a invocamos com o operador <code>()</code>. Se não tivéssemos adicionado o operador <code>()</code>, a função seria retornada em seu formato literal. Experimente fazer isso, removendo os parênteses da chamada no <code>console.log()</code> :)</p>
<p><em>Mas você disse que o nome da função é opcional. Se eu não colocar o nome, como vou invocá-la?</em></p>
<p>Boa pergunta, meu jovem! Quando uma função não tem nome, a chamamos de <strong>função anônima</strong>. Para invocar uma função anônima, só existe uma forma: utilizando um <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="external"><em>IIFE</em></a>, ou mais conhecido como <em>invocação de função imediata</em>.</p>
<p>Para que uma função seja invocada, ela não pode estar no seu estado literal, ela precisa ser uma <em>expressão</em>. Para tornar uma função em uma expressão, podemos fazer das seguintes formas:</p>
<p><strong>Com o operador <code>()</code></strong>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{})</div></pre></td></tr></table></figure>

<p>Agora essa função é uma expressão, e pode ser invocada:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}())</div></pre></td></tr></table></figure>

<p>Ou ainda:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{})()</div></pre></td></tr></table></figure>

<p>Não faz diferença alguma se os parênteses (operador) estão dentro ou fora dos primeiros parênteses (expressão). O resultado é o mesmo: a função será invocada. Faça o teste. Cole no console do seu navegador e veja o que retorna:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'oi'</span>;</div><div class="line">}());</div><div class="line"><span class="comment">// oi</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'oi'</span>;</div><div class="line">})();</div><div class="line"><span class="comment">// oi</span></div></pre></td></tr></table></figure>

<p>Temos ainda outros operadores que transformam um literal em uma expressão: O <code>+</code>, <code>-</code>, <code>!</code> e <code>~</code>. Como funções são tratadas como qualquer outro tipo de objeto, elas também podem ser convertidas em expressões usando esses operadores.</p>
<p>Por exemplo, se você tentar invocar uma função no seu formato literal:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>

<p>Você terá um erro de sintaxe, pois, para funções literais, o nome é obrigatório para que elas possam ser invocadas. Nesse caso, teríamos que fazer algo como:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>{}</div><div class="line">hello();</div></pre></td></tr></table></figure>

<p>Pois se tentarmos invocar a função no formato literal, ela continuará dando erro de sintaxe.</p>
<p>Mas usando os operadores mostrados acima, a função se torna uma expressão, podendo então ser invocada. Todos os exemplos abaixo são válidos para uma <em>IIFE</em>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>

<p>Provavelmente você já deve ter visto essa sintaxe, principalmente em arquivos minificados (talvez um plugin jQuery).</p>
<p><em>E qual a vantagem de usar um desses operadores no lugar dos parênteses?</em></p>
<p>Um caractere a menos! Para minificação de código, qualquer caractere a mais já faz diferença!</p>
<h2 id="Invocando_funções_como_método_de_um_objeto">Invocando funções como método de um objeto</h2>
<p>Para invocar uma função <em>como método</em>, precisamos de um objeto. Depois, passamos uma função para ele. Quando temos uma função que é retornada por um objeto, nós a chamamos de <code>método</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = {};</div><div class="line">obj.func = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{};</div><div class="line">obj.func();</div></pre></td></tr></table></figure>

<p>Dessa forma, nós estamos trabalhando com <em>orientação a objetos</em> em Javascript! </p>
<p><em>E qual a diferença de invocar uma função “como função” e invocar “como método” de um objeto?</em></p>
<p>Em outras linguagens, o <code>this</code> dentro de uma classe representa o objeto que está envolvendo esse parâmetro. Esse <code>this</code> depende da forma como essa classe foi declarada.</p>
<p>Já em Javascript, o contexto do método (<code>this</code>) depende da forma de como a função é <strong>invocada</strong>.<br>Invocando a função <code>func</code> como método do objeto <code>obj</code>, o <code>this</code> usado dentro da função representa o <code>obj</code>.</p>
<p>Experimente colar no seu console dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = {};</div><div class="line">obj.func = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">};</div><div class="line"><span class="built_in">console</span>.log( obj.func() );</div></pre></td></tr></table></figure>

<p>O retorno será um <em>Objeto</em> (no caso, o <code>obj</code>), contendo o método <code>func</code>.</p>
<p>Agora, faça o teste sem o objeto:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( func() );</div></pre></td></tr></table></figure>

<p>O que é retornado? O <em>Objeto</em> <code>window</code>!</p>
<p><em>Porque</em>?</p>
<p>Por que estamos declarando a função no escopo global. Com isso, podemos dizer que toda função é um método. Nesse caso, <code>func</code> foi declarada como um método de <code>window</code>, que é nosso objeto global no browser.</p>
<p>Para ter uma visão melhor de orientação a objetos aqui, podemos declarar a função <code>func</code> como método do objeto <code>window</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.func = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">window</span>.func() );</div></pre></td></tr></table></figure>

<p>E o resultado é o mesmo que o anterior! O <code>this</code> é o objeto <code>window</code>. Assim fica mais fácil de entender o <code>this</code>, não? Mas falaremos mais sobre ele um pouco mais à frente :)</p>
<p>O que você precisa saber aqui é que, dependendo de como você invoca a função, assim o contexto dela será definido.</p>
<h2 id="Invocando_funções_como_construtores">Invocando funções como construtores</h2>
<p>Outra forma de invocar funções é como <em>construtores</em>, usando a palavra-chave <code>new</code>. Fazendo isso, criamos um novo objeto vazio, que será o contexto da nossa função. Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  };</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> Func();</div><div class="line"><span class="built_in">console</span>.log( newObj.method() );</div></pre></td></tr></table></figure>

<p>Você pode ver que um construtor nada mais é que uma simples função. Novamente: o que vai mudar aqui é a forma como essa função é invocada. Ao invocar como construtor, um novo objeto é criado e passado como referência ao construtor como o parâmetro <code>this</code>. </p>
<p>Perceba que na função construtora <code>Func</code> não temos um <code>return</code> diretamente no corpo dela, pois como usamos o <code>new</code> para invocá-la, implicitamente o <code>this</code> já é o novo objeto criado, e este objeto é automaticamente retornado, se não tiver um <code>return</code> explícito na função.</p>
<p>Para saber se o código acima se refere mesmo ao objeto <code>newObj</code>, criado a partir da função construtora, podemos testar dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  };</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> Func();</div><div class="line"><span class="built_in">console</span>.log( newObj.method() === newObj );</div></pre></td></tr></table></figure>

<p>O método <code>method</code> retorna o <code>this</code>. Como invocamos com o <code>new</code>, o <code>this</code> deve referenciar o objeto que acabamos de criar <code>newObj</code>. A instrução acima deveria retornar <code>true</code>. :)</p>
<p>Vamos criar dois objetos diferentes para tirar a prova real:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  };</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> Func();</div><div class="line"><span class="keyword">var</span> newObj2 = <span class="keyword">new</span> Func();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( newObj.method() === newObj );</div><div class="line"><span class="built_in">console</span>.log( newObj2.method() === newObj2 );</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( newObj.method() === newObj2 );</div><div class="line"><span class="built_in">console</span>.log( newObj2.method() === newObj );</div></pre></td></tr></table></figure>

<p>Dessa forma, podemos visualizar melhor a vantagem de utilizar construtores: você cria um único método, genérico e reutilizável, que pode ser referenciado por instâncias diferentes, não precisando repetir código :)</p>
<p>O resultado é que:</p>
<ul>
<li>O método <code>method</code> de <code>newObj</code>, que retorna <code>this</code> é exatamente o objeto <code>newObj</code>;</li>
<li>O método <code>method</code> de <code>newObj2</code>, que retorna <code>this</code> é exatamente o objeto <code>newObj2</code>.</li>
</ul>
<p>Mas fazendo a comparação com o outro objeto, podemos ver que isso é bastante consistente, e o valor retornado é <code>false</code> para os dois casos:</p>
<ul>
<li>O método <code>method</code> de <code>newObj</code> não faz referência ao <code>newObj2</code>;</li>
<li>E nem o método <code>method</code> de <code>newObj2</code> faz referência ao <code>newObj</code>.</li>
</ul>
<p><strong>Observação:</strong> por definição, usamos nomes de construtores com a primeira letra maíuscula, para saber que essa função será usada como <em>construtor</em>.</p>
<h2 id="Invocando_funções_com_call()_e_apply()">Invocando funções com <code>call()</code> e <code>apply()</code></h2>
<p><em>Invocar funções com outras funções? Pra quê isso?</em></p>
<p>Função não são objetos? Então! Se elas são objetos, então elas podem ter propriedades e métodos, certo? Vamos começar brincando um pouco:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'oi'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line">func.bye = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'Good bye!'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( func() ); <span class="comment">// oi</span></div><div class="line"><span class="built_in">console</span>.log( func.bye() ); <span class="comment">// Good bye!</span></div></pre></td></tr></table></figure>

<p><em>Isso é sério? Tá de zua né?</em></p>
<p>Não tô! Cole o código acima no seu console pra você ver :P</p>
<p>O primeiro <code>console.log()</code> vai retornar <code>oi</code>, pois é o retorno da função. Depois, usamos das habilidades da função ser um objeto, e criamos um método chamado <code>bye</code>, que recebe uma função, que retorna <code>Good bye!</code>. Essa é uma das maravilhas que a programação funcional te proporciona!</p>
<p>Agora, voltando ao assunto: sempre que uma função é criada, ela tem algumas propriedades específicas de funções:</p>
<ul>
<li>A propriedade <code>name</code>, que retorna como <code>String</code> o nome da função;</li>
<li>Os métodos <code>call()</code> e <code>apply()</code>, que veremos a seguir.</li>
</ul>
<p><strong>Sobre a propriedade <code>name</code>:</strong> se você passa uma função anônima como valor de uma variável, o <code>name</code> vai retornar uma <em>String vazia</em>, pois a função não tem nome. Não confunda o nome da variável com o nome da função, ok?</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>{}</div><div class="line"><span class="built_in">console</span>.log( test.name ); <span class="comment">// "test"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> test2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{};</div><div class="line"><span class="built_in">console</span>.log( test2.name ); <span class="comment">// ""</span></div></pre></td></tr></table></figure>

<h3 id="Os_métodos_call()_e_apply()">Os métodos <code>call()</code> e <code>apply()</code></h3>
<p>Esses dois métodos fazem exatamente a mesma coisa: invocam uma função, onde você pode passar o contexto que você quiser. Eles só diferem na sintaxe.</p>
<p>O <code>call()</code>, recebe como primeiro parâmetro o contexto da função, e os outros parâmetros - pode passar quantos quiser - serão passados como argumentos para a função referenciada.</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( func.call( <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span> ) ); <span class="comment">// contexto - 10 - oie</span></div></pre></td></tr></table></figure>



<p>Veja que o <code>this</code> da função é retornado como a string <code>contexto</code>, pois foi o que eu passei no primeiro parâmetro. Depois, no segundo e terceiro parâmetros de <code>call()</code>, ele transportou para a função como primeiro e segundo argumentos, respectivamente. </p>
<p>Lembrando que o contexto é você quem decide. Você poderia passar um objeto, por exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.method();</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> obj = {</div><div class="line">  method: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="string">'method de obj'</span>;</div><div class="line">  }</div><div class="line">};</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( func.call( obj ) ); <span class="comment">// method de obj</span></div></pre></td></tr></table></figure>

<p>Veja que agora não passamos nenhum parâmetro para função <code>func</code>, através do método <code>call()</code>. Só passamos como contexto da função, o objeto <code>obj</code>. Esse objeto tem um método chamado <code>method</code>.</p>
<p>Como agora <code>obj</code> é o contexto de <code>func</code>, o <code>this</code> dentro de <code>func</code> faz referência a <code>obj</code>. Por isso podemos retornar <code>this.method();</code> dentro de <code>func</code>. Ficou claro?</p>
<p>O método <code>apply()</code> faz exatamente a mesma coisa que <code>call()</code>. A diferença está nos parâmetros passados: <code>apply()</code> recebe apenas dois parâmetros: o primeiro é o contexto, igual <code>call()</code>, e o segundo é um <code>Array</code> de argumentos que serão passados para a função. Usando o mesmo exemplo de <code>call()</code>, mas com <code>apply()</code>, ficaria assim: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( func.apply( <span class="string">'contexto'</span>, [ <span class="number">10</span>, <span class="string">'oie'</span> ]) ); <span class="comment">// contexto - 10 - oie</span></div></pre></td></tr></table></figure>

<p>E o resultado é exatamente o mesmo! Agora você me pergunta:</p>
<p><em>E precisa de duas abordagens diferentes pra fazer a mesma coisa?</em></p>
<p>Sim! Imagine se você precisa passar como argumentos de uma função vários parâmetros que você precisa iterar em um <code>for</code>. Como você faria? Não tem como passar os parâmetros, separados por vírgula. O que você faz então é: cria um array, coloca todos os parâmetros dentro desse array, e invoca a função com <code>apply()</code>. Simples, não?</p>
<h2 id="O_método_bind()">O método bind()</h2>
<p>Apesar de não servir para invocação de funções, acho que é bastante importante falar sobre o método <code>bind()</code>. Esse método faz a mesma coisa que os dois citados acima (<code>call()</code> e <code>apply()</code>), tem a mesma sintaxe de <code>call()</code>, com a diferença que ele não invoca a função, mas somente <em>injeta</em> o contexto e os argumentos para que a função possa ser chamada no futuro já com essas configurações pré-definidas.</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> funcConfig = func.bind( <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span>);</div><div class="line"><span class="built_in">console</span>.log( funcConfig() ); <span class="comment">// contexto - 10 - oie</span></div></pre></td></tr></table></figure>

<p>Mas esse método acaba sendo um pouco lento, pois ele é novo, e ainda não foi muito bem implementado pelos navegadores. Uma alternativa, é, novamente, se aproveitar da programação funcional, e criar um <em>polyfill</em> para usar como <code>bind()</code>. Podemos fazer algo assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> func = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> that = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call( <span class="built_in">arguments</span>, <span class="number">2</span> );</div><div class="line">  <span class="keyword">return</span> func.apply( that, args );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( bind( func, <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span> ) );</div></pre></td></tr></table></figure>

<p>Criamos a função que faz o papel do método <code>bind()</code>. Essa função vai receber 3 ou mais parâmetros, um pouco diferente do <code>bind()</code> nativo, que recebe 2 ou mais: o primeiro parâmetro é a função, onde serão injetados o contexto e os argumentos. O segundo segue o padrão normal: o contexto e depois os argumentos, no mesmo formato de <code>call()</code>.</p>
<p><em>Mas na função <code>bind()</code> você não passou nenhum parâmetro! Como pode isso funcionar? E o que é aquele <code>arguments</code>?</em></p>
<p>Vamos ver agora! :D</p>
<h2 id="arguments_e_this"><code>arguments</code> e <code>this</code></h2>
<p>Toda função recebe - implicitamente - dois parâmetros: <code>this</code> e <code>arguments</code>. </p>
<p>O <code>this</code>, como já vimos, se refere ao contexto da função. Já o <code>arguments</code> recebe uma coleção de argumentos que foram passados para a função.</p>
<p><em>Porque você disse “coleção”? Ele não é um <code>Array</code>?</em></p>
<p>Não! Apesar de você poder utilizar a mesma notação do <code>Array</code>, pegando o primeiro argumento passado para a função com <code>arguments[0]</code>, e também podendo ver a quantidade de argumentos passados com a propriedade <code>length</code>, podendo ser usado como <code>arguments.length</code>, as semelhanças com array acabam aqui.</p>
<p>Com isso nós temos um problema: nós não podemos usar os métodos de um <code>Array</code> comum na coleção <code>arguments</code>!</p>
<p>Mas, de novo, a lindeza da linguagem funcional aparece, e mostra quão poderoso é o Javascript. Baseado em <strong>Herança Prototipal (<em>Prototypal Inheritance</em>)</strong>, nós podemos invocar os métodos do <code>Array</code>, utilizando <code>call()</code> ou <code>apply()</code> para passar o nosso <em>pseudo-array</em> como contexto da função!</p>
<p><em>Hã?</em></p>
<p>Vou exemplificar:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log( arr.slice( <span class="number">1</span> ) ); <span class="comment">// [ 2, 3 ]</span></div></pre></td></tr></table></figure>

<p>O método <code>slice()</code> remove a quantidade de itens, passada como parâmetro, a partir do início do array. </p>
<p>Invocando esse método com <code>call()</code>, ele ficaria assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log( arr.slice.call( arr, <span class="number">1</span> ) ); <span class="comment">// [ 2, 3 ]</span></div></pre></td></tr></table></figure>

<p>Ou seja, o contexto é o próprio array, que usei como objeto, e repeti, passando-o no primeiro parâmetro, então não há necessidade de eu chamar assim. Mas no caso da nossa função <code>bind()</code> acima, o <code>arguments</code> não é um <code>Array</code>, logo, não podemos usar o método <code>slice()</code>.</p>
<p><em>Duvido!</em></p>
<p>Tente! A função ficaria assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> func = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> that = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>.slice( <span class="number">2</span> );</div><div class="line">  <span class="keyword">return</span> func.apply( that, args );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( bind( func, <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span> ) );</div></pre></td></tr></table></figure>

<p>E você vai tomar um erro na cara! Porque eu te disse que o <code>arguments</code> não é um <code>Array</code> :P</p>
<p>Então o que fazemos é (explicando a função <code>bind()</code> toda): </p>
<ul>
<li>Declaramos algumas variáveis no início, pra facilitar a visualização. <code>func</code> recebe o primeiro parâmetro (<code>arguments[0]</code>);</li>
<li><code>that</code> recebe o <code>this</code>, que é o contexto, passado no segundo parâmetro (<code>arguments[1]</code>);</li>
<li><code>args</code> recebe todos os outros parâmetros, menos os dois primeiros, por isso precisamos usar o <code>slice</code>.</li>
<li>e finalmente, retornamos a função passada no primeiro parâmetro, invocando ela com <code>apply()</code> para que possamos passar o contexto que está em <code>that</code> e o <code>Array</code> de argumentos em <code>args</code>. Aqui só precisamos da notação de <code>Array</code>, então não precisamos converter novamente :)</li>
</ul>
<p>Entendeu a ideia do nosso bind? É uma função que retorna uma outra função. Para que a segunda função seja invocada junto da primeira chamada, vocẽ teria que fazer algo como:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind( func, <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span> )();</div></pre></td></tr></table></figure>

<p>A primeira chamada do operador <code>()</code> passa os parâmetros para dentro da função. Mas o retorno dela é uma função literal, por isso precisamos usar novamente o operador <code>()</code>, para que, dessa vez, a função que é o retorno seja executada!</p>
<p>Espero que tenha ficado claro como funciona a invocação de funções em Javascript, o método <code>bind()</code> e os parâmetros implícitos <code>this</code> e <code>arguments</code>.</p>
<p>Se ficou alguma dúvida, poste nos comentários!</p>
<p>Até o próximo! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/functions-invoke.jpg" alt=""></p>
<p>Funções são objetos de primeira classe em <strong>Javascript</strong>. É o que faz do <strong>Javascript</strong> a <em>coisa fofa</em> que ele é hoje. Por isso, é muito importante saber todas as formas das quais podemos invocar funções, e como isso afeta nossos programas. Já sabe? Não sabe? Não sabe se sabe? Vem ver então!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="funções" scheme="http://blog.da2k.com.br/tags/funcoes/"/>
    
      <category term="functional programming" scheme="http://blog.da2k.com.br/tags/functional-programming/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Usando temporizadores like a Ninja]]></title>
    <link href="http://blog.da2k.com.br/2015/01/29/javascript-usando-temporizadores-like-a-ninja/"/>
    <id>http://blog.da2k.com.br/2015/01/29/javascript-usando-temporizadores-like-a-ninja/</id>
    <published>2015-01-29T00:00:00.000Z</published>
    <updated>2015-01-29T02:49:42.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/javascript-timers.jpg" alt=""></p>
<p>Você provavelmente já conhece os métodos <code>setInterval()</code> e <code>setTimeout()</code>. Mas você sabe a exatamente a diferença entre eles? Sabe como eles realmente funcionam? Vem descobrir :)</p>
<a id="more"></a>

<p><code>setInterval()</code> e <code>setTimeout()</code> são funções temporizadoras. Elas executam uma função de <em>callback</em> após determinado tempo.</p>
<p>O uso delas é assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setTimeout( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Executa uma vez após 1 segundo.'</span> );</div><div class="line">}, <span class="number">1000</span> );</div><div class="line">  </div><div class="line">setInterval( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Executa infinitamente, 1 vez por segundo.'</span> );</div><div class="line">}, <span class="number">1000</span> );</div></pre></td></tr></table></figure>

<p>Como você pode ver, a sintaxe para as duas é a mesma: o primeiro parâmetro é uma função de callback que será executada após <code>x</code> milissegundos, passados no segundo parâmetro.</p>
<p>A principal diferença entre elas é que:</p>
<ul>
<li><code>setInterval()</code> executa infinitamente, até que você execute <code>clearInterval()</code>;</li>
<li><code>setTimeout()</code> executa apenas uma vez.</li>
</ul>
<p>Você pode remover um temporizador, atribuindo ele a uma variável, e depois usando <code>clearInterval( variavel )</code> para o <code>setInterval()</code>, e <code>clearTimeout( variavel )</code> para <code>setTimeout()</code>.</p>
<p>Um exemplo prático:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">if</span>( counter &gt;= <span class="number">10</span> ) {</div><div class="line">    clearInterval( timer );</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log( counter++ );</div><div class="line">}, <span class="number">1000</span>);</div></pre></td></tr></table></figure>

<p>Colando esse código no seu console, você pode constatar que é printado o valor de 0 a 10, e então o temporizador é removido.</p>
<p>Para usar com o <code>setTimeout()</code>, poderíamos fazer algo assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimer</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> timer = setTimeout( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( counter++ );</div><div class="line">    <span class="keyword">if</span>( counter &lt; <span class="number">11</span> ) {</div><div class="line">      myTimer();</div><div class="line">    }</div><div class="line">  }, <span class="number">1000</span> );</div><div class="line">}</div><div class="line">  </div><div class="line">myTimer();</div></pre></td></tr></table></figure>

<p>Como o <code>setTimeout()</code> executa somente uma vez, precisamos utilizar uma função recursiva para que temporizador continue executando até que ele encha o saco e nós possamos mandá-lo parar de chamar a função! xD</p>
<p>Bom, até aqui, provavelmente você já sabia de tudo. Mas você sabe em que momento usar <code>setInterval()</code> e quando usar <code>setTimeout()</code>? E porquê?</p>
<p><em>Dá no mesmo, posso usar qualquer uma!</em></p>
<p>É nesse ponto que fazemos a separação do jovem Padawan para o verdadeiro Ninja: você precisa conhecer o <em>Event Loop</em> do Javascript, e saber como essas funções o afetam.</p>
<h2 id="Como_funciona_o_Javascript">Como funciona o Javascript</h2>
<p>O Javascript trabalha em single thread. Aí você me pergunta: <em>então como ele faz concorrência?</em> </p>
<p>Através do <em>Event Loop!</em></p>
<p>Cada instrução assíncrona que precisa ser executada em JS, é lançada no <em>Event Loop</em>. Imagine um círculo, com uma única entrada e uma única saída. Todas as instruções entram pelo mesmo lugar, e saem por outro, uma de cada vez.</p>
<p>Como essas instruções são <em>assíncronas</em>, elas ficam rodando ali no <em>Event Loop</em> até que estejam prontas. Com isso, o JS não bloqueia a thread, podendo executar outras instruções. Quando uma instrução finaliza, o JS dispara um <strong>evento</strong> (daí o nome <em>Event Loop</em>), devolvendo em uma função de <code>callback</code> o resultado dessa instrução.</p>
<p>Instruções <em>síncronas</em> são executadas diretamente, bloqueando a thread.</p>
<p>Vamos ver isso na prática:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) {</div><div class="line">  <span class="built_in">console</span>.log( i );</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( <span class="string">'Terminou o for'</span> );</div></pre></td></tr></table></figure>

<p>Um loop é uma instrução <em>síncrona</em>, bloqueante. Ou seja, enquanto ele estiver executando, a thread ficará bloqueada. Assim que ele terminar, a próxima instrução é executada. Rodando o exemplo acima no seu console, você verá que, primeiro serão impressos os números de 0 a 9, para então mostrar a mensagem <code>Terminou o for</code>.</p>
<p><em>E como seria uma instrução assíncrona?</em></p>
<p>Assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( <span class="string">'Vou executar antes de setInterval() o/'</span> );</div><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">if</span>( counter &gt;= <span class="number">10</span> ) {</div><div class="line">    clearInterval( timer );</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log( counter++ );</div><div class="line">}, <span class="number">1000</span>);</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( <span class="string">'E eu, apesar de estar depois, também vou executar antes do setInterval() xD'</span> );</div></pre></td></tr></table></figure>

<p><em>Porque os console.log() executam antes de setInterval()?</em></p>
<p>Por que o temporizador é uma função assíncrona. Tanto o <code>setInterval()</code>, quanto o <code>setTimeout()</code>. A função passada como parâmetro não é executada até que o tempo passado no segundo parâmetro se esgote.</p>
<p>O que acontece basicamente é o seguinte: o primeiro <code>console.log()</code> é automaticamente executado. Depois, o setInterval é colocado no <em>Event Loop</em> e, assim que se passar 1 segundo, e ele for o próximo da fila a ser executado (lembra que o <em>Event Loop</em> só executa uma coisa de cada vez?), o JS vai disparar um evento, fazendo com que a função de callback passada no primeiro parâmetro seja executada.</p>
<p>O tempo nunca vai garantir que o que está no callback vai ser executado exatamente naquele tempo, pois podem ter outras funções assíncronas no <em>Event Loop</em> sendo disparadas. Logo que a fila é liberada, e chega a vez do temporizador, aí então ele é executado.</p>
<p>Ficou claro como funciona o <em>Event Loop</em>? Ótimo, vamos seguir!</p>
<p>Sabendo disso, podemos enfim falar sobre as diferenças de <code>setInterval()</code> e <code>setTimeout()</code>.</p>
<h2 id="setInterval()">setInterval()</h2>
<p>Como o <code>setInterval()</code> executa infinitamente, a garantia que temos é que ele vai adicionar uma instrução ao <em>Event Loop</em> a cada um segundo (levando em consideração os exemplos passados).</p>
<p>Isso significa que, se em 1 segundo a primeira instrução não for executada, - por ter outras instruções no <em>Event Loop</em> - a segunda instrução será adicionada ao <em>Event Loop</em>, ficando duas instruções na fila.</p>
<p>Imagine agora você com vários temporizadores na tela. Cada <code>setInterval()</code> adicionando várias instruções ao <em>Event Loop</em>. Lembrando que o <em>Event Loop</em> é gerenciado pelo browser, no <em>client side</em>. Pode acontecer de chegar um momento que seu computador não terá memória suficiente para suportar a quantidade de eventos alocados, fazer seu navegador dar <em>crash</em>, e em alguns casos, até travar o computador.</p>
<p>Isso já aconteceu com você? Então. O problema, provavelmente, era o <code>setInterval()</code>.</p>
<h2 id="setTimeout()">setTimeout()</h2>
<p>Agora, analisando por esse lado, e sabendo que o <code>setTimeout()</code> só executa uma vez, - a menos que fizermos uma chamada recursiva para que ele execute mais vezes - podemos concluir que, o <code>setTimeout()</code> só vai adicionar mais uma instrução no <em>Event Loop</em> depois que a primeira instrução for retornada através do evento disparado!</p>
<p>Se a primeira instrução demorar 5 segundos para disparar o evento, a segunda instrução só será adicionada DEPOIS disso!</p>
<p>Agora pense no caso do exemplo acima, onde usamos vários <code>setInterval()</code>. Com o <code>setTimeout()</code> não teríamos o mesmo problema, pois cada <code>setTimeout()</code> garante que só uma instrução por <code>setTimeout()</code> será enviada ao <em>Event Loop</em>! É um ganho de performance absurdo! :D</p>
<p>Então, sempre que estiver na dúvida: </p>
<p><em><code>setInterval()</code> ou <code>setTimeout()</code> recursivo?</em></p>
<p>Vá pela segunda opção. É muito mais performática!</p>
<p>Até o próximo artigo!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/javascript-timers.jpg" alt=""></p>
<p>Você provavelmente já conhece os métodos <code>setInterval()</code> e <code>setTimeout()</code>. Mas você sabe a exatamente a diferença entre eles? Sabe como eles realmente funcionam? Vem descobrir :)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="temporizadores" scheme="http://blog.da2k.com.br/tags/temporizadores/"/>
    
      <category term="setInterval" scheme="http://blog.da2k.com.br/tags/setinterval/"/>
    
      <category term="setTimeout" scheme="http://blog.da2k.com.br/tags/settimeout/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GulpJS - entendendo o método watch()]]></title>
    <link href="http://blog.da2k.com.br/2015/01/28/gulpjs-entendendo-o-metodo-watch/"/>
    <id>http://blog.da2k.com.br/2015/01/28/gulpjs-entendendo-o-metodo-watch/</id>
    <published>2015-01-28T00:00:00.000Z</published>
    <updated>2015-01-28T01:01:10.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs-watch.jpg" alt=""></p>
<p>Apesar de simples, o método <code>watch()</code> do <strong>GulpJS</strong> tem algumas particularidades que o tornam bastante poderoso!</p>
<a id="more"></a>

<h2 id="Sintaxe">Sintaxe</h2>
<p>O método <code>watch()</code> tem duas possíveis sintaxes:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch( glob, [, opts], tasks );</div></pre></td></tr></table></figure>

<p>e:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch( glob, [, opts, cb]);</div></pre></td></tr></table></figure>

<p>Na primeira sintaxe, temos:</p>
<h3 id="glob">glob</h3>
<p>Tipo: <code>String</code> ou <code>Array</code></p>
<p>Um simples <em>glob</em> ou array de <em>globs</em>, que indicam quais arquivos devem ser assistidos, para saber quando foram alterados.</p>
<p>Exemplo de uso:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch( <span class="string">'src/js/**/*.js'</span> );</div></pre></td></tr></table></figure>

<p>Onde todos os arquivos <code>.js</code>, dentro do diretório <code>src/js</code> serão assistidos, recursivamente.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/recursion.gif" alt="Recursão"></p>
<p>Outro exemplo, com <code>Array</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch([ <span class="string">'src/js/**/*.js'</span>, <span class="string">'src/stylus/**/*.styl'</span> ]);</div></pre></td></tr></table></figure>

<p>Assiste todos os arquivos <code>.js</code> dentro de <code>src/js</code>, e todos os arquivos <code>.styl</code>, dentro de <code>src/stylus</code>, recursivamente.</p>
<h3 id="opts">opts</h3>
<p>Tipo: <code>Object</code></p>
<p>Opções, que são passadas para a lib <a href="https://github.com/shama/gaze" target="_blank" rel="external">Gaze</a>, que o <strong>GulpJS</strong> usa para fazer o <code>watch</code> dos arquivos. As opções que você pode usar estão disponíveis em <a href="https://github.com/shama/gaze#properties" target="_blank" rel="external">https://github.com/shama/gaze#properties</a></p>
<h3 id="tasks">tasks</h3>
<p>Tipo: <code>Array</code></p>
<p>Um <code>Array</code> de tasks criadas com <code>gulp.task()</code>, que devem ser executadas, quando houver mudanças em qualquer dos arquivos passados em <code>glob</code>.</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch( <span class="string">'src/js/**/*.js'</span>, [ <span class="string">'lint'</span>, <span class="string">'uglify'</span> ] );</div></pre></td></tr></table></figure>

<p>As tarefas <code>lint</code> e <code>uglify</code> serão executadas sempre que um arquivo <code>.js</code> em <code>src/js</code> for alterado.</p>
<p>Você ainda pode usar eventos do <strong>NodeJS</strong>, para ter uma função <code>callback</code> que execute assim que os arquivos forem alterados:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> watcher = gulp.watch( <span class="string">'src/js/**/*.js'</span>, [ <span class="string">'lint'</span>, <span class="string">'uglify'</span> ] );</div><div class="line">watcher.on( <span class="string">'change'</span>, <span class="function"><span class="keyword">function</span><span class="params">( event )</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'File'</span> + event.path + <span class="string">' was '</span> + event.type );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>O <code>callback</code> tem como parâmetro o objeto <code>event</code>, que possui as propriedades <code>path</code>, com o caminho do arquivo, e <code>type</code>, com o tipo de evento disparado.</p>
<p><code>event.type</code> pode ter 3 possíveis valores:</p>
<ul>
<li><code>changed</code>: quando um arquivo no caminho assistido é alterado;</li>
<li><code>deleted</code>: quando um arquivo é deletado do caminho assistido;</li>
<li><code>added</code>: Quando um novo arquivo é criado no caminho assistido.</li>
</ul>
<p>A segunda sintaxe difere apenas no último parâmetro. Você pode passar uma função de <code>callback</code> no lugar de chamar tasks para executar. Essa função tem o mesmo parâmetro <code>event</code> mostrado anteriormente, quando usado com o método <code>.on(&#39;change&#39;)</code>.</p>
<h2 id="Problemas_com_event-type_added_no_GulpJS">Problemas com <code>event.type added</code> no GulpJS</h2>
<p>O <strong>GulpJS</strong> executa corretamente os eventos <code>changed</code> e <code>deleted</code>, mas quando você adiciona um novo arquivo, em alguns momentos o <code>added</code> não é disparado.</p>
<p>Já havia conversado com alguns amigos sobre isso, e estava confiante que era algum bug no <strong>GulpJS</strong>. Fiz algumas pesquisas por cima, mas não cheguei a nenhuma solução. </p>
<p>O problema era que, ao adicionar um novo arquivo, eu sempre teria que parar o <code>watch()</code>, criar os novos arquivos e então executar novamente o <code>watch()</code>.</p>
<p>Mas hoje estava trocando uma ideia com o <a href="https://github.com/romuloctba" target="_blank" rel="external">Rômulo</a>, que estava passando pelo mesmo problema. Então, em meio a vários links dizendo que era “um problema mesmo”, “era bug do Gaze”, etc., ele encontrou um link onde dizia exatamente qual era o problema:</p>
<p>Havia uma <em>issue</em> aberta no Gaze, - que foi fechada, mas o problema continua - dizendo que isso acontecia quando se usava <code>./</code> no início do <code>glob</code>, no <code>watch()</code>. E o problema - e consequentemente, a solução - é exatamente esse!</p>
<p>Se você não colocar o <code>./</code> no início do <code>glob</code>, o <strong>GulpJS</strong> reconhece corretamente novos arquivos adicionados, sem precisar parar o <code>watch()</code>!</p>
<p>Uma grande descoberta :D</p>
<p>Bom, era isso que eu queria mostrar sobre o <code>watch()</code> hoje. O <strong>GulpJS</strong> nos dá muitas possibilidades de personalização, e você ainda vai cansar - ou não - de ler artigos legais sobre o Gulp aqui no blog :D</p>
<p>Até o próximo!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs-watch.jpg" alt=""></p>
<p>Apesar de simples, o método <code>watch()</code> do <strong>GulpJS</strong> tem algumas particularidades que o tornam bastante poderoso!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GulpJS - deploy com Rsync]]></title>
    <link href="http://blog.da2k.com.br/2015/01/27/gulpjs-deploy-com-rsync/"/>
    <id>http://blog.da2k.com.br/2015/01/27/gulpjs-deploy-com-rsync/</id>
    <published>2015-01-27T00:00:00.000Z</published>
    <updated>2015-01-27T02:38:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulp-rsync.png" alt=""></p>
<p>Fazer deploy via FTP é um trabalho bem chato e custoso. Agora que já sabemos <a href="http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/" target="_blank" rel="external">como usar o <strong>GulpJS</strong></a>, que tal utilizá-lo para fazer deploy do nosso projeto via <strong>SSH</strong>, usando <strong>Rsync</strong>, e com apenas um simples comando, sincronizar nosso ambiente local com o ambiente de produção? Duvida? Vem ver! ;)</p>
<a id="more"></a>

<p>E pra começar, vou mostrar que pra usar o <strong>Gulp</strong>, você não precisa ficar preso a um plugin específico. No <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">repositório de plugins do <strong>GulpJS</strong></a>, se buscar por <strong>rsync</strong>, você vai encontrar o plugin <a href="https://www.npmjs.com/package/gulp-rsync/" target="_blank" rel="external">gulp-rsync</a>, mas não vamos utilizá-lo :P</p>
<p>Vamos usar um módulo do <strong>NodeJS</strong>, chamado <a href="https://github.com/jedrichards/rsyncwrapper" target="_blank" rel="external">rsyncwrapper</a>.</p>
<h2 id="Começando_do_começo">Começando do começo</h2>
<p>Vamos criar a estrutura do nosso projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── build</div><div class="line">│   ├── // ... arquivos que irão para o servidor ...</div><div class="line">├── gulpfile.js</div><div class="line">└── package.json</div></pre></td></tr></table></figure>

<p>Como você já sabe, o <code>package.json</code> deve ter somente <code>{}</code> como conteúdo.</p>
<p>No diretório <code>build</code>, você vai colocar os arquivos que quer que sejam enviados ao seu servidor.</p>
<blockquote>
<p><strong>OBSERVAÇÃO IMPORTANTE:</strong> para fazer deploy com <strong>Rsync</strong>, você precisa ter acesso <strong>SSH</strong> liberado no seu servidor! (melhor avisar, antes que alguém comente dizendo que não funcionou :P)</p>
</blockquote>
<p>Sabendo disso, vamos instalar os módulos necessários: </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp rsyncwrapper</div></pre></td></tr></table></figure>

<p>Acho que isso eu não falei ainda, mas você pode instalar vários módulos de uma só vez :D<br>Nesse caso, estamos instalando o <code>gulp</code> e o <code>rsyncwrapper</code> ao mesmo tempo, e salvando no <code>package.json</code>.</p>
<p>E vamos configurar nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> rsync = <span class="built_in">require</span>( <span class="string">'rsyncwrapper'</span> ).rsync;</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  rsync({</div><div class="line">    src: <span class="string">'./build/'</span>,</div><div class="line">    dest: <span class="string">'user@domain.com:/path/on/your/server'</span>,</div><div class="line">    recursive: <span class="literal">true</span></div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Essa é a configuração mais simples para usar o <code>rsync</code>. Adicionamos ao nosso <code>gulpfile.js</code> o <code>gulp</code> e o <code>rsyncwrapper</code>, chamando o método <code>rsync</code>, mas sem invocá-lo.</p>
<p>Dentro da <code>task</code>, passamos um objeto como parâmetro da função <code>rsync</code>, com duas propriedades:</p>
<ul>
<li><strong>src</strong>: Caminho dos arquivos que serão “deployados” para o servidor;</li>
<li><strong>dest</strong>: Caminho NO SERVIDOR que receberá os arquivos.</li>
<li><strong>recursive</strong>: Passa recursivamente pelos diretórios em <code>src</code> para enviar os arquivos.</li>
</ul>
<p>O formato para o <code>dest</code> é o seguinte:</p>
<ul>
<li>nome do seu usuário;</li>
<li>arroba (<code>@</code>);</li>
<li>seu domínio;</li>
<li>dois-pontos;</li>
<li>caminho no servidor que receberá os arquivos.</li>
</ul>
<p>Listei para ficar fácil você saber o que precisa ser mantido, e o que você precisa editar. Não sei se precisava, mas enfim…</p>
<p>Fazendo isso, pode rodar o comando <code>gulp</code> no terminal e conferir os arquivos no seu servidor!</p>
<p><em>Mas não tenho nenhum feedback visual! Como vou saber quando terminou de enviar os arquivos?</em></p>
<p>O <strong>rsyncwrapper</strong> tem algumas propriedades que podemos utilizar para facilitar nossa vida. Vamos a elas. Altere seu <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> rsync = <span class="built_in">require</span>( <span class="string">'rsyncwrapper'</span> ).rsync;</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  rsync({</div><div class="line">    src: <span class="string">'./build/'</span>,</div><div class="line">    dest: <span class="string">'user@domain.com:/path/on/your/server'</span>,</div><div class="line">    recursive: <span class="literal">true</span>,</div><div class="line">    args: [ <span class="string">'--verbose'</span> ]</div><div class="line">  }, <span class="function"><span class="keyword">function</span><span class="params">( error, stdout, stderr, cmd )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( stdout, <span class="string">'END!'</span> );</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Passamos no primeiro parâmetro um objeto para a função <code>rsync</code>, com as propriedades <code>src</code> e <code>dest</code>. Como segundo parâmetro, podemos passar uma função de callback que será executada assim que todos os arquivos forem enviados!</p>
<p>Adicionamos também um parâmetro <code>args</code>, que receberá argumentos, como se você estivesse usando o <strong>rsync</strong> na linha de comando xD</p>
<p>Podemos passar para essa propriedade, um array de argumentos. Para conhecer todos os argumentos disponíveis para o <strong>rsync</strong>, visite <a href="https://rsync.samba.org/ftp/rsync/rsync.html" target="_blank" rel="external">https://rsync.samba.org/ftp/rsync/rsync.html</a></p>
<p><em>Tá ficando bom! Mas eu tenho muitos arquivos! Eu posso acompanhar um a um, enquanto estiverem subindo?</em></p>
<p>Sim! O <strong>rsyncwrapper</strong> tem um método <code>onStdout</code>, que recebe um parâmetro com o Buffer do arquivo que está sendo enviado. Vamos ver como utilizá-lo (vou colocar só a função <code>rsync</code> agora):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">rsync({</div><div class="line">  src: <span class="string">'./build/'</span>,</div><div class="line">  dest: <span class="string">'user@domain.com:/path/on/your/server'</span>,</div><div class="line">  recursive: <span class="literal">true</span>,</div><div class="line">  args: [ <span class="string">'--verbose'</span> ],</div><div class="line">  onStdout: <span class="function"><span class="keyword">function</span><span class="params">( data )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( data.toString() );</div><div class="line">  }</div><div class="line">}, <span class="function"><span class="keyword">function</span><span class="params">( error, stdout, stderr, cmd )</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'END!'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Usamos a forma mais bruta para mostrar o nome do arquivo: convertê-lo para <code>String</code>, usando o <code>.toString()</code>. Agora, a cada arquivo que subir, será mostrado o nome no terminal, para que você possa acompanhar o progresso :D</p>
<p>Removi também do função de callback o <code>stdout</code>, para não mostrar duplicado o retorno.</p>
<h2 id="Extras">Extras</h2>
<p>Ainda podemos deixar melhor :D</p>
<p>Temos uma propriedade <code>exclude</code>, que recebe um array de arquivos que você NÃO quer enviar. Exemplo: você quer ignorar um <code>.htaccess</code>, ou qualquer outro arquivo? Adicione-o ao array em <code>exclude</code>. Ficaria algo como:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exclude: [ <span class="string">'.htaccess'</span>, <span class="string">'.editorconfig'</span>, <span class="string">'node_modules'</span> ]</div></pre></td></tr></table></figure>

<p>Você pode usar também as propriedades <code>delete: true</code> ou <code>deleteAll: true</code>.</p>
<p><code>deleteAll</code> vai sincronizar os arquivos em <code>src</code> com o <code>dest</code>. Se você remover algo local, ele vai remover do servidor também. Bruto assim.</p>
<p><code>delete</code> também sincroniza, porém ele ignora os arquivos em <code>exclude</code>. Se você tem, por exemplo, localmente um diretório <code>node_modules</code> que não quer enviar para o servidor, mas tem um diretório com o mesmo nome no servidor, mas não quer deletá-lo, usando o <code>delete</code> esse diretório se manterá lá. Caso contrário, use o <code>deleteAll</code>.</p>
<blockquote>
<p>Muito cuidado com essas opções! Você pode perder seus dados importantes se não configurar corretamente! Faça testes antes e verifique se está tudo ok antes de continuar!</p>
</blockquote>
<p>Podemos também setar um formato de comparação, usando <code>compareMode: &#39;checksum&#39;</code> ou <code>compareMode: &#39;sizeOnly</code>. <code>checksum</code> compara por um checksum de 128bit. <code>sizeOnly</code> só verifica se o tamanho do arquivo mudou. Recomendo que use o <code>checksum</code>, pois é mais preciso.</p>
<p>Adicionando algumas dessas opções, nosso <code>gulpfile.js</code> ficaria assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> rsync = <span class="built_in">require</span>( <span class="string">'rsyncwrapper'</span> ).rsync;</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  rsync({</div><div class="line">    src: <span class="string">'./build/'</span>,</div><div class="line">    dest: <span class="string">'user@domain.com:/path/on/your/server'</span>,</div><div class="line">    recursive: <span class="literal">true</span>,</div><div class="line">    args: [ <span class="string">'--verbose'</span> ],</div><div class="line">    deleteAll: <span class="literal">true</span>,</div><div class="line">    compareMode: <span class="string">'checksum'</span>,</div><div class="line">    onStdout: <span class="function"><span class="keyword">function</span><span class="params">( data )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( data.toString() );</div><div class="line">    }</div><div class="line">  }, <span class="function"><span class="keyword">function</span><span class="params">( error, stdout, stderr, cmd )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'END!'</span> );</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Para ver todas as opções do <strong>rsyncwrapper</strong>, acesse: <a href="https://github.com/jedrichards/rsyncwrapper" target="_blank" rel="external">https://github.com/jedrichards/rsyncwrapper</a></p>
<p>Por hoje é isso! Mas ainda temos muita coisa de Gulp para mostrar! Continue acompanhando :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulp-rsync.png" alt=""></p>
<p>Fazer deploy via FTP é um trabalho bem chato e custoso. Agora que já sabemos <a href="http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/" target="_blank" rel="external">como usar o <strong>GulpJS</strong></a>, que tal utilizá-lo para fazer deploy do nosso projeto via <strong>SSH</strong>, usando <strong>Rsync</strong>, e com apenas um simples comando, sincronizar nosso ambiente local com o ambiente de produção? Duvida? Vem ver! ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="deploy" scheme="http://blog.da2k.com.br/tags/deploy/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="ssh" scheme="http://blog.da2k.com.br/tags/ssh/"/>
    
      <category term="rsync" scheme="http://blog.da2k.com.br/tags/rsync/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Imagens]]></title>
    <link href="http://blog.da2k.com.br/2015/01/26/segredos-do-github-imagens/"/>
    <id>http://blog.da2k.com.br/2015/01/26/segredos-do-github-imagens/</id>
    <published>2015-01-26T00:00:00.000Z</published>
    <updated>2015-01-25T11:03:17.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-images.png" alt="Segredos do Github - Imagens"></p>
<p>Imagens? Isso é segredo? ;)</p>
<a id="more"></a>

<h2 id="Emojis">Emojis</h2>
<p>Nada como alegrar aquela mensagem de commit, o comentário de uma <em>issue</em> ou um <em>pull request</em> com os famosos <strong>Emojis</strong>! Para usar, basta você colocar o nome do emoji entre dois-pontos: <code>:emoji-name:</code>.</p>
<p>E sim, isso funciona nas mensagens de commit! Experimente! </p>
<p>Para saber quais são os Emojis disponíveis, acesse <a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">http://www.emoji-cheat-sheet.com/</a> ou <a href="https://github.com/scotch-io/All-Github-Emoji-Icons" target="_blank" rel="external">https://github.com/scotch-io/All-Github-Emoji-Icons</a> :)</p>
<p>O <em>Top 5O</em> dos Emojis são:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Emoji</th>
<th style="text-align:center">Código</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/shipit.png" alt=""></td>
<td style="text-align:center">:shipit:</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/sparkles.png" alt=""></td>
<td style="text-align:center">:sparkles:</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/-1.png" alt=""></td>
<td style="text-align:center">:-1:</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/+1.png" alt=""></td>
<td style="text-align:center">:+1:</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/clap.png" alt=""></td>
<td style="text-align:center">:clap:</td>
</tr>
</tbody>
</table>
<h2 id="Imagens_/_GIFs">Imagens / GIFs</h2>
<p>Você pode usar qualquer imagem ou gif em qualquer lugar que aceite markdown no Github: <em>issues</em>, <em>pull requests</em>, arquivos Markdown. Se quiser pegar a imagem de algum repositório, pode usar o seguinte formato:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">Alt Text</span>](<span class="link_url">https://github.com/{user}/{repo}/raw/{branch}/path/to/image.gif</span>)</div></pre></td></tr></table></figure>

<p>Trocando as informações acima pelas corretas da sua imagem :)</p>
<p><img src="https://camo.githubusercontent.com/fca1eaa46baa3573f6e2d993f6fe1f95a6329ae9/687474703a2f2f7777772e73686561776f6e672e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031332f30382f6b656570686174696e2e676966" alt=""></p>
<h2 id="Upload_de_imagens">Upload de imagens</h2>
<p>Quando abrir uma <em>issue</em> ou <em>pull request</em>, você pode adicionar uma local, de 3 formas:</p>
<ul>
<li>Arrastando a imagem para área onde você digita o texto da <em>issue</em> / <em>pull request</em>;</li>
<li>Colando a imagem da sua área de transferência (<code>Ctrl + C</code> ou <code>Cmd + C</code>);</li>
</ul>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-upload.png" alt="Upload de imagens no Github"></p>
<ul>
<li>Ou ainda clicando no link apresentado:</li>
</ul>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-upload-click-link.png" alt="Upload de imagens no Github clicando no link"></p>
<p>E era isso!</p>
<p>Até a próxima! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-images.png" alt="Segredos do Github - Imagens"></p>
<p>Imagens? Isso é segredo? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Shortcuts]]></title>
    <link href="http://blog.da2k.com.br/2015/01/25/segredos-do-github-shortcuts/"/>
    <id>http://blog.da2k.com.br/2015/01/25/segredos-do-github-shortcuts/</id>
    <published>2015-01-25T00:00:00.000Z</published>
    <updated>2015-01-25T11:03:17.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-shortcuts.jpg" alt="Github Shortcuts"></p>
<p>Atalhos sempre agilizam o trabalho com qualquer ferramenta. Hoje vou mostrar alguns atalhos interessantes do Github :D</p>
<a id="more"></a>

<h2 id="Buscando_arquivos">Buscando arquivos</h2>
<p>Quando você está visualizando um repositório, você pode pressionar <code>t</code> e começar a digitar um nome de arquivo que contenha nesse diretório, que o arquivo será buscado recursivamente em todos os diretórios:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-search.png" alt="Github search"></p>
<p>Usando as setas <code>↑</code> e <code>↓</code>, você navega pelos arquivos encontrados. E pressionando <code>enter</code>, você abre o arquivo :)<br>Esse comando funciona na listagem de arquivos de um repositório.</p>
<h2 id="Branch_selector">Branch selector</h2>
<p>Se você trabalha com várias <em>branchs</em>, pode usar o <code>w</code>, na tela principal do repositório, para abrir o <em>Branch Selector</em>. O campo de busca de branchs receberá foco. Pressionando <code>tab</code>, você navega nas abas <em>branches</em> e <em>tags</em>. Pressionando <code>enter</code> em cima da aba, ela é selecionada:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/branch-selector.png" alt="Branch selector"></p>
<h2 id="Command_bar">Command bar</h2>
<p>Pressionando <code>s</code>, o barra de busca recebe foco para que você possa encontrar conteúdos dentro do Github:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/command-bar.png" alt="Command bar"></p>
<p>Mais dicas interessantes sobre a <em>Command bar</em> você encontra em <a href="https://help.github.com/articles/searching-github/" target="_blank" rel="external">https://help.github.com/articles/searching-github/</a></p>
<h2 id="Labels">Labels</h2>
<p>Na tela de  <em>issues</em>, pressionando <code>l</code>, você pode filtrar as <em>issues</em> por labels. Pode navegar por elas usando as setas <code>↑</code> e <code>↓</code> e pressionar <code>enter</code>para selecionar:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/labels.png" alt="Labels"></p>
<h2 id="Congelar_uma_alteração_de_arquivo">Congelar uma alteração de arquivo</h2>
<p>Ao visualizar um arquivo, se você pressionar <code>y</code>, a URL irá mudar para uma que “congela” como o arquivo está atualmente. Se esse arquivo mudar, você pode usar essa URL para ver exatamente como estava o arquivo antes das alterações :)</p>
<h2 id="Todos_os_atalhos">Todos os atalhos</h2>
<p>E por último, mas não menos importante, se você pressionar <code>?</code> em qualquer lugar, será mostrada a tela com todos os atalhos disponíveis no Github :D</p>
<p>Inicialmente são mostrados somente os mais utilizados. Mas clicando no link <strong>Show all</strong>, você pode ver todos os atalhos! (<em>Mr. Óbvio ataca novamente!</em> :P)</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-shortcuts.jpg" alt="Github Shortcuts"></p>
<p>Atalhos sempre agilizam o trabalho com qualquer ferramenta. Hoje vou mostrar alguns atalhos interessantes do Github :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GulpJS - Um gole de otimização no seu workflow]]></title>
    <link href="http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/"/>
    <id>http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/</id>
    <published>2015-01-24T00:00:00.000Z</published>
    <updated>2015-01-24T20:23:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs.png" alt=""></p>
<p>Em 2014 <a href="https://github.com/fdaciuk/talks" target="_blank" rel="external">palestrei em alguns eventos</a> evangelizando a galera sobre o uso do <a href="http://gulpjs.com/" target="_blank" rel="external">GulpJS</a>. Hoje resolvi transformar essa palestra em post, para facilitar futuras consultas e poder fazer outros posts falando mais a fundo sobre GulpJS e seus plugins!</p>
<p>Mas precisamos começar de algum lugar! Vem comigo? :D</p>
<a id="more"></a>

<h2 id="O_que_é_o_GulpJS?">O que é o GulpJS?</h2>
<p>O <strong>GulpJS</strong> é um <em>task runner</em>, assim como o <a href="http://gruntjs.com/" target="_blank" rel="external"><strong>Grunt</strong></a>. </p>
<p><em>E o que é um task runner</em>?</p>
<p><em>Task Runner</em> é o nome dado à uma ferramenta que centraliza e executa alguma tarefa repetitiva automaticamente. Eles existem para facilitar o seu dia-a-dia como desenvolvedor.</p>
<p>Elas são sinônimo de <strong>performance</strong>.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/performance.gif" alt="Performance"></p>
<p>A ideia é dar performance ao desenvolvedor na hora de escrever códigos, e também performance ao entregar o projeto ao cliente final, deixando-o mais leve e rápido.</p>
<p>Um <em>task runner</em> pode executar tarefas rotineiras como <strong>minificação de arquivos</strong>, <strong>compilação de CSS com pré-processadores</strong>, <strong>minificação de imagens</strong>, <strong>deploy</strong>, etc., tudo isso de forma automatizada. <em>Cool, hum?</em> ;)</p>
<p>Para facilitar o entendimento, vou mostrar alguns exemplos de ferramentas que você precisa usar diariamente para executar essas tarefas:</p>
<h3 id="Javascript_Compressor">Javascript Compressor</h3>
<p>Após escrever seu JS, você cola seu código <a href="http://www.minifyjs.com/javascript-compressor/" target="_blank" rel="external">nessa ferramenta</a>, e ela te devolve o código todo minificado, pronto para entregar em produção!</p>
<h3 id="Lint_de_JS">Lint de JS</h3>
<p>O <a href="http://jshint.com/" target="_blank" rel="external"><strong>JSHint</strong></a> busca no seu código erros comuns, garantindo que você esteja usando as melhores práticas nas escrita do seu Javascript.</p>
<p>Existe também o <a href="http://www.jslint.com/" target="_blank" rel="external"><strong>JSLint</strong></a>, criado por <a href="">Douglas Crockford</a>. É uma ferramenta que tem um pouco mais de restrições que o JSHint, - JSHint é mais “maleável” - e é recomendado para quem gosta de <a href="https://github.com/twbs/bootstrap/issues/3057#issuecomment-5135512" target="_blank" rel="external">“desafios maiores”</a> :P</p>
<h3 id="Testes_(TDD/BDD/E2E)">Testes (TDD/BDD/E2E)</h3>
<p>Testar seu código não pode ser uma tarefa difícil, muito menos lenta, senão você acaba deixando eles de lado. Algumas ferramentas facilitam o trabalho, como o <a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a>, <a href="http://shouldjs.github.io/" target="_blank" rel="external">Should</a>, <a href="http://jasmine.github.io/" target="_blank" rel="external">Jasmine</a>, <a href="http://qunitjs.com/" target="_blank" rel="external">QUnit</a>, <a href="http://chaijs.com/" target="_blank" rel="external">Chai</a>, <a href="http://sinonjs.org/" target="_blank" rel="external">Sinon</a>, etc.</p>
<h3 id="Pré-processadores">Pré-processadores</h3>
<p>Com eles você “programa” dentro do CSS. Pode usar estruturas condicionais, funções, variáveis, includes, mixins, e ainda diminui muito a repetição de código. Os mais conhecidos são: <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>, <a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a> e <a href="http://lesscss.org/" target="_blank" rel="external">LESS</a>.</p>
<h3 id="Compressão_de_imagens">Compressão de imagens</h3>
<p>Ao exportar suas imagens, elas precisam ser tão leves quanto possível. Existem vários softwares que fazem esse trabalho, diminuindo o tamanho da imagem, mas mantendo a mesma qualidade. Uma ferramenta legal (e online) para fazer isso é o <a href="http://compressor.io/" target="_blank" rel="external">Compressor.io</a>.</p>
<h3 id="Sistema_de_controle_de_versão">Sistema de controle de versão</h3>
<p><a href="http://git-scm.com/" target="_blank" rel="external">Git</a>, <a href="http://mercurial.selenic.com/" target="_blank" rel="external">Mercurial</a>, <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> são sistemas que ajudam a controlar a versão do seu projeto. Você pode desenvolver por partes e ter o controle de cada feature implementada no seu sistema.</p>
<p>Então você pensa: <em>Nossa, eu posso usar milhões de ferramentas para otimizar meu projeto!</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/crazy-bird.gif" alt="Passarinho locão"></p>
<p>Mas ao mesmo tempo, você percebe que é muita coisa! Muita ferramenta para lembrar de usar, muito site para favoritar, e desiste de tudo isso! <em>Vou entregar o projeto assim mesmo! Não vou conseguir lembrar de usar todas essas ferramentas!</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/panda.gif" alt="Panda derrubando carrinho"></p>
<h3 id="E_se_pudéssemos_automatizar_esse_processo?">E se pudéssemos automatizar esse processo?</h3>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/blocks.gif" alt="Automatização"></p>
<p>Uma vez vi uma palestra do <a href="http://addyosmani.com/blog/" target="_blank" rel="external">Addy Osmani</a>, onde ele disse que:</p>
<blockquote>
<p>Automation isn’t about being lazy, It’s about being efficient.</p>
</blockquote>
<p>Mas como é possível ser eficiente tendo que lembrar de milhões de coisas pra usar? Não dá pra centralizar tudo isso em uma única ferramenta? Será que é possível?</p>
<p><strong>SIM!</strong> Nós podemos fazer isso usando <a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a>!</p>
<h2 id="Instalando_o_NodeJS">Instalando o NodeJS</h2>
<p>A instalação do NodeJS é bastante simples: acesse o site do <a href="http://nodejs.org/download/" target="_blank" rel="external">NodeJS</a>, baixe a versão para o seu sistema operacional e siga as instruções.</p>
<p>Fazendo isso, você terá no seu terminal o comando <code>node</code> disponível!</p>
<p>O Node também traz junto com ele o gerenciador de pacotes NPM. Logo, você também já deve ter o comando <code>npm</code> disponível no seu terminal para gerenciar os pacotes do Node! :D</p>
<p>Para quem não sabe, um gerenciador de pacotes é o cara que vai centralizar os pacotes de software disponíveis para a ferramenta em questão. </p>
<p>É como os gerenciadores de pacote do seus sistema operacional:</p>
<p>No Linux, nós temos o <code>apt-get</code> nos linux <em>Debian Like</em>, <code>yum</code> do Fedora;<br>No Mac, <code>brew</code> ou <code>ports</code>;<br>No Windows, bem… no Windows não tem! Mas se tivesse, acho que seria algo assim:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/windows-package-manager.gif" alt="Gerenciador de pacotes no Windows"></p>
<p>:P</p>
<p>Mas zueiras à parte, vamos ver como utilizar o NPM:</p>
<h2 id="Instalação_de_pacotes">Instalação de pacotes</h2>
<p>Para instalar algum módulo NodeJS com o NPM, você pode usar o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install &lt;module name&gt;</div></pre></td></tr></table></figure>

<p>Ou ainda:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i &lt;module name&gt;</div></pre></td></tr></table></figure>

<p>O <code>i</code> é apenas um <em>alias</em> para o <code>install</code>, ou seja, eles fazem a mesma coisa.</p>
<p>E <code>&lt;module name&gt;</code> é o nome do seu módulo. Você pode encontrar os <a href="https://www.npmjs.com/" target="_blank" rel="external">módulos disponíveis no NPM aqui</a>.</p>
<h2 id="Instalando_o_GulpJS">Instalando o GulpJS</h2>
<p>Depois do Node e NPM instalados e funcionando, precisamos começar instalando o GulpJS:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g gulp</div></pre></td></tr></table></figure>

<p>Com esse comando, instalamos o GulpJS globalmente (repare no <code>-g</code> do comando acima). Quando instalamos um módulo do Node globalmente, temos disponíveis no nosso terminal o comando que geralmente é o mesmo nome do módulo. Nesse caso, temos o comando <code>gulp</code> disponível :)</p>
<p>Vamos ver um exemplo na prática de como usá-lo. Crie a seguinte estrutura de arquivos:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── gulpfile.js</div><div class="line">└── package.json</div></pre></td></tr></table></figure>

<p>No <code>package.json</code> ficarão todas as informações do nosso módulo. Podemos criá-lo manualmente, ou através do comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>

<p>Ao utilizar o comando, serão feitas algumas perguntas relacionadas ao projeto. Vá dando <code>enter</code> para ignorar se não quiser preencher. Essas informações não serão relevantes para o nosso caso, usando um <em>task runner</em>.</p>
<p>Se não quiser usar o <code>npm init</code>, crie manualmente o <code>package.json</code>, com uma estrutura básica para um JSON, para que possamos começar a utilizá-lo. No arquivo <code>package.json</code>, adicione:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">{}</div></pre></td></tr></table></figure>

<p>É tudo o que precisamos para começar no <code>package.json</code>. Vamos agora instalar nossas dependências.</p>
<h2 id="Dependências">Dependências</h2>
<p>Para que possamos usar o Gulp no nosso projeto, precisamos instalar algumas dependências. Uma delas é o próprio Gulp, mas dessa vez, instalado de forma local:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp</div></pre></td></tr></table></figure>

<p>Repare na flag <code>--save-dev</code>. Na primeira vez, instalamos o Gulp globalmente (<code>-g</code>) para termos o comando <code>gulp</code> no terminal. Agora, instalamos ele localmente, em modo de desenvolvimento (<code>--save-dev</code>), para utilizar os métodos dele dentro do nosso <code>gulpfile.js</code>.</p>
<p>Usando essa flag, a dependência é salva automaticamente no nosso <code>package.json</code>. O porquê disso explicarei mais à frente.</p>
<p>Agora nosso arquivo <code>package.json</code> está assim:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">devDependencies</span>": <span class="value">{</span></div><div class="line">    "<span class="attribute">gulp</span>": <span class="value"><span class="string">"^3.8.10"</span></span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Todas as dependências que precisaremos para utilizar enquanto estivermos desenvolvendo devem ser instaladas com a flag <code>--save-dev</code>, que o NPM automaticamente vai salvar dentro dessa diretiva <code>devDependencies</code>.</p>
<p>Perceba também que foi criado um diretório <code>node_modules</code> na raiz do nosso projeto. Nesse diretório temos a seguinte estrutura:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">└── /node_modules</div><div class="line">    └── /gulp</div><div class="line">        └── // <span class="keyword">...</span> arquivos do gulp <span class="keyword">...</span></div></pre></td></tr></table></figure>

<p>Ou seja, quando instalamos algum módulo com o comando <code>npm install</code> ou <code>npm i</code>, o módulo fica no diretório <code>node_modules</code> (salvo quando instalamos globalmente).</p>
<p>Agora, no <code>gulpfile.js</code>, adicione:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Hello Gulp!'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Aqui é puro Javascript (no servidor, com NodeJS). Criamos uma variável <code>gulp</code>, que receberá o módulo <code>gulp</code>, que foi instalado localmente. Se você passa como parâmetro da função <code>require</code> somente uma string, sem definir caminho de arquivos (como <code>./</code>, <code>/</code> ou <code>../</code>, por exemplo), o NodeJS procura essa dependência dentro da pasta <code>node_modules</code>.</p>
<p>O <code>.js</code> no final do arquivo é opcional. E se vamos fazer <code>require</code> de um arquivo chamado <code>index.js</code>, o nome desse arquivo também é opcional.</p>
<p>Sabendo disso, podemos concluir que o <code>var gulp = require( &#39;gulp&#39; );</code> na verdade poderia ter sido chamado dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'./node_modules/gulp/index.js'</span> );</div></pre></td></tr></table></figure>

<p>O método <code>task()</code> do objeto <code>gulp</code> cria uma <em>task</em> que será executada. Como primeiro parâmetro, passamos o nome da task. Depois, uma função de callback que será executada quando a task for chamada.</p>
<p>Para chamar essa task, vamos executar no terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp default</div></pre></td></tr></table></figure>

<p>Ou somente:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure>

<p>Rodando o comando <code>gulp</code> sem nenhum parâmetro, ele deduz que você tem uma task chamada <code>default</code>, que é a task padrão do Gulp. Ou seja: para a task <code>default</code>, o nome da task, na chamada pelo terminal, é opcional.</p>
<p>Executando esse comando, temos o seguinte resultado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gulp</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Using gulpfile /var/www/<span class="number">01</span>-testes/test-gulp/gulpfile.js</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Starting <span class="string">'default'</span>...</div><div class="line">Hello Gulp!</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Finished <span class="string">'default'</span> after <span class="number">476</span> μs</div></pre></td></tr></table></figure>

<p>Na linha <code>2</code>, ele mostra que encontrou o arquivo <code>gulpfile.js</code> e mostra o caminho do arquivo;<br>Na linha <code>3</code>, a task que está sendo executada;<br>Na linha <code>4</code>, printa a mensagem que colocamos em <code>console.log()</code>;<br>Na linha <code>5</code> é mostrado o tempo que demorou para finalizar a task.</p>
<p>Reparou no tempo? Sabe o que significa o símbolo <code>μs</code>? MICROSSEGUNDOS!</p>
<p>Isso mesmo: microssegundos! A task roda muito rápido mesmo.</p>
<p><em>Mas essa task não faz nada.. só executa um console.log() ¬¬</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/nothing.gif" alt="Não faz nada"></p>
<p>Concordo! Mas você verá que, quando estivermos executando tarefas de verdade, o tempo ainda assim será muito baixo! :D</p>
<p>Agora que já aprendemos como criar uma task no Gulp, que tal fazer algo realmente útil?</p>
<h2 id="Minificar_CSS">Minificar CSS</h2>
<p>Vamos ver como podemos automatizar a minificação dos nossos arquivos CSS. Primeiro vamos instalar o módulo de minificação:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-minify-css</div></pre></td></tr></table></figure>

<p>Agora vamos adicionar o módulo ao nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/css/**/*.css'</span> )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p><em>Perae, tem muita coisa acontecendo aqui! Como vou saber tudo isso?</em></p>
<p>Calma gafanhoto, vou explicar linha por linha:</p>
<p>Já sabemos como funciona o <code>gulp.task()</code>.<br>A task vai definir uma ação que queremos fazer. A nossa ação será <strong>minificar o CSS</strong>.</p>
<p>Para isso, precisamos ter um CSS para minificar. Crie um diretório <code>src</code>, e dentro dele um diretório <code>css</code>. Esse será o nosso CSS fonte, onde iremos escrever nosso CSS todo organizado, com espaços necessários para fazer leitura, etc.</p>
<p>Esse CSS será minificado, e a versão minificada ficará no diretório <code>public/css</code> (não precisa criar esse diretório).</p>
<p>Agora, crie um arquivo chamado <code>style.css</code> no diretório <code>src/css</code> e coloque o seguinte código:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> purple</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fc0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">4rem</span> fantasy</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Voltando ao <code>gulpfile.js</code>: com o <code>gulp.src()</code>, você passa o source do CSS, ou seja, os arquivos que você está editando. Você pode passar um array de arquivos ou então utilizar o <em>glob pattern</em> para percorrer recursivamente o diretório <code>./src/css</code> em busca de todos os arquivos <code>.css</code>.</p>
<p>Usar o <code>.pipe()</code>, é o mesmo que você usar o <code>|</code> (pipe) na linha de comando do Unix: a saída do primeiro comando é a entrada do próximo.</p>
<p>Então, pegamos os arquivos <code>.css</code> que estão em <code>./src/css</code>, e mandamos executar o <code>minifycss()</code> em todos eles. A saída será todos os arquivos minificados. Mas eles ainda estão em memória, e precisam ser salvos em algum lugar.</p>
<p>É aí que vamos passá-los novamente para frente com o <code>.pipe()</code> para o comando <code>gulp.dest()</code>, que vai definir o caminho de destino dos nossos arquivos minificados.</p>
<p>Estamos dizendo ao Gulp que queremos que esses arquivos sejam salvos (fisicamente) no diretório <code>./public/css</code>.</p>
<p>Ao executar novamente o comando <code>gulp</code> no terminal, olhe agora como ficou nossa estrutura de diretórios:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── gulpfile.js</div><div class="line">├── /node_modules</div><div class="line">│   └── // ... dependências ...</div><div class="line">├── package.json</div><div class="line">├── /public</div><div class="line">│   └── /css</div><div class="line">│       └── style.css</div><div class="line">└── /src</div><div class="line">    └── /css</div><div class="line">        └── style.css</div></pre></td></tr></table></figure>

<p>Não precisamos criar o diretório <code>public</code>, pois ele foi automaticamente criado pelo Node.</p>
<p>E o nosso arquivo <code>style.css</code>, no diretório gerado <code>public</code>, ficou assim:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value">purple</span></span>;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#fc0</span></span></span>;<span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">4rem</span> fantasy</span></span></span>}</div></pre></td></tr></table></figure>

<p>Coisa linda, não? Sem precisar lembrar de passar em nenhum <em>minify online</em> xD</p>
<p>E olha o tempo que foi executado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gulp</div><div class="line">[18:49:35] Using gulpfile /var/www/01-testes/test-gulp/gulpfile.js</div><div class="line">[18:49:35] Starting 'default'...</div><div class="line">[18:49:35] Finished 'default' after 16 ms</div></pre></td></tr></table></figure>

<p>O Gulp sempre vai executar muito rápido, independente da quantidade de tasks que você tiver, pois ele usa <a href="https://github.com/vitorbritto/art-of-node/blob/master/readme.pt-br.md#streams" target="_blank" rel="external"><em>strems</em></a> e trabalha com alta concorrência, ou seja, ele executa muitas coisas em paralelo, deixando tudo muito mais rápido.</p>
<h2 id="Usando_pré-processadores">Usando pré-processadores</h2>
<p>Para usar pré-processadores com Gulp também é bastante simples. Vou mostrar como utilizá-lo com o <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>.</p>
<p>Primeiro, precisamos instalar o módulo do <strong>Stylus</strong>. Execute no terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-stylus</div></pre></td></tr></table></figure>

<p>Vamos tirar o <code>minifycss</code> por enquanto, para facilitar a visualização do nosso exemplo. No seu <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Agora nós buscamos todos os arquivos em <code>./src/stylus</code>, com a extensão <code>.styl</code>. Vamos criar esse diretório, e um arquivo chamado <code>style.styl</code>, com o seguinte conteúdo:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span></div><div class="line">  <span class="attribute">background</span> purple</div><div class="line">  <span class="attribute">color</span> <span class="id">#fc0</span></div><div class="line">  <span class="attribute">font</span> 4rem fantasy</div></pre></td></tr></table></figure>

<p>No <strong>Stylus</strong>, não precisamos de <em>brackets</em> (<code>{}</code>), nem dois-pontos (<code>:</code>) para separar as propriedades. E ele funciona com base na indentação.</p>
<p>Mas não é obrigatório remover. Você pode escrever no formato do CSS também, sem problemas.</p>
<p>Agora, execute novamente o <code>gulp</code> no terminal. Você terá no diretório <code>public/css</code> um arquivo <code>.css</code> compilado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#800080</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fc0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">4rem</span> fantasy</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Normalmente, os módulos retornam funções, que podem receber parâmetros para configurar o que eles devem fazer. Nesse caso do Stylus, nós só passamos a função <code>stylus()</code>, para que o arquivo <code>.styl</code> transforme corretamente o código em CSS válido. Mas e se quisermos minificar? </p>
<p>Temos duas formas de fazer isso: a primeira é passando parâmetros na função <code>stylus()</code>. No <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line"></div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus({ compress: <span class="literal">true</span> }) )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Passamos como objeto da função <code>stylus()</code> o parâmetro <code>compress: true</code>. Executando o <code>gulp</code> novamente no terminal, agora temos nosso CSS em <code>public/css</code> minificado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#800080</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fc0</span></span></span>;<span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">4rem</span> fantasy</span></span></span>}</div></pre></td></tr></table></figure>

<p>A outra forma de minificar, é usando o <code>minifycss</code> (que já vimos no primeiro exemplo), junto com o Stylus. Ficaria assim o seu <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>É interessante lembrar que a ordem que você coloca as coisas interfere no resultado final. Porque colocamos o <code>minifycss()</code> depois do <code>stylus()</code>?</p>
<p>Por que a função <code>stylus()</code> vai retornar o CSS gerado. Se colocarmos o <code>minifycss()</code> antes dele, o CSS ainda não foi gerado, e o arquivo final não será minificado. Muita atenção com isso, ok? ;)</p>
<p><em>Mas qual seria a vantagem de utilizar o <code>minifycss()</code> junto com o <code>stylus()</code>, sendo que o <code>stylus()</code> já tem uma opção de comprimir os arquivos?</em></p>
<p>O Stylus tem uma diretiva chamada <code>@css</code>, onde você pode colocar códigos CSS “brutos”. Imagine que você baixou um plugin para usar no seu app ou site, e esse veio com um CSS. Se você está assistindo arquivos <code>.styl</code>, não é legal misturar as coisas, e colocar um arquivo <code>.css</code> junto. </p>
<p>O que você pode fazer é usar a extensão <code>.styl</code> e colocar todo o seu CSS na diretiva <code>@css</code>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">css</span> </span>{</div><div class="line">  <span class="class">.plugin</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff0</span></span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Só que, tudo o que está dentro dessa diretiva, o Stylus ignora. Ele não compila, nem ao menos minifica. Assim, seu código ficaria com parte dele sem minificar. Então você pode usar em conjunto o <code>compress: true</code> do <code>stylus()</code> e o <code>minifycss()</code> para minificar o que restar dessas diretivas ;)</p>
<p><em>Ok, já sei como minificar CSS e também como utilizar um pré-processador. Mas toda vez que eu alterar um arquivo, vou precisar ficar rodando o comando <code>gulp</code> no terminal? Não tem como o Gulp ficar assistindo meus arquivos, como o SASS faz?</em></p>
<h2 id="O_método_watch()">O método <code>watch()</code></h2>
<p>Claro que tem! Você pode usar o método <code>watch()</code> pra isso! Vamos mudar um pouco a estrutura do nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'css'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.watch( <span class="string">'./src/stylus/**/*.styl'</span>, [ <span class="string">'css'</span> ] );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>O que eu fiz foi, basicamente, renomear a task <code>default</code> para <code>css</code> e criar uma nova task <code>default</code>, com o <code>watch()</code>.</p>
<p>No primeiro parâmetro, você passa os arquivos que você quer assistir. E no segundo, você passa um array de tasks que precisam ser executadas toda vez que você fizer alguma alteração nesses arquivos do primeiro parâmetro! Bem simples!</p>
<p>Agora, executando o comando <code>gulp</code> no terminal, ele não vai te devolver o prompt para voltar a digitar, pois estará assistindo às alterações dos arquivos. Para parar o <code>watch()</code>, use o <code>Ctrl + C</code>.</p>
<p>Esses são os métodos que você precisa conhecer do Gulp:</p>
<ul>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname-deps-fn" target="_blank" rel="external">gulp.task()</a>: cria uma task;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpsrcglobs-options" target="_blank" rel="external">gulp.src()</a>: caminho dos fontes;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpdestpath-options" target="_blank" rel="external">gulp.dest()</a>: caminho de destino;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb" target="_blank" rel="external">gulp.watch()</a>: assiste os arquivos.</li>
</ul>
<p>Cada um desses métodos tem mais opções além das que mostrei. A documentação completa está no links de cada um, acima. Mas para começar a brincar com Gulp, isso que eu mostrei já vai resolver!</p>
<p>Mais ainda temos outro problema: toda vez que estivermos compilando os arquivos, precisamos olhar no terminal para ver se já compilou, voltar no browser e recarregar a tela. Olhar no terminal, ir até o browser, recarregar a tela… infinitamente. Não dá pra melhorar isso?</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/watching.gif" alt="Assistindo"></p>
<h2 id="Notificações">Notificações</h2>
<p>O Gulp tem vários <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">plugins</a> que você pode utilizar. Um que é muito útil, é o <code>gulp-notify</code>. Ao finalizar uma task (ou no momento em que você escolher que quer executá-lo), ele utiliza as notificações do seu sistema para dizer que aquele momento chegou! Vamos instalar ele agora mesmo!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-notify</div></pre></td></tr></table></figure>

<p>Agora vamos configurar nosso <code>gulpfile.js</code>, adicionando o <code>notify()</code> para mostrar uma mensagem assim que o nosso arquivo CSS for gerado:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line"><span class="keyword">var</span> notify = <span class="built_in">require</span>( <span class="string">'gulp-notify'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'css'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) )</div><div class="line">    .pipe( notify( <span class="string">'CSS OK!'</span> ) );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.watch( <span class="string">'./src/stylus/**/*.styl'</span>, [ <span class="string">'css'</span> ] );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Agora, executando o comando <code>gulp</code> novamente, temos a notificação:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulp-notify.jpg" alt="Notificação com gulp-notify"></p>
<p>Uhuull!!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/uhul.gif" alt="Uhuull!!"></p>
<h2 id="Plugins">Plugins</h2>
<p>O Gulp tem milhões de outros plugins que você pode usar. Para encontrar todos os plugins homologados, acesse: <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">http://gulpjs.com/plugins/</a></p>
<p>Se não encontrar um plugin que você precisa, você pode facilmente usar algum módulo do NodeJS para criar sua tarefa, já que você escreve o seu <code>gulpfile.js</code> em puro NodeJS. Todos os pacotes do Node você encontra em <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></p>
<p>Na página do plugin, tanto no NPM como no Github, você vai encontrar a documentação de como utilizá-lo. Não tem segredo.</p>
<h2 id="A_flag_—save-dev">A flag —save-dev</h2>
<p>Lembra que instalamos todas as nossas dependências com a flag <code>--save-dev</code>? Porque isso é importante?</p>
<p>Como você pôde perceber, todas as dependências ficam listadas no arquivo <code>package.json</code>. Se você quiser começar um novo projeto, e for utilizar as mesmas configurações que você utilizou da última vez, você só precisa executar dois simples passos:</p>
<ol>
<li>Copiar os arquivos <code>package.json</code> e <code>gulpfile.js</code> para o diretório do novo projeto;</li>
<li>Executar o comando <code>npm i</code>.</li>
</ol>
<p>Fazendo isso, o NPM irá ler o seu <code>package.json</code> e, todos os módulos encontrados em <code>dependencies</code> e <code>devDependencies</code> serão automaticamente instalados. Você não precisa nem copiar a pasta node_modules (que ficará bem grande com o tempo), pois ela será criada automaticamente ao executar o <code>npm i</code> :D</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Existem vários plugins que irão facilitar o seu dia-a-dia usando o GulpJS. Nos próximos artigos, vou mostrar alguns deles, que acho bastante importante utilizar, mostrando também algumas boas práticas de como você poderá organizar suas tasks para que seu <code>gulpfile.js</code> não fique gigantesco. Fique ligado!</p>
<p>O que achou do GulpJS? Já conhecia? Utiliza outro task runner? Gostaria de compartilhar como é seu <em>workflow</em>? Comente! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs.png" alt=""></p>
<p>Em 2014 <a href="https://github.com/fdaciuk/talks" target="_blank" rel="external">palestrei em alguns eventos</a> evangelizando a galera sobre o uso do <a href="http://gulpjs.com/" target="_blank" rel="external">GulpJS</a>. Hoje resolvi transformar essa palestra em post, para facilitar futuras consultas e poder fazer outros posts falando mais a fundo sobre GulpJS e seus plugins!</p>
<p>Mas precisamos começar de algum lugar! Vem comigo? :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="task runner" scheme="http://blog.da2k.com.br/tags/task-runner/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Como criar Extensões para o Google Chrome]]></title>
    <link href="http://blog.da2k.com.br/2015/01/23/como-criar-extensoes-para-o-google-chrome/"/>
    <id>http://blog.da2k.com.br/2015/01/23/como-criar-extensoes-para-o-google-chrome/</id>
    <published>2015-01-23T00:00:00.000Z</published>
    <updated>2015-01-23T01:10:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/chrome-extensions.jpg" alt="Chrome Extension"></p>
<p>Sabe quando você está usando um aplicativo web, e percebe que falta alguma funcionalidade que, ao seu ver, você conseguiria resolver facilmente com <strong>Javascript</strong>? Mas como você não trabalha na empresa que criou o aplicativo, você fica de mãos atadas e diz: “- Eu mesmo vou fazer um aplicativo desses. Do zero!”, mas não faz, porque vai tomar muito tempo, ae você procrastina e continua chorando porque aquele app deveria ter a funcionalidade que você quer?</p>
<p><strong>Seus problemas acarabam!</strong> Agora você pode criar uma <strong>Chrome Extension</strong>, usando somente Javascript (que lindo isso cara *_* ) e EXTENDENDO as funcionalidades do aplicativo que você usa conforme a sua necessidade! </p>
<p>Curtiu a ideia? Quer aprender a fazer? Vem comigo xD</p>
<a id="more"></a>

<h2 id="Motivação">Motivação</h2>
<p>O que me motivou a criar uma <em>Chrome Extension</em> foi o <a href="http://grooveshark.com/" target="_blank" rel="external">Grooveshark</a>. É a ferramenta que mais gosto pra passar o dia todo ouvindo música - sem propagandas - e programando :D</p>
<p>Só que ele tem um problema: a cada <strong>x</strong> minutos (não tenho certeza se é 15 ou 30), ele pára de tocar e pergunta: “- Você ainda está aí?”; e para voltar a tocar, você precisa clicar no botão “Resume” ¬¬</p>
<p>Sério, já passei algumas horas do dia com o fone apertando o ouvindo, no silêncio, porque estava focando em algum código, e quando percebi o Grooveshark já havia parado a muito tempo.</p>
<p>Então pensei comigo: “- Por que não criar uma extensão do Chrome que clique nesse botão <strong>Resume</strong> pra mim?” E <a href="https://github.com/fdaciuk/dont-stop-grooveshark/" target="_blank" rel="external">foi exatamente o que eu fiz!</a></p>
<h2 id="Por_onde_começar">Por onde começar</h2>
<p>O Google tem um <a href="https://developer.chrome.com/extensions/getstarted" target="_blank" rel="external">guia</a> para que você possa desenvolver sua própria extensão, mas como está em Inglês, resolvi escrever esse artigo, até pra mostrar algumas <a href="#Surpresinha"><em>surpresinhas</em></a> que você não espera quando vai fazer uma treta dessas xD</p>
<p>Vamos começar então criando um diretório para nossa extensão e um arquivo <code>manifest.json</code>.</p>
<h2 id="O_arquivo_manifest-json">O arquivo manifest.json</h2>
<p>Esse arquivo não é nada mais que um JSON, onde ficarão os metadados relacionados à sua extensão: nome da extensão, descrição, versão, permissões, etc. <a href="https://developer.chrome.com/extensions/manifest" target="_blank" rel="external">Nesse link</a> você encontra todos os metadados que podem ser incluídos no <code>manifest.json</code>.</p>
<p>Vou mostrar os exemplos baseados no <a href="https://github.com/fdaciuk/dont-stop-grooveshark/" target="_blank" rel="external"><strong>Don’t stop Grooveshark</strong></a>. O <code>manifest.json</code> ficará assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  <span class="string">"name"</span>: <span class="string">"Don't stop Grooveshark"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.2"</span>,</div><div class="line">  <span class="string">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Google Chrome Extension that don't leaves Grooveshark stop playing."</span>,</div><div class="line">  <span class="string">"icons"</span> : {</div><div class="line">    <span class="string">"16"</span> : <span class="string">"icon128.png"</span>,</div><div class="line">    <span class="string">"48"</span> : <span class="string">"icon128.png"</span>,</div><div class="line">    <span class="string">"128"</span> : <span class="string">"icon128.png"</span></div><div class="line">  },</div><div class="line">  <span class="string">"content_scripts"</span>: [{</div><div class="line">    <span class="string">"matches"</span>: [ <span class="string">"*://grooveshark.com/*"</span> ],</div><div class="line">    <span class="string">"js"</span>: [ <span class="string">"dont-stop-grooveshark.js"</span> ]</div><div class="line">  }]</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Vou comentar os parâmetros que não são tão óbvios, ok?</p>
<h3 id="mainfest_version">mainfest_version</h3>
<p>Esse parâmetro recebe um número inteiro, que representa a versão do mainfesto que o sua extensão está usando. A partir do <em>Chrome 18</em>, a versão <code>1</code> foi depreciada. Você deveria sempre usar a <code>2</code> a partir de então.</p>
<h3 id="icons">icons</h3>
<p>O ícone da sua extensão, que será mostrado na Chrome Store, ou quando sua extensão for mostrada na barra de extensões do <em>Chrome</em>.</p>
<p>É recomendado que você tenha ao menos o tamanho de ícone em <code>128x128px</code>. Se possível, passe todos os tamanhos pedidos (16x16, 48x48, 128x128), pois o <em>Chrome</em> irá selecionar o que for mais apropriado para o momento que ele precisar ser apresentado.</p>
<h3 id="content_scripts">content_scripts</h3>
<p><em><strong>Content scripts</strong> is where the magic happens!</em> Aqui é o lugar onde você pode adicionar seus próprios <em>scripts</em> ou <em>css</em> e adicioná-los à alguma página na web.</p>
<p>A propriedade <code>matches</code> recebe um array de domínios que sua extensão precisa de permissão para acessar. </p>
<p>A propriedade <code>js</code> recebe um array de arquivos JS que serão incluídos quando esses domínios forem acessados.</p>
<p>Você ainda pode ter uma propriedade <code>css</code>, que também receberá um array de arquivos CSS para estilizar a página do(s) domínio(s) setado(s) em <code>matches</code>.</p>
<p>Basicamente é isso que você vai precisar. Se estiver pensando em fazer uma extensão um pouco mais complexa, talvez você precise setar mais alguns parâmetros, que podem ser encontrados <a href="https://developer.chrome.com/extensions/content_scripts" target="_blank" rel="external">nesse link</a>.</p>
<h2 id="A_magia">A magia</h2>
<p>No caso do <strong>Don’t stop Grooveshark</strong>, o que eu preciso que seja feito é que, sempre que aparecer na tela aquela mensagem perguntando se eu ainda estou ali, o botão de <strong>Resume</strong> deve receber um clique automaticamente.</p>
<p>O código utilizado no arquivo <code>dont-stop-grooveshark.js</code> é o seguinte:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( doc )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"Don't stop Grooveshark! ;)"</span> );</div><div class="line">  <span class="keyword">var</span> $resumePlaybackButton;</div><div class="line">  </div><div class="line">  <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $resumePlaybackButton = doc.querySelector( <span class="string">'[data-translate-text="LB_INTERACTION_TIME_RESUME"]'</span> );</div><div class="line">    <span class="keyword">if</span>( ! $resumePlaybackButton ) {</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    $resumePlaybackButton.click();</div><div class="line">  }, <span class="number">3000</span>);</div><div class="line">})( <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>A única referência que eu tenho para o botão de <strong>Resume</strong>, é um atributo <code>data-translate-text</code>, com o conteúdo <code>LB_INTERACTION_TIME_RESUME</code>. Então o que eu faço é, a cada 3 segundos, verificar se esse botão está na tela e dar um clique nele. Se ele não estiver, não faço nada. :)</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Tendo acesso direto a um app, e a possibilidade de injetar Javascript, você pode fazer QUALQUER COISA que quiser! Existem algumas extensões que precisam de uma tela específica para setar algumas configurações. Isso também é possível fazer, mas vou deixar pra mostrar isso em um próximo artigo :D</p>
<h2 id="Surpresinha">Surpresinha</h2>
<p>Para subir uma <em>Chrome Extension</em> para o <a href="">respositório oficial</a>, você precisa pagar <strong>U$ 5</strong> <del>doletas</del>. Apesar do preço baixo, - e você só precisar pagar esse valor uma única vez - ele serve como uma “segurança” para que muitos desenvolvedores não postem qualquer porcaria lá (apesar de já ter :P). Imagina se não cobrassem :P</p>
<p>Depois desse pagamento, você pode fazer quantas extensões quiser, e subir à vontade!</p>
<p>Por hoje é isso! </p>
<p>E aí: para qual app você vai fazer a sua extensão? :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/chrome-extensions.jpg" alt="Chrome Extension"></p>
<p>Sabe quando você está usando um aplicativo web, e percebe que falta alguma funcionalidade que, ao seu ver, você conseguiria resolver facilmente com <strong>Javascript</strong>? Mas como você não trabalha na empresa que criou o aplicativo, você fica de mãos atadas e diz: “- Eu mesmo vou fazer um aplicativo desses. Do zero!”, mas não faz, porque vai tomar muito tempo, ae você procrastina e continua chorando porque aquele app deveria ter a funcionalidade que você quer?</p>
<p><strong>Seus problemas acarabam!</strong> Agora você pode criar uma <strong>Chrome Extension</strong>, usando somente Javascript (que lindo isso cara *_* ) e EXTENDENDO as funcionalidades do aplicativo que você usa conforme a sua necessidade! </p>
<p>Curtiu a ideia? Quer aprender a fazer? Vem comigo xD</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="chrome extension" scheme="http://blog.da2k.com.br/tags/chrome-extension/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Clean code em Javascript - troque seu if gigante por métodos]]></title>
    <link href="http://blog.da2k.com.br/2015/01/22/clean-code-em-javascript-troque-seu-if-gigante-por-metodos/"/>
    <id>http://blog.da2k.com.br/2015/01/22/clean-code-em-javascript-troque-seu-if-gigante-por-metodos/</id>
    <published>2015-01-22T00:00:00.000Z</published>
    <updated>2015-01-23T01:10:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/clean-code.jpg" alt="Clean Code"></p>
<p>Como você viu no título, hoje vou falar sobre uma forma interessante de deixar suas funções / métodos pequenos, usando-os no lugar de if’s gigantescos!</p>
<a id="more"></a>

<p>Quando você tem um código limpo, fica muito mais fácil entender como tudo acontece, facilitando a manutenção do código.</p>
<p>Para usar a técnica de <em>Clean Code</em> você precisa deixar de pensar da forma tradicional, e adotar um novo paradigma. Sair da casinha, pensar fora da caixa!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/guga-alves-thinking-outside-of-the-box.jpg" alt="Guga Alves pensando fora da caixa"></p>
<p>Imagine a seguinte situação: você tem um código que precisa executar uma ação baseada no retorno de uma requisição. Essa requisição retornará um valor qualquer, dentre vários conhecidos.</p>
<p>Vamos tomar como exemplo uma base de usuários, onde deve ser executada uma ação conforme o papel (<code>role</code>) desse usuário:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( UsersResource )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> users = UsersResource.get();</div><div class="line">      </div><div class="line">      users.forEach(<span class="function"><span class="keyword">function</span><span class="params">( user )</span> </span>{</div><div class="line">        <span class="keyword">if</span>( <span class="string">'superadmin'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'SUPERADMIN'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'admin'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'ADMIN'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'editor'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'EDITOR'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'author'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'AUTHOR'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'contributor'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'CONTRIBUTOR'</span>, user );</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'subscriber'</span> === user.role ) {</div><div class="line">          <span class="built_in">console</span>.log( <span class="string">'SUBSCRIBER'</span>, user );</div><div class="line">        }</div><div class="line">      });</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  App().init();</div><div class="line">})( <span class="built_in">window</span>.UsersResource );</div></pre></td></tr></table></figure>

<p>E o <code>UsersResource</code>, que consulta informações em um servidor (por exemplo), e retorna um objeto com várias informações sobre usuários cadastrados no seu sistema e seus respectivos papéis:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( win )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">UsersResource</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">  </div><div class="line">    $public.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> [</div><div class="line">        { name: <span class="string">'John'</span>, role: <span class="string">'superadmin'</span> },</div><div class="line">        { name: <span class="string">'Mark'</span>, role: <span class="string">'admin'</span> },</div><div class="line">        { name: <span class="string">'Robert'</span>, role: <span class="string">'editor'</span> },</div><div class="line">        { name: <span class="string">'Ana'</span>, role: <span class="string">'author'</span> },</div><div class="line">        { name: <span class="string">'Paul'</span>, role: <span class="string">'contributor'</span> },</div><div class="line">        { name: <span class="string">'Mariah'</span>, role: <span class="string">'subscriber'</span> }</div><div class="line">      ];</div><div class="line">    };</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="built_in">window</span>.UsersResource = UsersResource();</div><div class="line">})( <span class="built_in">window</span> );</div></pre></td></tr></table></figure>

<p>E aí, teve um <em>Déjà vu</em>? Quantas vezes já escrevemos códigos como esse? Muito fácil de ler não é? #sqn.<br>Todo o nosso código está centralizado em um único método - <code>$public.init()</code>. Temos várias coisas acontecendo aqui, mas ainda está tudo muito acoplado.</p>
<p>Que tal se tentarmos com <code>switch</code>?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( UsersResource )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> users = UsersResource.get();</div><div class="line">      </div><div class="line">      users.forEach(<span class="function"><span class="keyword">function</span><span class="params">( user )</span> </span>{</div><div class="line">        <span class="keyword">switch</span>( user.role ) {</div><div class="line">          <span class="keyword">case</span> <span class="string">'superadmin'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'SUPERADMIN'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'admin'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'ADMIN'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'editor'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'EDITOR'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'author'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'AUTHOR'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'contributor'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'CONTRIBUTOR'</span>, user );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="string">'subscriber'</span>:</div><div class="line">            <span class="built_in">console</span>.log( <span class="string">'SUBSCRIBER'</span>, user );</div><div class="line">        }</div><div class="line">      });</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  App().init();</div><div class="line">})( <span class="built_in">window</span>.UsersResource );</div></pre></td></tr></table></figure>

<p>Melhorou um pouco, mas ainda está tudo muito acoplado. Imagine se você precisar adicionar mais <strong>roles</strong> para os usuários.. pense no tamanho da zona que não vai virar?</p>
<p><em>Como resolver então?</em></p>
<h2 id="Funções_/_Métodos">Funções / Métodos</h2>
<p>O Javascript é uma linguagem funcional, então porque escrever código imperativo? Vamos nos aproveitar do que o JS tem de melhor: as funções!</p>
<p>A versão <em>clean code</em> do nosso código ficaria assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( UsersResource )</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">App</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    $public.init = <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>{</div><div class="line">      $private.getUsers();</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.getUsers = <span class="function"><span class="keyword">function</span> <span class="title">getUsers</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> users = UsersResource.get();</div><div class="line">      users.forEach(<span class="function"><span class="keyword">function</span><span class="params">( user )</span> </span>{</div><div class="line">        <span class="keyword">var</span> role = $private.makeFirstLetterCapitalized( user.role );</div><div class="line">        $private[ <span class="string">'handle'</span> + role ]( user );</div><div class="line">      });</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.makeFirstLetterCapitalized = <span class="function"><span class="keyword">function</span> <span class="title">makeFirstLetterCapitalized</span><span class="params">( word )</span> </span>{</div><div class="line">      <span class="keyword">return</span> word.charAt(<span class="number">0</span>).toUpperCase() + word.slice(<span class="number">1</span>);</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleSuperadmin = <span class="function"><span class="keyword">function</span> <span class="title">handleSuperadmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'SUPERADMIN'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleAdmin = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'ADMIN'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleEditor = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'EDITOR'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleAuthor = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'AUTHOR'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleContributor = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'CONTRIBUTOR'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    $private.handleSubscriber = <span class="function"><span class="keyword">function</span> <span class="title">handleAdmin</span><span class="params">( user )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( <span class="string">'SUBSCRIBER'</span>, user );</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  }</div><div class="line">  </div><div class="line">  App().init();</div><div class="line">})( <span class="built_in">window</span>.UsersResource );</div></pre></td></tr></table></figure>

<p>Aumentou um pouco a quantidade de linhas, mas é visível a separação de responsabilidades aqui. Cada método faz somente uma coisa. Primeiro, tiramos toda a lógica do método <code>init()</code>, e o deixamos somente para chamar outros métodos. </p>
<p>Criamos um método <code>makeFirstLetterCapitalized()</code>, para transformar a primeira letra do <code>role</code> em maiúscula, pois padronizamos assim nossos métodos que irão manipular as informações desses usuários.</p>
<p>Separamos os métodos de manipulação para cada <code>role</code>, seguindo o padrão nomeado de <code>handle{Role}</code>, onde <code>{Role}</code> é o papel do usuário, com a primeira letra maíuscula.</p>
<p>Fica claro que isso não é solução para todos os casos, e você não vai trocar todos os seus <code>if&#39;s</code> por métodos. Mas essa é uma solução diferente para um problema bastante comum, que você pode aplicar no seu dia-a-dia, deixando seu código muito mais legível :)</p>
<p>Essa foi uma dica simples, escrita em um código Javascript, mas que é possível aplicar também em praticamente qualquer outra linguagem. </p>
<p>Gostou do post? Tem algo a compartilhar sobre o assunto? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/clean-code.jpg" alt="Clean Code"></p>
<p>Como você viu no título, hoje vou falar sobre uma forma interessante de deixar suas funções / métodos pequenos, usando-os no lugar de if’s gigantescos!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="clean code" scheme="http://blog.da2k.com.br/tags/clean-code/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress: conhecendo o Painel - Parte 2]]></title>
    <link href="http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/"/>
    <id>http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/</id>
    <published>2015-01-21T00:00:00.000Z</published>
    <updated>2015-01-21T02:32:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-meet-the-panel-part2.jpg" alt="WordPress: Conhecendo o Painel"></p>
<p>Na primeira parte vimos várias funcionalidades do Painel do WP. Nesse post vamos continuar a saga e desvendar tudo o que podemos usar para personalizar nosso tema! Bora? ;)</p>
<a id="more"></a>

<h2 id="Adicionar_midia">Adicionar midia</h2>
<p>Ainda dentro da página de <strong>Adicionar novo post</strong>, para adicionar imagens, galerias, URLs embedadas, clique no botão <strong>Adicionar midia</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-add-media.png" alt=""></p>
<p>Você verá uma janela modal como essa:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-media-modal.png" alt=""></p>
<p>Aqui você consegue arrastar/soltar ou clicar no botão e selecionar arquivos em vários formatos para subir. O WordPress faz upload desses arquivos no diretório <code>wp-content/uploads</code>, organizando os diretórios por <code>ano/mês</code>.</p>
<p>Todos os arquivos que você faz upload por essa tela, podem ser vistos no menu <strong>Midia</strong>.</p>
<p>Ao selecionar uma imagem, temos algumas opções como setar Título, <em>alt</em> (texto alternativo), descrição para a imagem, tamanho que será inserido no post, etc. Mas também temos a opção de editar a imagem ali mesmo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-selected-image-options.png" alt=""></p>
<p>Com essa opção de edição, podemos recortar, girar, fazer um <em>flip</em> na imagem e redimensionar:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-edit-media.jpg" alt=""></p>
<p>Para recortar, clique e arraste com o mouse em cima da imagem. O primeiro botão será habilitado. Clique nele para recortar. Salve.</p>
<p>Agora você pode inserir sua imagem editada diretamente pelo Painel! :)</p>
<h2 id="Aparência">Aparência</h2>
<p>Escolhendo a opção <strong>Personalizar</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-customize.png" alt=""></p>
<p>O WP nos dá várias opções para personalizarmos nosso tema, e esse poder aumenta quando estamos usando as funções do WP!</p>
<h2 id="Menus">Menus</h2>
<p>Quando você ainda não tem nenhum menu, essa tela é mostrada, para que você possa criá-lo: </p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-new-menu.png" alt=""></p>
<p>Simplesmente escolha um nome e crie um menu. Depois você poderá relacionar esse menu com alguma área de menu disponível no seu site. Isso também é controlado pelo tema:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-menu-position.png" alt=""></p>
<p>E adicionando um item ao menu, você ainda tem algumas opções. Essa é a tela de <strong>Opções de tela</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-menu-options.png" alt=""></p>
<p>Que deixa o seu item de menu assim:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-item-menu.png" alt=""></p>
<p>Com essas opções, você já consegue dar um <em>up</em> ao seu menu padrão! Ainda tem muitas outras customizações possíveis, quando se extende a classe <em>Walker</em> do menu. Mas isso é assunto para um próximo post :D</p>
<h2 id="Plugins">Plugins</h2>
<p>Plugins são parte essencial do WordPress. Com eles, você pode extender funcionalidades para usar em qualquer projeto! Quem sabe em breve não começamos uma série falando só sobre plugins? ;)</p>
<h2 id="Usuários">Usuários</h2>
<p>Nessa tela você adiciona informações específicas referentes ao seu perfil de usuário, ou aos usuários cadastrados no site, se você tiver permissão para tal.</p>
<p>É possível adicionar alguns campos personalizados na tela de Perfil de Usuário. Vamos ver como fazer isso também, em breve!</p>
<h2 id="Ferramentas">Ferramentas</h2>
<p>Em Ferramentas, você tem algumas opções que facilitam na hora de publicar um novo post, importar conteúdo de outra instalação ou outro CMS e exportar os dados do seu site.</p>
<p>E, finalmente:</p>
<h2 id="Configurações">Configurações</h2>
<p>Essa área você precisa conhecer muito bem. Tem muita coisa aqui, então vamos aos poucos:</p>
<h3 id="Geral">Geral</h3>
<p><strong>Título do Site</strong> e <strong>Descrição</strong> são autodescritivos. Você adiciona um título geral para o seu site, e uma descrição curta para o mesmo. Você pode usar isso em vários lugares, como nas metatags <strong>title</strong> e <strong>meta content</strong> para ser mostrado pelos buscadores ao procurarem conteúdo relacionado com seu site!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-address.png" alt=""></p>
<p>Aqui temos duas opções de configuração de URL: <strong>Endereço do WordPress</strong> e <strong>Endereço do site</strong>.</p>
<p>Normalmente essas duas URLs são iguais. Mas vou explicar o porquê de ter duas:</p>
<h3 id="Endereço_do_WordPress">Endereço do WordPress</h3>
<p>É o endereço onde estão os arquivos do WordPress. Imagine que você instalou o WP em <code>http://seusite.com.br/wordpress</code>. Esse deve ser o endereço nesse campo.</p>
<h3 id="Endereço_do_site">Endereço do site</h3>
<p>Mas você não quer que o seu site seja acessado via <code>http://seusite.com.br/wordpress</code>, e sim pela raiz, em <code>http://seusite.com.br</code>. Fazendo algumas pequenas configurações, você passa a URL da raiz do seu site nesse campo e consegue fazer com que o WordPress continue instalado em <code>/wordpress</code>, mas responda na raiz ao acessar seu site :)</p>
<p>Não esqueça de setar corretamente as opções de fuso horário, para que as postagens do seu blog e os seus agendamentos de posts possam estar no horário e data corretos:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-location.png" alt=""></p>
<h3 id="Escrita,_Leitura_e_discussão">Escrita, Leitura e discussão</h3>
<p>Basicamente algumas configurações para formatação de posts, categoria padrão para posts. Em leitura, você pode escolher um template que será sua home, - mostraremos em breve - quantidade de posts por página, etc.</p>
<p>E discussão é sobre os comentários. Tem várias coisas ali que podemos configurar. Veremos com calma quando estivermos desenvolvendo a parte de comentários do nosso tema.</p>
<h3 id="Midia">Midia</h3>
<p>O WP tem 3 formatos padrão de imagens: miniatura, médio e grande. Quando você faz upload de uma imagem, o WP mantém o tamanho default da imagem, e gera outras três imagens com esses tamanhos (se a imagem original for maior que eles, obviamente).</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-image-size.png" alt=""></p>
<p>Se não precisar de algum desses formatos, você pode deixá-los com valor <strong>zero (0)</strong>, que o WP não vai gerar imagens novas com esse tamanho.</p>
<p>Para criar novos tamanhos, temos funções que poderemos utilizar no nosso tema.</p>
<p>Uma das coisas mais importantes sobre o Painel, mas que poucas pessoas sabem, é que o WordPress utiliza o tamanho médio setado nessa tela para mostrar as miniaturas em todo o Painel. Quando você vai adicionar uma imagem no post, sabe as miniaturas que aparecem? Elas são geradas com base nessa configuração.</p>
<p>Sabe as miniaturas que aparecem na tela de Mídia? Mesma coisa. Então, nunca zere os valores do formato <strong>médio</strong>.</p>
<h3 id="Links_permanentes">Links permanentes</h3>
<p>Para que seu site possa trabalhar com URLs amigáveis, selecione um formato de permalinks diferente do padrão. </p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-permalinks.png" alt=""></p>
<p>Fazendo isso, você ainda libera duas outras URLs por padrão: <code>/admin</code> e <code>/login</code> agora acessam o Painel do WP, ao invés de precisar lembrar de <code>/wp-admin</code> ou <code>/wp-login.php</code> :D</p>
<p>Você também pode, opcionalmente, selecionar uma estrutura para as categorias e tags:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-base-category-tags.png" alt=""></p>
<p>Se alguma opção ficou para trás, voltaremos para vê-la quando precisarmos dela ao desenvolver nosso tema :)</p>
<p>Tudo isso pode parecer besteira, mas muitos desenvolvedores se batem por não conhecer essas simples opções, que dão ao cliente final um poder gigantesco de personalização do seu tema, sem que o dev tenha muito mais trabalho por isso :)</p>
<p>Espero que esteja gostando da série! No próximo artigo, iremos voltar com o <em>hands on</em>! Temos muito código pra escrever!</p>
<p>Até lá! :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/</a></p>
<p><strong> Próximo post:</strong><br><a href="">EM BREVE!</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-meet-the-panel-part2.jpg" alt="WordPress: Conhecendo o Painel"></p>
<p>Na primeira parte vimos várias funcionalidades do Painel do WP. Nesse post vamos continuar a saga e desvendar tudo o que podemos usar para personalizar nosso tema! Bora? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress: conhecendo o Painel - Parte 1]]></title>
    <link href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/"/>
    <id>http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/</id>
    <published>2015-01-20T00:00:00.000Z</published>
    <updated>2015-01-21T02:32:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-meet-the-panel-part1.jpg" alt="WordPress: Conhecendo o Painel"></p>
<p>Para que possamos usar o máximo de recursos possíveis no nosso tema, precisamos conhecer de onde eles vêm. Que tal fazer um <em>tour</em> pelo Painel do WordPress e conhecer tudo o que podemos fazer lá dentro? Vem comigo :D</p>
<a id="more"></a>

<p>Para entrar no Painel, precisamos acessar a área de login - em <code>/wp-admin</code> ou <code>/wp-login.php</code>.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-login.png" alt="WordPress Login"></p>
<p>Entramos com o usuário e senha criados na instalação do nosso site. E temos a seguinte tela:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-panel.png" alt="Painel logado"></p>
<p>Como nosso tema ainda está <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">no início</a>, e ele está ativo, ainda não temos todas as opções possíveis do painel disponíveis. Então vamos ativar o tema padrão do WP e ver as funcionalidades que ele nos oferece no Painel!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-themes.png" alt="Aparência &gt; Temas"></p>
<p>Ativando o tema padrão, já podemos ver algumas opções a mais no menu <strong>Aparência</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-appearance-menu.png" alt="Painel com mais opções"></p>
<p>Mas vamos começar do início!</p>
<h2 id="Painel">Painel</h2>
<p>Começando pelo painel, você deve ter reparado nos itens <strong>“Opções de tela”</strong> e <strong>“Ajuda”</strong>, na lateral superior direita, né? Mas alguma vez você se interessou em clicar ali? Experimente!</p>
<p>Em <strong>Opções de tela</strong>, temos alguns checkboxes:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-screen-options.png" alt="Opções de tela"></p>
<p>Você pode marcá-los ou desmarcá-los para mostrar os widgets que aparecem nessa tela! Se você reparar, na maior parte das telas dentro do Painel do WP, você tem esse link <strong>Opções de tela</strong>, que tem as opções personalizadas para cada tela, em específico. Por exemplo: quando você está editando algum post, essa opção mostra todos os <em>metaboxes</em> disponíveis para o post :)</p>
<p>O menu <strong>Ajuda</strong> também tem algumas opções interessantes. Se você não sabe para que serve qualquer um desses widgets mostrados, nesse menu você vai encontrar a resposta ;)</p>
<p>Fique ligado nas telas que têm essas opções. Elas podem ser a resposta que você está a algum tempo procurando!</p>
<h2 id="Posts">Posts</h2>
<p>Na listagem de posts, temos as opções:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-list-posts.png" alt="Listagem de posts"></p>
<p>No link <strong>Opções de tela</strong>, temos as opções que aparecem na coluna da tabela. É importante frisar que, quando você marca ou desmarca alguma dessas opções, o WordPress se lembra da próxima vez que você entra nessa tela, e traz exatamente como você deixou quando saiu :)</p>
<p>Ao passar o mouse sobre um post, nos é mostrado um menu com algumas opções: “Editar”, “Edição Rápida”, “Lixeira”, “Ver”.</p>
<p><strong>Editar</strong> faz o mesmo efeito de clicar no título do post: abre para edição;</p>
<p><strong>Edição Rápida</strong> abre algumas opções que você pode editar rapidamente:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-quick-edition.png" alt="Edição Rápida"></p>
<p><strong>Lixeira</strong> é óbvio;</p>
<p><strong>Ver</strong> mostra o template renderizando esse post no seu tema.</p>
<p>Ainda na tabela, se você clicar no ícone dos comentários, você é direcionado para a página de comentários, com os mesmos filtrados somente para esse post :D<br>Mais uma vez, o link <strong>Ajuda</strong> pode tirar algumas dúvidas básicas que alguém pode não saber.</p>
<h2 id="Adicionar_novo_post">Adicionar novo post</h2>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-post-metabox.png" alt="Metabox novo post"></p>
<p>Essas caixas - marcada em vermelho na imagem acima - na tela de “Novo Post”, são as <em>metaboxes</em>. São caixas com algumas metainformações relacionadas ao post. Normalmente são utilizadas para categorizar o post.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-post-category-tag.png" alt="Taxonomias padrão"></p>
<p>Você provavelmente já conhece essas metaboxes acima: <strong>Categorias</strong> e <strong>Tags</strong>. Elas são taxonomias padrão do WP.</p>
<p><em>O que são taxonomias?</em></p>
<blockquote>

<p><strong>Taxonomia</strong> (do grego τασσεῖν ou tassein = “para classificar” e νόμος ou nomos = lei, ciência, administrar), foi a ciência de classificar organismos vivos (alfa taxonomia). Mais tarde a palavra foi aplicada em um sentido mais abrangente, podendo aplicar-se a uma das duas: classificação de coisas ou aos princípios subjacentes da classificação. Quase tudo - objetos animados, inanimados, lugares e eventos - pode ser classificado de acordo com algum esquema taxonômico. </p>
<footer><strong>Wikipedia</strong><cite><a href="http://pt.wikipedia.org/wiki/Taxonomia_(geral)" target="_blank" rel="external">pt.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<p>Então as taxonomias, dentro do WP, servem para classificar, ou categorizar o seu conteúdo. Você pode criar suas próprias taxonomias baseadas no padrão de <strong>Categorias</strong> ou <strong>Tags</strong>, que o WP oferece, ou então criar uma nova <em>metabox</em> e adicionar qualquer tipo de campo de formulário necessário para fazer uma categorização personalizada: <em>select</em>, <em>radio button</em>, <em>checkbox</em>, etc. Veremos como fazer isso nos próximos posts da série.</p>
<h2 id="O_editor">O editor</h2>
<p>No editor de texto do WordPress, temos algumas features bem interessantes. Uma delas é o <strong>oEmbed</strong>.</p>
<p>Essa feature nos permite <em>embedar</em> facilmente algumas coisas, somente pela URL.</p>
<p>Por exemplo, um vídeo do Youtube. Escolha um vídeo qualquer, copie a URL e cole no editor. Olha só o que acontece:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-oembed-youtube.png" alt="oEmbed Youtube"></p>
<p>Automagicamente, o vídeo é embedado e renderizado! Em tempo real! Você pode dar o play no vídeo ali mesmo!</p>
<p>Não era esse vídeo que você queria adicionar? Clicando em cima do vídeo, você ainda tem duas opções: <strong>editar</strong> ou <strong>remover</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-oembed-youtube-edit-remove.png" alt="Editar ou remover oEmbed"></p>
<p>Tudo isso sem plugin algum! Coisa linda, não? ;)</p>
<p><em>Que legal! E dá pra fazer isso só com o Youtube?</em></p>
<p>Claro que não jovem! Você consegue embedar <a href="http://codex.wordpress.org/Embeds#Okay.2C_So_What_Sites_Can_I_Embed_From.3F" target="_blank" rel="external">milhares de outras coisas</a>, incluindo um <em>tweet</em>, por exemplo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-oembed-twitter.png" alt="oEmbed Twitter"></p>
<p>E você ainda pode <strong>criar</strong> seu próprio <em>embed</em>! Vamos aprender a fazer isso também :D</p>
<p>Tá curtindo a série? Então fica ligado que continuaremos falando sobre o Painel no próximo post, trazendo mais novidades! Até lá :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/21/wordpress-conhecendo-o-painel-parte-2/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-meet-the-panel-part1.jpg" alt="WordPress: Conhecendo o Painel"></p>
<p>Para que possamos usar o máximo de recursos possíveis no nosso tema, precisamos conhecer de onde eles vêm. Que tal fazer um <em>tour</em> pelo Painel do WordPress e conhecer tudo o que podemos fazer lá dentro? Vem comigo :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Parâmetros na URL]]></title>
    <link href="http://blog.da2k.com.br/2015/01/19/segredos-do-github-parametros-na-url/"/>
    <id>http://blog.da2k.com.br/2015/01/19/segredos-do-github-parametros-na-url/</id>
    <published>2015-01-19T00:00:00.000Z</published>
    <updated>2015-01-19T01:33:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github-url-params.jpg" alt=""></p>
<p>Hoje mais um segredo será revelado! Vamos brincar com alguns parâmetros na URL e ver o que podemos fazer com eles :D</p>
<a id="more"></a>

<h2 id="Ignorando_espaços_em_branco_no_commit">Ignorando espaços em branco no commit</h2>
<p>Sabe quando você tem um commit onde tem um monte de espaços em branco sendo removidos, e fica difícil visualizar onde realmente foi alterado algum código? Se você passar <code>?w=1</code> na URL, o Github ignora os espaços em branco, e mostra só o que realmente é necessário:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-whitespace.png" alt="Remover espaços em branco"></p>
<h2 id="Tamanho_da_tabulação">Tamanho da tabulação</h2>
<p>Manja aquele código indentado com 4 tabs que fica com tamanho de 8 em qualquer outro lugar diferente do seu editor?</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/url-8-tabs.png" alt="Tab 8"></p>
<p>Passando o parâmetro <code>?ts=4</code>, o Github mostra o código indentado com o valor passado para o parâmetro <code>ts</code>.<br>Nesse caso, <code>4</code>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/url-4-tabs.png" alt="Tab 4"></p>
<h2 id="Separar_commits_por_autor">Separar commits por autor</h2>
<p>Quer rever os só os seus commits que você fez naquele projeto open source, mas tem outros milhões de colaboradores?</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/all-commits.png" alt="Todos os commits"></p>
<p>Adicione o parâmetro <code>?author=username</code>, passando o seu username do Github para mostrar só os seus:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/author-commits.png" alt="Commits de um usuário específico"></p>
<p>E chega por hoje! xD</p>
<p>Até o próximo <strong>Segredos do Github</strong>!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github-url-params.jpg" alt=""></p>
<p>Hoje mais um segredo será revelado! Vamos brincar com alguns parâmetros na URL e ver o que podemos fazer com eles :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RequireJS - Carregando Javacript sob demanda]]></title>
    <link href="http://blog.da2k.com.br/2015/01/18/requirejs-carregando-javacript-sob-demanda/"/>
    <id>http://blog.da2k.com.br/2015/01/18/requirejs-carregando-javacript-sob-demanda/</id>
    <published>2015-01-18T00:00:00.000Z</published>
    <updated>2015-01-18T14:11:37.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/requirejs.png" alt="RequireJS"></p>
<p>Quando você tem uma aplicação onde vai usar muito código Javascript, é sempre importante pensar na performance. Mas além disso, para que sua aplicação possa escalar, seu código precisa ser modular.</p>
<p>Nesse momento surgem as dúvidas:<br><em>- Escrevo todo o meu código em um arquivo só, e minifico para não sobrecarregar os requests do browser?</em><br><em>- Separo em vários arquivos para facilitar o desenvolvimento, sem me preocupar com a quantidade de requests http?</em></p>
<p><em>Qual a melhor solução?</em></p>
<a id="more"></a>

<p>A resposta correta é: depende do seu projeto. Você vai precisar medir isso e ver o que é mais viável no seu caso. O problema que temos hoje é que, quando você adiciona vários scripts no seu app, ao baixar um arquivo <code>css</code> ou <code>js</code>, o browser bloqueia a renderização do navegador até que o arquivo seja baixado e parseado. Feito isso, a renderização continua, e faz o mesmo ao encontrar o próximo script.</p>
<p>Isso deixa sua aplicação muito lenta, pois cada request pode levar em torno de 20ms a 120ms, dependendo do tamanho do arquivo, para executar esse processo. Se saber mais sobre performance, e porque isso acontece, leia <a href="http://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/" target="_blank" rel="external">este artigo.</a>.</p>
<h2 id="RequireJS">RequireJS</h2>
<p>Mas ao carregarmos nossos scripts assincronamente, o browser não bloqueia a renderização, mas faz o download e parse dos arquivos em segundo plano, disponibilizando-os assim que estiverem prontos.</p>
<p>E o <a href="http://requirejs.org/" target="_blank" rel="external"><strong>RequireJS</strong></a> nos ajuda exatamente com isso: usando uma estrutura modular, baseada no <a href="http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/" target="_blank" rel="external">AMD</a>, você usa <em>Dependency Injection</em>, para que os scripts necessários sejam carregados de forma assincrona, sob demanda, ou seja, você só vai carregar um arquivo quando realmente precisar dele!</p>
<p>A configuração inicial do RequireJS é um pouco chata, mas vou mostrar o passo-a-passo para que você possa utilizar ele em seus projetos sem maiores problemas :D</p>
<h2 id="Obtendo_o_RequireJS">Obtendo o RequireJS</h2>
<p>Você pode baixar o RequireJS à partir <a href="http://requirejs.org/docs/download.html#requirejs" target="_blank" rel="external">desse link</a>. Pode baixar a <a href="http://requirejs.org/docs/release/2.1.15/minified/require.js" target="_blank" rel="external">versão minificada aqui</a>.</p>
<p>Com o Require em mãos, vamos criar a seguinte estrutura de diretórios:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── index.html</div><div class="line">└── js</div><div class="line">    ├── App.js</div><div class="line">    ├── boot.js</div><div class="line">    ├── controllers</div><div class="line">    │   └── HomeController.js</div><div class="line">    └── vendor</div><div class="line">        ├── jquery.js</div><div class="line">        ├── lodash.js</div><div class="line">        └── require.js</div></pre></td></tr></table></figure>

<p>No diretório <code>js/vendor/</code> é onde iremos centralizar <em>libs</em> de terceiros. Baixe o <a href="http://jquery.com/" target="_blank" rel="external">jQuery</a> e a <a href="https://lodash.com/" target="_blank" rel="external">LoDash</a>, e adicione nesse diretório.</p>
<p>Na <code>index.html</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"pt-br"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>RequireJS<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">data-main</span>=<span class="value">"js/boot"</span> <span class="attribute">src</span>=<span class="value">"js/vendor/require.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Se você reparar na linha <code>9</code>, onde adicionamos o script do RequireJS, temos um atributo <code>data-main</code>. Esse atributo diz ao Require que, quando ele for baixado, esse é o arquivo que deve ser executado: <code>js/boot.js</code>. Então é nesse arquivo que nós iremos fazer nossas configurações iniciais. </p>
<p>O Require faz a adição do <code>.js</code> no final do arquivo, então sempre chame-o sem a extensão.</p>
<p>Se você abrir a aba <code>Network</code> no seu navegador, com a <code>index.html</code> do nosso projeto aberta, pode constatar que os dois arquivos foram baixados corretamente:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/bootjs.png" alt="boot.js"></p>
<p>Agora no <code>js/boot.js</code>, vamos iniciar as configurações:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>([ <span class="string">'vendor/jquery'</span> ], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'jQuery carregado!'</span>, $( <span class="built_in">document</span> ) );</div><div class="line">  });</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>O <strong>RequireJS</strong> tem 3 funções:</p>
<ul>
<li><code>require()</code> / <code>requirejs()</code> - Injeta um arquivo;</li>
<li><code>define()</code> - Cria um componente no padrão AMD.</li>
</ul>
<p>Para fazer a injeção de dependências, você pode usar tanto o <code>require()</code> quanto o <code>requirejs()</code>, que fazem exatamente a mesma coisa. </p>
<p><em>E pra quê duas funções que fazem a mesma coisa?</em></p>
<p>Porque você pode estar usando alguma outra lib que use a função <code>require()</code>. Nesse caso, o <strong>RequireJS</strong> não sobrescreve essa função, mas te dá a opção de usar <code>requirejs()</code> no lugar, mantendo tudo sob controle :)</p>
<p>A sintaxe das funções <code>require()</code> e <code>requirejs()</code> é a seguinte:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( deps, callback );</div></pre></td></tr></table></figure>

<p>E a sintaxe da função <code>define()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define( <span class="string">'moduleName'</span>, deps, callback );</div></pre></td></tr></table></figure>

<p>A única diferença das funções <code>require()</code> e <code>requirejs()</code> para a função <code>define()</code>, é que na <code>define()</code> você pode - opcionalmente - adicionar o nome do seu módulo.</p>
<p><em>E como saber quando usar <code>define</code> e quando usar <code>require</code> ou <code>requirejs</code>?</em></p>
<p>A regra basicamente é essa:</p>
<ul>
<li><code>define</code> será usado sempre no início de novos arquivos - levando em consideração que cada módulo será um arquivo;</li>
<li><code>require</code> ou <code>requirejs</code>, se você precisar injetar uma dependência no corpo de um módulo já existente.</li>
</ul>
<p>Ainda confuso? Quando estivermos criando nossos módulos, você vai entender melhor :)</p>
<h2 id="Entendendo_os_parâmetros">Entendendo os parâmetros</h2>
<p>O parâmetro <code>moduleName</code>, na função <code>define()</code>, é o nome do seu módulo.</p>
<p>No parâmetro <code>deps</code>, você vai passar um array de dependências. Coloque o caminho completo dos arquivos, tomando como base o caminho do arquivo chamado no atributo <code>data-main</code> do seu script. No nosso caso, o <code>js/boot.js</code>. E não é necessário adicionar o <code>.js</code> no final do arquivo.</p>
<p><strong>Nota:</strong> ainda que você vá utilizar somente uma dependência, é necessário utilizar a notação de array. Se não houver dependências (quando utilizar o <code>define()</code>), esse parâmetro é opcional. Nesse caso, passe somente a função de callback. E se você não tiver dependências e precisar retornar, por exemplo, somente um objeto, você pode passar ele diretamente para a função <code>define()</code>, sem precisar instanciar a função de callback:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define({</div><div class="line">  color: <span class="string">'black'</span>,</div><div class="line">  size: <span class="string">'large'</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p><em>Quer dizer que só no <code>require()</code> e <code>requirejs()</code> as dependências são obrigatórias?</em></p>
<p>Se não há a necessidade de injetar dependências, então você não precisará do <code>require</code> ;)</p>
<p>E o parâmetro <code>callback</code> é uma função que será executada assim que todas as dependências forem resolvidas (ou um objeto, como mostrado acima).</p>
<h2 id="require-config()"><code>require.config()</code></h2>
<p>As funções <code>require</code> e <code>requirejs</code> - a partir daqui vou parar de citar as duas. Quando eu me referir a <code>require</code>, estou falando das duas, ok? ;) - têm um método <code>config()</code>, onde você pode configurar algumas coisas para facilitar a injeção de dependências. Vamos adicionar essas configurações no nosso <code>js/boot.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>.config({</div><div class="line">    baseUrl: <span class="string">'./js'</span>,</div><div class="line">    paths: {</div><div class="line">      jquery: [</div><div class="line">        <span class="string">'https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min'</span>,</div><div class="line">        <span class="string">'vendor/jquery'</span></div><div class="line">      ],</div><div class="line">      lodash: <span class="string">'vendor/lodash'</span></div><div class="line">    }</div><div class="line">  });</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>([ <span class="string">'jquery'</span>, <span class="string">'lodash'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $, _ )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'jQuery carregado!'</span>, $( <span class="built_in">document</span> ) );</div><div class="line">  });</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>Primeiro vou explicar o parâmetro na função de callback do <code>require()</code>.</p>
<h2 id="Parâmetros_do_callback">Parâmetros do callback</h2>
<p>Quando uma dependência é injetada, o retorno dessa dependência pode ser obtido a partir dos parâmetros na função de callback. Os parâmetros do callback devem ser passados <strong>na mesma ordem</strong> das dependências injetadas.</p>
<p>No nosso primeiro exemplo, no início do artigo, fizemos a injeção do jQuery, mas não passamos parâmetro algum no callback. O código funciona corretamente porque o jQuery passa para o objeto <code>window</code> os objetos <code>jQuery</code> e <code>$</code>. Logo, você pode usar esses objetos globais. Mas, por questões de boas práticas e performance, é melhor você usar sempre objetos e variáveis locais. Nesse caso, no último exemplo, passamos como parâmetro para a função de callback o <code>$</code>, que recebe o <code>jquery</code> injetado, para que possamos usar <code>$</code> localmente.</p>
<p>Injetamos também a <code>lodash</code>, e passamos como parâmetro no callback o <code>_</code>, para ser usado também localmente.</p>
<h2 id="Agora_sim,_o_método_config()">Agora sim, o método <code>config()</code></h2>
<p>Como já havia dito, para fazer a injeção de dependências, o <strong>RequireJS</strong> toma como base o caminho do arquivo passado no parâmetro <code>data-main</code> do nosso script. Mas nós podemos passar um parâmetro <code>baseUrl</code> para setar manualmente esse caminho. A partir daí, todos os caminhos de scripts injetados tomam essa URL como base. Você pode passar tanto caminhos absolutos como relativos.</p>
<p>Para usar caminhos relativos com o <code>baseUrl</code>, a base será o caminho do HTML onde está inserido o <code>&lt;script&gt;</code> que chama o <strong>RequireJS</strong>.</p>
<p>A propriedade <code>paths</code> é um objeto, que recebe como chave uma referência para o módulo que será injetado, e como valor, a URL desse módulo. Isso facilita na hora da injeção, para que você não precise passar todo o caminho da dependência.</p>
<p>Se você voltar no primeiro exemplo, vai ver que injetamos o jQuery com <code>vendor/jquery</code>. Nesse segundo exemplo, usamos somente <code>jquery</code>, pois no <code>paths</code> já setamos o caminho completo.</p>
<p>Você deve ter percebido também que podemos usar um array como valor da dependência. O que o <strong>RequireJS</strong> faz nesse caso é tentar carregar os arquivos na ordem que está no array. Se a primeira URL falhar, ele tenta carregar a segunda, e assim por diante. No caso do jQuery, a vantagem é poder usar um CDN e, se esse método falhar, chamamos a lib localmente, em <code>vendor/jquery</code>.</p>
<p>A ideia de usar o <strong>RequreJS</strong> é basicamente essa. Mas para facilitar a visualização, vamos escrever um pouco mais de código, pois ainda não vimos a função <code>define()</code> em ação.</p>
<p>No nosso arquivo <code>js/App.js</code> coloque o seguinte código:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([ <span class="string">'jquery'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $ )</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Carregou App.js'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>E no arquivo <code>js/boot.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>.config({</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  });</div><div class="line">  </div><div class="line">  <span class="built_in">require</span>([ <span class="string">'jquery'</span>, <span class="string">'lodash'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $, _ )</span> </span>{</div><div class="line">    <span class="built_in">require</span>([ <span class="string">'App'</span> ]);</div><div class="line">  });</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>Perceba que podemos aninhar os métodos <code>require</code> para garantir que, ao carregar <code>js/App.js</code>, o <code>jquery</code> e a <code>lodash</code> já estejam carregados!</p>
<p>No arquivo <code>js/App.js</code>, nós usamos o <code>define</code> para definir esse módulo. Porque não utilizamos o <code>require</code>?</p>
<p>Por que esse módulo ainda não existe, e está sendo definido. Se eu precisar injetar dependências dentro do módulo, que dependam das dependências passadas no array do primeiro parâmetro, aí sim eu vou usar o <code>require()</code>. Ficou mais claro o uso deles agora?</p>
<p><em>Hey, mas você passou o <code>jquery</code> como dependência do módulo <code>App</code>. Isso não vai fazer o <strong>RequireJS</strong> trabalhar dobrado e baixar duas vezes o jQuery?</em></p>
<p>Não. Em cada módulo você deve injetar todas as dependências que você precisa usar internamente nele, ou que você precisa que estejam carregadas para usá-lo. O <strong>RequireJS</strong> se encarrega de - se essa dependência já tiver sido carregada antes - usar o arquivo que foi carregado da primeira vez.</p>
<p>Nesse nosso exemplo, o arquivo <code>js/boot.js</code> vai fazer o boot do <strong>RequireJS</strong>, e o <code>js/App.js</code> vai controlar toda a nossa aplicação.</p>
<p>Dentro do <code>js/App.js</code>, você pode escrever qualquer código Javascript para chamar os seus scripts sob demanda, somente quando necessário.</p>
<p>Vou deixar <a href="https://github.com/fdaciuk/workflow-requirejs" target="_blank" rel="external">nesse repositório</a> um exemplo de <em>workflow</em> com <strong>RequireJS</strong>, tomando como base os exemplos passados nesse artigo, mas com algumas coisas a mais, para que você possa se basear nele para montar seu próprio <em>workflow</em>, dependendo do seu projeto, ok?</p>
<p>Ficou com dúvidas? Poste nos comentários!</p>
<p>Até o próximo artigo!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/requirejs.png" alt="RequireJS"></p>
<p>Quando você tem uma aplicação onde vai usar muito código Javascript, é sempre importante pensar na performance. Mas além disso, para que sua aplicação possa escalar, seu código precisa ser modular.</p>
<p>Nesse momento surgem as dúvidas:<br><em>- Escrevo todo o meu código em um arquivo só, e minifico para não sobrecarregar os requests do browser?</em><br><em>- Separo em vários arquivos para facilitar o desenvolvimento, sem me preocupar com a quantidade de requests http?</em></p>
<p><em>Qual a melhor solução?</em></p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="requirejs" scheme="http://blog.da2k.com.br/tags/requirejs/"/>
    
      <category term="amd" scheme="http://blog.da2k.com.br/tags/amd/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Tabelas e Task lists]]></title>
    <link href="http://blog.da2k.com.br/2015/01/17/segredos-do-github-tabelas-e-task-lists/"/>
    <id>http://blog.da2k.com.br/2015/01/17/segredos-do-github-tabelas-e-task-lists/</id>
    <published>2015-01-17T00:00:00.000Z</published>
    <updated>2015-01-19T00:45:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github-tables-and-task-lists.jpg" alt="Segredos do Github"></p>
<p>Continuando a série, hoje vou mostrar algumas outras features legais que você pode usar no Github: <strong>tabelas</strong> e <strong>task lists</strong>!</p>
<a id="more"></a>

<h2 id="Task_lists">Task lists</h2>
<p>Sabe aquela <em>issue</em> que você abriu no Github e precisa quebrá-la em partes, mas não quer criar uma <em>issue</em> para cada coisa? Você pode usar as <strong>task lists!</strong></p>
<p>Basta você usar a notação <code>- [ ] Texto da task</code> (com um espaço dentro dos colchetes) para criar um checkbox desmarcado, ou então <code>- [x] Texto da task</code>, para um checkbox marcado. Exemplo:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>[ ] Comprar arroz</div><div class="line"><span class="bullet">- </span>[ ] Comprar feijão</div><div class="line"><span class="bullet">- </span>[ ] Comprar batata</div><div class="line"><span class="bullet">- </span>[x] Comprar macarrão</div></pre></td></tr></table></figure>

<p>Que resulta nisso:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/task-list-markdown.png" alt=""></p>
<p>Agora você não se perde mais xD</p>
<h2 id="Tabelas">Tabelas</h2>
<p>Para criar tabelas, também é bem simples:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alimentos | Preço</div><div class="line"><span class="horizontal_rule">--------- | ------</span></div><div class="line">Arroz     | R$ 10</div><div class="line">Feijão    | R$ 8</div><div class="line">Batata    | R$ 7</div><div class="line">Macarrão  | R$ 8</div></pre></td></tr></table></figure>

<p>O título da tabela é marcado com os traços <code>-</code> abaixo da palavra. O pipe <code>|</code> cria as colunas. Não é necessário alinhar com espaços, mas visualmente fica melhor. Não precisa fazer se tiver preguiça :P</p>
<p><strong>O resultado:</strong></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/table.png" alt="Tabela"></p>
<p><em>O preço ficou estranho alinhado à esquerda. Pra ficar alinhado à direita, tenho que fazer manualmente?</em></p>
<p>Não! Você consegue alinhar usando <code>:</code> nos traços que ficam abaixo do título da tabela. </p>
<p>Se usar <code>:</code> no lado esquerdo, o alinhamento será feito à esquerda (padrão);<br>Se usar <code>:</code> no lado direito, o alinhamento será feito à direita;<br>E para centralizar, use dos dois lados.</p>
<p><strong> Preço alinhado à direita:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alimentos | Preço</div><div class="line"><span class="horizontal_rule">--------- | ------:</span></div><div class="line">Arroz     | R$ 10</div><div class="line">Feijão    | R$ 8</div><div class="line">Batata    | R$ 7</div><div class="line">Macarrão  | R$ 8</div></pre></td></tr></table></figure>

<p><strong>Resultado:</strong></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/table-right.png" alt="Preços alinhados à direita"></p>
<p><strong>Nome dos alimentos centralizados e preço à direita:</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alimentos | Preço</div><div class="line">:-------: | ------:</div><div class="line">Arroz     | R$ 10</div><div class="line">Feijão    | R$ 8</div><div class="line">Batata    | R$ 7</div><div class="line">Macarrão  | R$ 8</div></pre></td></tr></table></figure>

<p><img src="http://blog.da2k.com.br/uploads/2015/01/table-center-right.png" alt="Nome dos alimentos centralizados e preços alinhados à direita"></p>
<p>Era isso! Até o próximo post :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github-tables-and-task-lists.jpg" alt="Segredos do Github"></p>
<p>Continuando a série, hoje vou mostrar algumas outras features legais que você pode usar no Github: <strong>tabelas</strong> e <strong>task lists</strong>!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="markdown" scheme="http://blog.da2k.com.br/tags/markdown/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Variáveis]]></title>
    <link href="http://blog.da2k.com.br/2015/01/16/segredos-do-github-variaveis/"/>
    <id>http://blog.da2k.com.br/2015/01/16/segredos-do-github-variaveis/</id>
    <published>2015-01-16T00:00:00.000Z</published>
    <updated>2015-01-17T03:02:25.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github.png" alt="Segredos do Github"></p>
<p>Hoje estarei dando início a uma nova série de posts chamada <strong>Segredos do Github</strong>. Essa série trará dicas de coisas <em>secretas</em> que vão dar um <em>up</em> na sua forma de utilizar a rede social mais adorada pelos nerds do mundo todo: o <a href="https://github.com" target="_blank" rel="external">Github</a>!</p>
<a id="more"></a>

<p>E o primeiro post será sobre… <strong>variáveis</strong>! Isso mesmo! Sabia que é possível utilizar variáveis nos seus arquivos Markdown?</p>
<p>Vou mostrar como e porque você deveria utilizar!</p>
<p>Imagine que o seu Markdown tem vários links. Vou dar um exemplo do meu repositório do <a href="https://github.com/fdaciuk/getmodule" target="_blank" rel="external">getmodule</a>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="header"># Get Module</span></div><div class="line">  </div><div class="line"><span class="blockquote">&gt; Include local NodeJS modules relative to your root path</span></div><div class="line">  </div><div class="line">[<span class="link_label">![NPM version</span>](<span class="link_url">https://badge.fury.io/js/getmodule.svg?style=flat</span>)](<span class="link_url">https://npmjs.org/package/getmodule</span>)</div><div class="line">[<span class="link_label">![Build Status</span>](<span class="link_url">https://travis-ci.org/fdaciuk/getmodule.svg</span>)](<span class="link_url">https://travis-ci.org/fdaciuk/getmodule</span>)</div><div class="line">[<span class="link_label">![Coverage Status</span>](<span class="link_url">https://img.shields.io/coveralls/fdaciuk/getmodule.svg?style=flat</span>)](<span class="link_url">https://coveralls.io/r/fdaciuk/getmodule?branch=master</span>)</div><div class="line">[<span class="link_label">![Code Climate</span>](<span class="link_url">https://codeclimate.com/github/fdaciuk/getmodule/badges/gpa.svg?style=flat</span>)](<span class="link_url">https://codeclimate.com/github/fdaciuk/getmodule</span>)</div><div class="line">[<span class="link_label">![NPM</span>](<span class="link_url">https://nodei.co/npm/getmodule.png?downloads=true&downloadRank=true&stars=true</span>)](<span class="link_url">https://nodei.co/npm/getmodule/</span>)</div></pre></td></tr></table></figure>

<p>Como você pode ver, no início do arquivo <strong>README.md</strong>, eu tenho alguns badges com links apontando para versão do módulo no <a href="https://www.npmjs.com/" target="_blank" rel="external">NPM</a>, Status do <a href="https://travis-ci.com/" target="_blank" rel="external">TravisCI</a>, Status do <a href="http://blog.da2k.com.br/2015/01/07/code-coverage-em-javascript/" target="_blank" rel="external">Code Coverage</a> no <a href="https://coveralls.io/" target="_blank" rel="external">Coveralls</a>, <a href="https://codeclimate.com/" target="_blank" rel="external">Code Climate</a>, etc. </p>
<p>Isso acaba ficando bastante verboso no seu arquivo e, se você precisar usar a mesma URL em outro lugar do seu <strong>README</strong>, terá que repetí-la.</p>
<h2 id="Variáveis">Variáveis</h2>
<p>Mas podemos usar um segredo guardado a sete chaves pelos Ninjas do Github, que são as variáveis! </p>
<p><em>Tá, fala logo, como que usa isso! ¬¬</em></p>
<p>Calma, vou dizer :P</p>
<p>No final do seu arquivo, você coloca as suas variáveis nesse formato:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="link_reference">nome-da-variavel</span>]:<span class="link_url"> valor-da-variavel</span></div></pre></td></tr></table></figure>

<p>E para usar, só fazer assim:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[nome-da-variavel]</div></pre></td></tr></table></figure>

<p>No caso do arquivo Markdown acima, aquele trecho de código ficaria assim:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="header"># Get Module</span></div><div class="line">  </div><div class="line"><span class="blockquote">&gt; Include local NodeJS modules relative to your root path</span></div><div class="line">  </div><div class="line">[<span class="link_label">![NPM version</span>][<span class="link_reference">npm-version-image</span>]][<span class="link_reference">npm-version-url</span>]</div><div class="line">[<span class="link_label">![Build Status</span>][<span class="link_reference">travis-image</span>]][<span class="link_reference">travis-url</span>]</div><div class="line">[<span class="link_label">![Coverage Status</span>][<span class="link_reference">coveralls-image</span>]][<span class="link_reference">coveralls-url</span>]</div><div class="line">[<span class="link_label">![Code Climate</span>][<span class="link_reference">codeclimate-image</span>]][<span class="link_reference">codeclimate-url</span>]</div><div class="line">[<span class="link_label">![NPM</span>][<span class="link_reference">npm-image</span>]][<span class="link_reference">npm-url</span>]</div><div class="line">  </div><div class="line">[<span class="link_reference">npm-version-image</span>]:<span class="link_url"> https://badge.fury.io/js/getmodule.svg?style=flat</span><span class="link_url"></span></div><div class="line">[npm-version-url]: https://npmjs.org/package/getmodule<span class="link_url"></span></div><div class="line">[travis-image]: https://travis-ci.org/fdaciuk/getmodule.svg<span class="link_url"></span></div><div class="line">[travis-url]: https://travis-ci.org/fdaciuk/getmodule<span class="link_url"></span></div><div class="line">[coveralls-image]: https://img.shields.io/coveralls/fdaciuk/getmodule.svg?style=flat<span class="link_url"></span></div><div class="line">[coveralls-url]: https://coveralls.io/r/fdaciuk/getmodule?branch=master<span class="link_url"></span></div><div class="line">[npm-image]: https://nodei.co/npm/getmodule.png?downloads=true&downloadRank=true&stars=true<span class="link_url"></span></div><div class="line">[npm-url]: https://nodei.co/npm/getmodule/<span class="link_url"></span></div><div class="line">[codeclimate-image]: https://codeclimate.com/github/fdaciuk/getmodule/badges/gpa.svg?style=flat<span class="link_url"></span></div><div class="line">[codeclimate-url]: https://codeclimate.com/github/fdaciuk/getmodule</div></pre></td></tr></table></figure>

<p>Da hora não? ;)</p>
<p>Curtiu? Paia? Comente!</p>
<h3 id="Update">Update</h3>
<p>Como algumas pessoas comentaram, isso não é algo específico do Github, mas funciona em alguns outros lugares que seguem a <a href="http://daringfireball.net/projects/markdown/syntax#link" target="_blank" rel="external">especificação do Markdown</a>.</p>
<p>Ou seja: o foco da série é no Github, mas você pode encontrar também outros lugares onde essas dicas também funcionarão :D</p>
<p>Até o próximo post falando sobre os <strong>Segredos do Github</strong> :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/secrets-of-github.png" alt="Segredos do Github"></p>
<p>Hoje estarei dando início a uma nova série de posts chamada <strong>Segredos do Github</strong>. Essa série trará dicas de coisas <em>secretas</em> que vão dar um <em>up</em> na sua forma de utilizar a rede social mais adorada pelos nerds do mundo todo: o <a href="https://github.com" target="_blank" rel="external">Github</a>!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="markdown" scheme="http://blog.da2k.com.br/tags/markdown/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Como ser um dev frontend usando Linux]]></title>
    <link href="http://blog.da2k.com.br/2015/01/15/como-ser-um-dev-frontend-usando-linux/"/>
    <id>http://blog.da2k.com.br/2015/01/15/como-ser-um-dev-frontend-usando-linux/</id>
    <published>2015-01-15T00:00:00.000Z</published>
    <updated>2015-01-15T01:40:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/linux.jpg" alt=""></p>
<p>Muita gente me pergunta:<br>“<em>Você trabalha com frontend e usa Linux? Como faz pra usar Photoshop?</em>“</p>
<p>Como se frontend só trabalhasse com Photoshop :P<br>Mas vem comigo que te mostro ;)</p>
<a id="more"></a>

<p>Trabalhar com desenvolvimento frontend envolve muito código, por isso Linux - ao menos pra mim - é a melhor solução. Usar uma distribuição que não te deixe na mão e facilite a instalação de pacotes é essencial. No momento estou usando duas distros: <a href="http://ubuntugnome.org/" target="_blank" rel="external"><strong>Ubuntu Gnome</strong></a> - porque o <a href="https://unity.ubuntu.com/" target="_blank" rel="external"><strong>Unity</strong></a> é muito palha :P - e <a href="http://elementaryos.org/" target="_blank" rel="external"><strong>Elementary OS</strong></a>.</p>
<p>As duas resolvem bem qualquer tipo de problema. </p>
<p>Uso o <a href="https://apps.ubuntu.com/cat/applications/precise/terminator/" target="_blank" rel="external">Terminator</a> no lugar do terminal padrão do Ubuntu (dica do <a href="https://github.com/caarlos0/" target="_blank" rel="external">Carlos Becker</a>, que inclusive tem uma coleção de <a href="https://github.com/caarlos0/dotfiles" target="_blank" rel="external">dotfiles</a> bem da hora xD).</p>
<p>Para codar, <strong>Sublime Text</strong> com algumas <a href="https://gist.github.com/fdaciuk/8b3269a3d797ee723672" target="_blank" rel="external">configurações específicas</a>.</p>
<p><a href="https://apps.ubuntu.com/cat/applications/shutter/" target="_blank" rel="external">Shutter</a>, para tirar prints da tela.</p>
<p><a href="https://apps.ubuntu.com/cat/applications/gimp/" target="_blank" rel="external">Gimp</a> para tratar alguma imagem - não fico mexendo muito com imagens, uso mais para fazer as capas dos posts do blog :P</p>
<p><a href="https://apps.ubuntu.com/cat/applications/fogger/" target="_blank" rel="external">Fogger</a> para criar apps a partir de web apps - um que faz uma frente é o <a href="http://devdocs.io/" target="_blank" rel="external">DevDocs.io</a> :)</p>
<p><em>Mas e quando você recebe um layout no Photoshop, como você abre os PSDs?</em></p>
<p>Bom, já rodei Photoshop no Wine, - fica razoavelmente bom, com poucos bugs, mas fica pesado - já testei em máquina virtual, mas fica lento também. Até pouco tempo atrás, essas eram as únicas soluções.</p>
<p>Mas - por incrível que pareça - a Adobe pensou nos devs frontend que, como eu, gostam de usar Linux e só usam Photoshop para fazer recorte de imagens, pegar medidas, fontes, tamanhos de fontes, cores, etc., e lançou um serviço <strong>lindo</strong> chamado <a href="https://projectparfait.adobe.com/" target="_blank" rel="external">Project Parfait</a>, onde você faz exatamente isso: pode fazer upload de um PSD (ou vários), e extrair cores, fontes, exportar imagens, etc.</p>
<p>Agora você não tem mais desculpinha pra ficar usando Windows! E nem falo nada de programador BACKEND que usa Windows! :P</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/its-not-windows.jpg" alt="Don&#39;t Panic - It&#39;s not Windows"></p>
<p>Mas brincadeiras à parte, use o sistema que você se sentir mais confortável, e te fizer mais produtivo! :D <span style="color: #f0f0f0">Desde que não seja Windows.</span></p>
<p>E você, qual o seu sistema operacional? E qual o seu workflow? Comenta ae! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/linux.jpg" alt=""></p>
<p>Muita gente me pergunta:<br>“<em>Você trabalha com frontend e usa Linux? Como faz pra usar Photoshop?</em>“</p>
<p>Como se frontend só trabalhasse com Photoshop :P<br>Mas vem comigo que te mostro ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="linux" scheme="http://blog.da2k.com.br/tags/linux/"/>
    
      <category term="workflow" scheme="http://blog.da2k.com.br/tags/workflow/"/>
    
      <category term="frontend" scheme="http://blog.da2k.com.br/categories/frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress: o arquivo functions.php]]></title>
    <link href="http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/"/>
    <id>http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/</id>
    <published>2015-01-14T00:00:00.000Z</published>
    <updated>2015-01-20T02:59:11.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-functions-php.jpg" alt="WordPress - O arquivo functions.php"></p>
<p>O <strong>functions.php</strong> é o canal que liga o seu tema a todas as coisas legais que o WP tem a oferecer! Códigos personalizados, estrutura de arquivos… todo tipo de manipulação que você imagina no seu site WordPress, você faz através do <strong>functions.php</strong>. Vamos conhecê-lo? ;)</p>
<a id="more"></a>

<p>O <strong>functions.php</strong> é um arquivo que fica na raiz do seu tema WordPress, e ele é carregado antes de qualquer arquivo de template do tema.</p>
<p>Sem perder tempo, vamos então criá-lo!</p>
<h2 id="Segurança">Segurança</h2>
<p>Uma pequena pausa para tratar de uma melhoria para segurança: no post anterior, comentei sobre como previnir acesso direto a um arquivo do seu tema, lembra? Pois o <strong>Pedro Diaz</strong> fez um comentário muito relevante:</p>
<blockquote>
<p>Uma dúvida: eu poderia colocar este código em um arquivo .php e somente dar um include nos outros arquivos?</p>
</blockquote>
<p>E a resposta é: SIM, é possível!</p>
<p>Para manter a organização do nosso tema, vamos adicionar nossos códigos personalizados em um diretório chamado <code>functions</code>, e criar um arquivo chamado <code>security.php</code>. A estrutura de arquivos do nosso tema deve estar assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .editorconfig</div><div class="line">├── footer.php</div><div class="line">├── functions</div><div class="line">│   └── security.php</div><div class="line">├── functions.php</div><div class="line">├── header.php</div><div class="line">├── index.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Criamos o arquivo <code>functions.php</code> e o arquivo <code>security.php</code>. Então transferimos nosso código que faz o redirect para esse arquivo <code>security.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">if</span>( ! defined( <span class="string">'ABSPATH'</span> ) ) {</div><div class="line">    header( <span class="string">'Location: /00-opensource/wordpress/'</span> );</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><em>Ei, você esqueceu de fechar o <code>&lt;?php</code></em>?</p>
<p>Não! Essa é uma boa prática no desenvolvimento com PHP. Sempre que você tiver um arquivo que só irá conter código PHP, você não precisa (e não deve) fechar com a tag <code>?&gt;</code>, pois, se esse arquivo tiver a tag de fechamento e você esquecer um espaço ou quebra de linha após essa tag; e ele for carregado antes de qualquer outro arquivo que faça alguma modificação de <code>headers</code>, você terá um erro como esse:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">Erro</span> PHP: Cannot modify header information – headers already sent</div></pre></td></tr></table></figure>

<p>Agora você precisa somente fazer o include do arquivo <code>security.php</code> nos seus arquivos, ao invés de adicionar o <code>if</code> todo :)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">&lt;?php</span> <span class="keyword">require_once</span> <span class="string">'functions/security.php'</span> <span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>

<p>Só não esqueça que, se você estiver dentro de diretórios, vai precisar passar o caminho relativo ao arquivo. Mas use isso como você achar melhor, ok? ;)</p>
<h2 id="Suporte_para_funcionalidades">Suporte para funcionalidades</h2>
<p>O WordPress tem várias <a href="http://codex.wordpress.org/Function_Reference/add_theme_support" target="_blank" rel="external">funcionalidades legais</a>, mas que não vêm ativadas por padrão, pois consumiriam muitos recursos se estivessem ativadas e você não precisasse delas. Então, você ativa essas funcionalidades conforme a sua necessidade.</p>
<p>Se você olhar no Painel, por exemplo, na tela de edição de post, você terá as seguintes opções:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/single-post.png" alt="Single post"></p>
<p>Vamos adicionar a funcionalidade de <strong>Post Thumbnails</strong>, para que possamos adicionar uma imagem ao nosso post. No seu <code>functions.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="string">'functions/security.php'</span>;</div><div class="line">  </div><div class="line">add_action( <span class="string">'after_setup_theme'</span>, <span class="string">'setup_features'</span> );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup_features</span><span class="params">()</span> </span>{</div><div class="line">    add_theme_support( <span class="string">'post-thumbnails'</span> );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>E temos como resultado:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/featured-image.png" alt="Imagem destacada"></p>
<p>Agora temos essa nova funcionalidade disponível para todos os nossos <em>tipos de conteúdo</em>!</p>
<p><em>E como eu uso isso?</em></p>
<p>Na sua <code>index.php</code>, adicione o código:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php <span class="keyword">if</span>( have_posts() ) : <span class="keyword">while</span>( have_posts() ) : the_post() ?&gt;</div><div class="line">    &lt;?php</div><div class="line">        <span class="keyword">if</span>( has_post_thumbnail() ) {</div><div class="line">            the_post_thumbnail();</div><div class="line">        }</div><div class="line">    ?&gt;</div><div class="line">    <span class="comment">// ...</span></div></pre></td></tr></table></figure>

<p>Adicionei o loop novamente (linha 1) só para que você possa se encontrar para saber onde deve adicionar o código.</p>
<p><strong>Uma outra boa prática que preciso comentar aqui:</strong> percebeu que eu abri novamente uma tag PHP, ainda que na linha de cima eu já tinha uma linha só com código PHP? Por que eu não utilizei o mesmo escopo, deixando o código como abaixo?</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php <span class="keyword">if</span>( have_posts() ) : <span class="keyword">while</span>( have_posts() ) : the_post();</div><div class="line">    <span class="keyword">if</span>( has_post_thumbnail() ) {</div><div class="line">        the_post_thumbnail();</div><div class="line">    }</div><div class="line">    ?&gt;</div><div class="line">    <span class="comment">// ...</span></div></pre></td></tr></table></figure>

<p>Bom, por essa implementação, você já pode perceber que o alinhamento das indentações não bate. Procure sempre manter as indentações bem definidas. Sempre que você precisar fazer uma validação PHP usando <code>if</code> por exemplo, e vai precisar imprimir código HTML dentro desse <code>if</code>, use a notação com <code>:</code>, dessa forma, e abra um novo escopo de tags:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php <span class="keyword">if</span>( verifique_alguma_coisa() ) : ?&gt;</div><div class="line">    &lt;h1&gt;Título&lt;/h1&gt;</div><div class="line">&lt;?php <span class="keyword">endif</span> ?&gt;</div></pre></td></tr></table></figure>

<p>Dessa forma o código fica muito mais limpo e consistente, pois você sabe onde o <code>if</code> termina, por causa do <code>endif</code>. Se usar com chaves, já fica ruim de visualizar:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php <span class="keyword">if</span>( verifique_alguma_coisa() ) { ?&gt;</div><div class="line">    &lt;h1&gt;Título&lt;/h1&gt;</div><div class="line">&lt;?php } ?&gt;</div></pre></td></tr></table></figure>

<p>Da mesma forma, quando precisamos adicionar um código PHP indentado, mas precisamos fechar o PHP para adicionar HTML. Quando indentar, abrar um novo escopo de tags <code>&lt;?php ?&gt;</code>, para que seu código se mantenha o mais legível possível.</p>
<p><strong>Fica a dica!</strong></p>
<p>Agora temos duas novas funções: <code>has_post_thumbnail()</code> e <code>the_post_thumbnail()</code>. Os nomes são bem semânticos, não?</p>
<p><code>has_post_thumbnail()</code> retorna <code>true</code> se o post tem uma imagem destacada, e <code>false</code> se não houver. E <code>the_post_thumbnail()</code>, gera uma tag de imagem, com a imagem destacada que você adicionar no seu post. Se não houver imagem, continua a exibição normal do post :)</p>
<p>Para ver o código completo até aqui, siga esse repositório: <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br</a></p>
<p>Lembra que comentamos sobre <em>hooks</em>? No código mais acima, podemos ver o hook <code>after_setup_theme</code> em ação.</p>
<p><em>Como ele funciona?</em></p>
<p>Os desenvolvedores do WordPress “largam” algumas chamadas aos <em>hooks</em> (ganchos) no meio do <em>core</em> do WP, para que você possa “pendurar” os seus próprios códigos. Nesse caso, dizemos ao WordPress que, quando chegar no local do código onde está posicionado o <em>hook</em> <code>after_setup_theme</code>, ele deve executar a função <code>setup_features</code>, passada no segundo parâmetro.</p>
<p>O WordPress tem vários <em>hooks</em> no <em>core</em>, que podem ser encontrados aqui: <a href="http://codex.wordpress.org/Plugin_API/Hooks" target="_blank" rel="external">http://codex.wordpress.org/Plugin_API/Hooks</a></p>
<p>Mas não se preocupe com isso agora. Veremos isso mais a fundo nos próximos posts, inclusive aprenderemos como criar nossos próprios hooks :D</p>
<p>Bom, paramos por aqui, mas saiba que estamos apenas começando! Temos muitas coisas legais ainda pra ver! Continue acompanhando a série!</p>
<p>Até o próximo post :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/12/wordpress-estrutura-inicial-do-tema-padroes-de-codificacao-e-uso-do-editor/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/wordpress-functions-php.jpg" alt="WordPress - O arquivo functions.php"></p>
<p>O <strong>functions.php</strong> é o canal que liga o seu tema a todas as coisas legais que o WP tem a oferecer! Códigos personalizados, estrutura de arquivos… todo tipo de manipulação que você imagina no seu site WordPress, você faz através do <strong>functions.php</strong>. Vamos conhecê-lo? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Brincando com números]]></title>
    <link href="http://blog.da2k.com.br/2015/01/13/javascript-brincando-com-numeros/"/>
    <id>http://blog.da2k.com.br/2015/01/13/javascript-brincando-com-numeros/</id>
    <published>2015-01-13T00:00:00.000Z</published>
    <updated>2015-01-14T02:41:59.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/js-numbers.jpg" alt=""></p>
<p>Quando você começa a estudar sobre a <a href="https://insidejavascript.wordpress.com/2011/09/16/lexical-structure/" target="_blank" rel="external">estrutura léxica</a> da <strong>Javascript</strong>, você vê que as “bizarrices” encontradas em <a href="http://wtfjs.com/" target="_blank" rel="external">http://wtfjs.com/</a> são todos comportamentos esperados! Hoje eu quero mostrar algo simples, mas que pode te ajudar bastante ao trabalhar com números em Javascript :D</p>
<a id="more"></a>

<h2 id="Conversão_de_números">Conversão de números</h2>
<p>Em um projeto que você recebe uma entrada de dados do usuário, você precisa sempre tratar essa entrada, para saber se está realmente recebendo o valor que você espera. Vamos dar um exemplo, onde você tem uma função chamada <code>sum()</code>, que soma dois números. Esses dois números são recebidos através de dois <code>inputs</code> (vou deixar tudo em um só arquivo somente para exemplificar. Eviter fazer isso):</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Somar dois números<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Somar dois números<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">data-js</span>=<span class="value">"number1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">data-js</span>=<span class="value">"number2"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span>&gt;</span>Somar<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-js</span>=<span class="value">"result"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.querySelector( <span class="string">'button'</span> )</div><div class="line">      .addEventListener( <span class="string">'click'</span>, handleClick, <span class="literal">false</span> );</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> number1 = <span class="built_in">document</span>.querySelector( <span class="string">'[data-js="number1"]'</span>).value;</div><div class="line">      <span class="keyword">var</span> number2 = <span class="built_in">document</span>.querySelector( <span class="string">'[data-js="number2"]'</span>).value;</div><div class="line">      </div><div class="line">      <span class="built_in">document</span>.querySelector( <span class="string">'[data-js="result"]'</span> ).innerHTML = sum( number1, number2 );</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">      <span class="keyword">return</span> number1 + number2;</div><div class="line">    }</div><div class="line">  <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Esse seria mais ou menos o código que você iria utilizar para fazer a soma, correto?</p>
<p>Entre com dois números nos inputs e veja o resultado:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sum-1-2-12.png" alt="Somar &quot;1&quot; e &quot;2&quot; é igual a &quot;12&quot;"></p>
<p>Eu entrei com os números <code>1</code> e <code>2</code> e tive como resultado… <strong><code>12</code></strong>!</p>
<p><em>12??? Como assim?</em></p>
<p>O Javascript recebeu os valores dos inputs da forma como eles vieram. Normalmente esses valores vêm como <code>String</code>. Se você conhece a estrutura léxica do Javascript, você sabe que, ao usar o sinal de <code>+</code>, ele pode tanto somar números, como concatenar strings. Quando você tem ao menos uma string em uma das partes, ele assume que o que você quer fazer é concatenar.</p>
<p><em>Então como eu posso resolver isso?</em></p>
<p>Precisamos converter esses valores de string para números, antes de efetuar a soma!</p>
<h2 id="parseInt()">parseInt()</h2>
<p>Temos a função <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="external">parseInt()</a>, que recebe dois parâmetros: o primeiro é o valor que você quer converter para um número inteiro, e o segundo, um número inteiro que vai representar o tipo de conversão que será feito. </p>
<p>No nosso caso, vamos utilizar como segundo parâmetro o número <code>10</code>, que representa números decimais.</p>
<p>Mudamos um pouco nossa função de soma para ficar assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  <span class="keyword">var</span> DECIMAL = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>( number1, DECIMAL ) + <span class="built_in">parseInt</span>( number2, DECIMAL );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Como já vimos em posts anteriores, vamos utilizar boas práticas de <em>Clean Code</em>. Coloquei o número 10 em uma variável chamada <code>DECIMAL</code> (tudo maiúsculo, pois é convenção para constantes), para que saibamos o que significa esse segundo parâmetro. </p>
<p>A boa prática é nunca usar números mágicos, mas sempre atribuí-los à uma constante.</p>
<p>Agora tente novamente fazer a soma:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/sum1-2-3.png" alt="Soma 1 + 2 = 3"></p>
<p>E temos o resultado correto :)</p>
<p>É importante frisar o uso do segundo parâmetro do <code>parseInt()</code>, pois isso pode alterar o resultado final. Por exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>( <span class="string">'10px'</span> ); <span class="comment">// 10</span></div><div class="line"><span class="built_in">parseInt</span>( <span class="string">'10px'</span>, <span class="number">10</span> ); <span class="comment">// 10</span></div><div class="line"><span class="built_in">parseInt</span>( <span class="string">'0x'</span> ); <span class="comment">// NaN</span></div><div class="line"><span class="built_in">parseInt</span>( <span class="string">'0x'</span>, <span class="number">10</span> ) <span class="comment">// 0</span></div></pre></td></tr></table></figure>

<p>Como você pode ver nos exemplos acima, o <code>parseInt()</code> converte a string baseado nos primeiros caracteres, se o segundo parâmetro não for passado.</p>
<p>No primeiro e segundo exemplos, ele retorna <code>10</code>. Mas no terceiro e quarto exemplos, temos uma pequena diferença.</p>
<p>Quando uma string é iniciada em <code>0X</code> ou <code>0x</code>, e o segundo parâmetro não for definido, o <code>parseInt()</code> entende que essa é uma notação <strong>hexadecimal</strong>, e tenta converter ao inteiro equivalente. Como <code>0x</code> é só o início da string, não retorna número algum, o resultado é <code>NaN</code> (Not a number).</p>
<p>No quarto exemplo, nós dizemos ao <code>parseInt()</code> que a string deve ser interpretada como <strong>decimal</strong>. Então ele apresenta o resultado esperado.</p>
<p>Muito cuidado com isso ;)</p>
<blockquote>
<p>Para ver todos os tipos disponíveis para usar no segundo parâmetro, acesse <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="external">https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt</a>.</p>
</blockquote>
<h2 id="O_operador_+">O operador <code>+</code></h2>
<p>Mas tem outra malandragem pouco conhecida para a conversão de números: o sinal de <code>+</code>. Quando usado antes de uma string, e a string for um número, ele converte o tipo dessa string para <code>Number</code>! Duvida? Mude a função <code>sum()</code> novamente:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">( number1, number2 )</span> </span>{</div><div class="line">  number1 = +number1;</div><div class="line">  number2 = +number2;</div><div class="line">  <span class="keyword">return</span> number1 + number2;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Convertemos os valores para número antes de somar e… agora nosso resultado está correto novamente!</p>
<h2 id="Conclusão">Conclusão</h2>
<p>A intenção desse post foi mostrar o uso do operador <code>+</code>, que facilita muito na hora de converter <code>String</code> para <code>Number</code>, além de frisar a importância do uso do segundo parâmetro no <code>parseInt()</code>.</p>
<p>Gostou da dica? Ficou com alguma dúvida? Comente! </p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/js-numbers.jpg" alt=""></p>
<p>Quando você começa a estudar sobre a <a href="https://insidejavascript.wordpress.com/2011/09/16/lexical-structure/" target="_blank" rel="external">estrutura léxica</a> da <strong>Javascript</strong>, você vê que as “bizarrices” encontradas em <a href="http://wtfjs.com/" target="_blank" rel="external">http://wtfjs.com/</a> são todos comportamentos esperados! Hoje eu quero mostrar algo simples, mas que pode te ajudar bastante ao trabalhar com números em Javascript :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/tags/tips/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
</feed>
