<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Da2k Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.da2k.com.br/"/>
  <updated>2015-01-03T21:56:27.200Z</updated>
  <id>http://blog.da2k.com.br/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Como criar componentes JS usando módulos - AMD, CommonJS e UMD - Parte 1/3]]></title>
    <link href="http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/"/>
    <id>http://blog.da2k.com.br/2015/01/03/como-criar-componentes-js-usando-modulos-amd-commonjs-e-umd-parte-1-3/</id>
    <published>2015-01-03T00:00:00.000Z</published>
    <updated>2015-01-03T11:04:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/modules-amd.jpg" alt=""></p>
<p>Depois de um tempo escrevendo código Javascript, você começa a perceber que algumas coisas começam a se repetir, outras você precisa reutilizar, então você pensa: </p>
<p><em>Como eu posso modularizar isso, para que esse componente seja reutilizado em vários projetos diferentes?</em></p>
<p>Para responder a essa pergunta, entram em cena duas especificações de módulo: <strong>AMD</strong> e <strong>CommonJS</strong> (ou <strong>CJS</strong>).</p>
<p>Eles permitem que você escreva seus códigos de forma modular, seguindo algumas definições. Vamos falar sobre cada um deles.</p>
<a id="more"></a>

<h2 id="AMD">AMD</h2>
<p><strong>Asynchronous Module Definition</strong> (AMD) ficou bastante conhecido por causa do <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>. O formato de utilização do AMD é o seguinte:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define( <span class="string">'moduleName'</span>, [ <span class="string">'jquery'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $ )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'Hello World!'</span>;</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Essa é a estrutura mais básica de um módulo escrito no formato AMD. A função <code>define</code> será usada para todo novo módulo que você criar.</p>
<p>Como primeiro parâmetro dessa função, você pode passar o nome do módulo - opcional - (que será usado para você fazer o “include” dele em outro lugar).</p>
<p>O segundo parâmetro é um array de dependências desse módulo, também opcional. No nosso exemplo, colocamos como dependência a biblioteca jQuery.</p>
<p>E o terceiro parãmetro é a função de callback que define o módulo e retorna o seu conteúdo. Essa função é obrigatória. Ela será chamada assim que todas as dependências do array no segundo parâmetro forem baixadas, e estiverem prontas para uso. </p>
<p>As dependências normalmente retornam valores. Para usar os valores retornados, você deve passar como parâmetros da função as variáveis que irão receber os valores das dependências, sempre na mesma ordem do array.</p>
<p>Por exemplo, se no seu módulo você vai precisar utilizar o jQuery e a LoDash, você pode fazer a chamada da seguinte forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([ <span class="string">'jquery'</span>, <span class="string">'lodash'</span> ], <span class="function"><span class="keyword">function</span><span class="params">( $, _ )</span> </span>{</div><div class="line">  <span class="comment">// código do seu módulo</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Se não houver dependências, a função já será executada assim que ela for chamada:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// código do seu módulo</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>A ideia aqui é falar apenas como funcionam cada uma das especificações. Em posts futuros, entrarei em mais detalhes de como usar cada formato, especificamente.</p>
<p>No próximo post, falaremos um pouco sobre o <strong>CommonJS</strong>. Até lá!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/modules-amd.jpg" alt=""></p>
<p>Depois de um tempo escrevendo código Javascript, você começa a perceber que algumas coisas começam a se repetir, outras você precisa reutilizar, então você pensa: </p>
<p><em>Como eu posso modularizar isso, para que esse componente seja reutilizado em vários projetos diferentes?</em></p>
<p>Para responder a essa pergunta, entram em cena duas especificações de módulo: <strong>AMD</strong> e <strong>CommonJS</strong> (ou <strong>CJS</strong>).</p>
<p>Eles permitem que você escreva seus códigos de forma modular, seguindo algumas definições. Vamos falar sobre cada um deles.</p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/tags/javascript/"/>
    
      <category term="modules" scheme="http://blog.da2k.com.br/tags/modules/"/>
    
      <category term="amd" scheme="http://blog.da2k.com.br/tags/amd/"/>
    
      <category term="commonjs" scheme="http://blog.da2k.com.br/tags/commonjs/"/>
    
      <category term="umd" scheme="http://blog.da2k.com.br/tags/umd/"/>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Caminhos relativos no NodeJS]]></title>
    <link href="http://blog.da2k.com.br/2015/01/02/caminhos-relativos-no-nodejs/"/>
    <id>http://blog.da2k.com.br/2015/01/02/caminhos-relativos-no-nodejs/</id>
    <published>2015-01-02T00:00:00.000Z</published>
    <updated>2015-01-02T08:49:30.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/nodejs.jpg" alt=""></p>
<p>Sabe quando você precisa dar <code>require</code> em um módulo que você criou, mas ele está em uma estrutura de diretórios bem longe do arquivo que você precisa incluir, e você tem que usar um milhão de <code>../../../</code> para chegar até o diretório certo do seu módulo?</p>
<a id="more"></a>

<p>Se você não entendeu, vou exemplificar. Digamos que você tem a seguinte estrutura de diretórios no seu projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── /controllers</div><div class="line">|   ├── /home</div><div class="line">|   |   ├── homeController.js</div><div class="line">├── /services</div><div class="line">|   ├── /home</div><div class="line">|   |   ├── homeService.js</div><div class="line">├── /routes</div><div class="line">└── app.js</div></pre></td></tr></table></figure>

<p>Imagine que nos <code>services</code> você controla todas as regras de negócio e passa para o seu <code>controller</code>. No controller, você precisa então “requisitar” o <code>service</code> específico, chamando ele dessa forma no arquivo <code>homeController.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> homeService = <span class="built_in">require</span>( <span class="string">'../../services/home/homeService'</span> );</div></pre></td></tr></table></figure>

<p>Como o arquivo <code>homeController.js</code> está dentro do diretório <code>controllers/home</code>, você precisa voltar dois níveis para então chegar no diretório <code>services</code>, entrar ali e chamar o <code>homeService.js</code>.</p>
<p>Agora imagine você fazendo isso em um projeto que começa pequeno, mas vai escalando até ficar gigantesco! Se você resolver refatorar alguma coisa mudando algo de lugar, imagine o trabalho de ficar modificando manualmente essas estruturas de diretórios!</p>
<p>Chato não?!</p>
<p>Mas felizmente, o Node nos dá algumas maneiras de resolver isso. Você pode usar o método <code>resolve()</code> do módulo <a href="http://nodejs.org/api/path.html#path_path_resolve_from_to" target="_blank" rel="external">path</a>, - que é nativo do Node - que vai resolver a sua URL com o caminho absoluto, até onde a aplicação está rodando. Então você pode fazer a chamada assim no seu <code>homeController.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>( <span class="string">'path'</span> );</div><div class="line"><span class="keyword">var</span> homeService = <span class="built_in">require</span>( path.resolve( <span class="string">'services/home/homeService'</span> ) );</div></pre></td></tr></table></figure>

<p>O <code>path</code> vai, a partir do caminho absoluto da sua aplicação, concatenar com o parâmetro passado para o método <code>resolve()</code>. Simples não?</p>
<p>Mas é ruim ter que ficar adicionando mais uma linha em todo arquivo que eu precisar fazer um require. Por isso eu criei um módulo marotinho chamado <a href="https://github.com/fdaciuk/getmodule" target="_blank" rel="external">getmodule</a>, que facilita isso pra você!</p>
<p>O <code>getmodule</code> usa o recurso do <code>path.resolve()</code> para gerar o caminho corretamente, mas ele exporta uma variável global chamada <code>getmodule</code> para que você possa substituir o <code>require</code> por ele.</p>
<p>O módulo é só isso:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">global.getmodule = <span class="function"><span class="keyword">function</span> <span class="title">getmodule</span><span class="params">( modulePath )</span> </span>{</div><div class="line">  <span class="keyword">var</span> path = <span class="built_in">require</span>( <span class="string">'path'</span> );</div><div class="line">  <span class="keyword">return</span> <span class="built_in">require</span>( path.resolve( modulePath ) );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>E para usá-lo, é bem simples. Primeiro instale o módulo no seu projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save getmodule</div></pre></td></tr></table></figure>

<p>Depois, adicione ele ao arquivo principal da sua aplicação. No caso do nosso exemplo, é o <code>app.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( <span class="string">'getmodule'</span> );</div></pre></td></tr></table></figure>

<p>E pronto! Agora, no nosso <code>homeController.js</code>, podemos simplesmente chamar o service dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> homeService = getmodule( <span class="string">'services/home/homeService'</span> );</div></pre></td></tr></table></figure>

<p>Que toda a parte verbosa vai ficar por conta do módulo :D</p>
<p>Ae você me pergunta: <em>É vantagem usar um módulo só pra isso?</em></p>
<p>Eu penso que sim. Senão você vai ter que ficar criando “helpers” no seu projeto pra fazer isso. Vai acabar deixando o negócio meio desorganizado ou com coisas desnecessárias. Como estamos usando um módulo, ele fica no diretório <code>node_modules</code> e se tiver alguma atualização para ele, pode ser feito via <code>npm update</code>. Muito mais prático trabalhar assim com módulos genéricos.</p>
<p>Existem algumas outras formas de resolver esse problema, que foram discutidas <a href="https://www.facebook.com/groups/nodejsbrasil/permalink/580587242074567/" target="_blank" rel="external">nesse link</a> no grupo <strong>NodeJS Brasil</strong>, no Facebook.</p>
<p>Bom, por hoje é só! Gostou da dica? Achou ridículo? Comenta aí :)</p>
<p>Até a próxima :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/nodejs.jpg" alt=""></p>
<p>Sabe quando você precisa dar <code>require</code> em um módulo que você criou, mas ele está em uma estrutura de diretórios bem longe do arquivo que você precisa incluir, e você tem que usar um milhão de <code>../../../</code> para chegar até o diretório certo do seu módulo?</p>
]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meta Tags X-UA-Compatible e Charset]]></title>
    <link href="http://blog.da2k.com.br/2015/01/01/meta-tags-x-ua-compatible-e-charset/"/>
    <id>http://blog.da2k.com.br/2015/01/01/meta-tags-x-ua-compatible-e-charset/</id>
    <published>2015-01-01T00:00:00.000Z</published>
    <updated>2015-01-01T10:26:25.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/doctype.jpg" alt=""></p>
<p>Você já deve saber que, com o HTML5, houveram algumas pequenas melhorias para adicionar o charset e o doctype no seu documento. Antigamente era preciso decorar algo parecido com isso:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></div></pre></td></tr></table></figure>

<a id="more"></a>

<p>E sem esquecer de colocar na tag <code>&lt;html&gt;</code> o atributo xmlns:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/1999/xhtml"</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Coisa linda! #sqn</p>
<p>Hoje, para adicionar um doctype, você só precisa de:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div></pre></td></tr></table></figure>

<p>e pronto! O mesmo problema ocorria quando precisávamos adicionar um charset ao documento. Tinhamos que escrever:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html;charset=utf-8"</span> /&gt;</span></div></pre></td></tr></table></figure>

<p>E hoje, só precisamos disso:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div></pre></td></tr></table></figure>

<p>O que muita gente não sabe é que, para que o charset seja setado corretamente no documento, ele precisa estar <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset" target="_blank" rel="external">nos primeiros 512b do seu documento</a>.</p>
<p><em>Aaaahh, por isso que em alguns sites fica aparecendo uns caracteres estranhos?</em></p>
<p>Exatamente! Ou porque a meta tag está após os primeiros 512b, ou porque ela não está presente no documento. Acredite, é muito comum :(</p>
<p><em>E como resolvemos isso?</em> </p>
<p>Colocando a meta tag charset no início do <code>&lt;head&gt;</code>!</p>
<p><em>Aeeeee!! o/</em></p>
<p>Só que com isso, geramos um segundo problema.</p>
<h2 id="A_meta_tag_X-UA-Compatible">A meta tag X-UA-Compatible</h2>
<p>Quem já desenvolve frontend a algum tempo, sabe que o IE é o vilão da internet! E para contornar os problemas que ele tem, podemos usar uma infinidade de <a href="http://browserhacks.com/#ie" target="_blank" rel="external">hacks</a> para manter a compatibilidade com o maior números de versões possíveis.</p>
<p>O IE tem uma coisa feia chamada <strong>Modo de Compatibilidade</strong>. Esse modo foi criado para dar suporte a aplicações que só funcionavam nas versões mais antigas do IE (sabe-se lá porque cargas d’água não atualizavam a disgrama da aplicação). Então, era só clicar no botão em formato de <em>folha</em>, que aparece na barra de endereços no IE, que ele renderizava como se fosse uma versão mais antiga.</p>
<p>Só que esse modo não fica aplicado somente para a aplicação selecionada. Qualquer outro endereço de site que for acessado, vai abrir com essa versão mais antiga. </p>
<p>Para “resolver” isso, você precisa adicionar a meta tag <strong>X-UA-Compatible</strong> no <code>&lt;head&gt;</code>, dessa forma:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=Edge"</span> /&gt;</span></div></pre></td></tr></table></figure>

<blockquote>
<p>Sobre a X-UA-Compatible: <a href="http://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/ie/jj676915(v=vs.85).aspx</a></p>
</blockquote>
<p>O <code>IE=Edge</code> diz para o IE renderizar aquela página com a versão mais recente que ele tiver. Ou seja, se o usuário clicou no modo de compatibilidade do IE9 para usar a versão 7, essa meta tag avisa que o IE deve usar sempre a versão mais recente, no caso, a 9.</p>
<p>Você ainda pode mudar o content dessa tag, passando a versão que você quer que o IE renderize, fazendo dessa forma (por exemplo):</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=8"</span> /&gt;</span></div></pre></td></tr></table></figure>

<p>Isso vai dizer que o IE deve renderizar aquela página sempre como IE8 (se disponível essa versão).</p>
<p>Maaaas, essa tag tem um segredo, que pouquíssimas pessoas conhecem: se ela não for colocada como PRIMEIRA TAG DENTRO DO <code>&lt;HEAD&gt;</code>, o IE simplesmente ignora ela!</p>
<p>Na página que fala sobre a tag, tem a seguinte citação:</p>
<blockquote>
<p>The X-UA-Compatible header isn’t case sensitive; however, it must appear in the header of the webpage (the HEAD section) before all other elements <strong>except for the title element and other meta elements</strong>.</p>
</blockquote>
<p>Mas essa exceção, na verdade, não existe :(</p>
<p>Ela precisa vir antes de todas as outras. Ou seja, se no seu site estiver assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=Edge"</span> /&gt;</span></div><div class="line">    ...</div></pre></td></tr></table></figure>

<p>Não vai funcionar! O IE não vai nem dar bola pra ela e vai continuar no modo que o usuário deixou.<br>Triste, não?! :(</p>
<p>O correto é deixar dessa forma:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=Edge"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></div><div class="line">    ...</div></pre></td></tr></table></figure>

<p>Bom, eram essas dicas que eu queria deixar:</p>
<ul>
<li>meta charset deve estar sempre antes dos 512b do documento;</li>
<li>X-UA-Compatible sempre no início do <code>&lt;head&gt;</code>.</li>
</ul>
<p>Fazendo isso, você não terá problemas (ao menos, não com charset ou com renderização de versões antigas do IE :P) :)</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/doctype.jpg" alt=""></p>
<p>Você já deve saber que, com o HTML5, houveram algumas pequenas melhorias para adicionar o charset e o doctype no seu documento. Antigamente era preciso decorar algo parecido com isso:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="html5" scheme="http://blog.da2k.com.br/tags/html5/"/>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="html5" scheme="http://blog.da2k.com.br/categories/html5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Um post por dia]]></title>
    <link href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/"/>
    <id>http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</id>
    <published>2014-12-31T13:16:13.000Z</published>
    <updated>2015-01-01T10:06:04.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/12/calendar.jpg" alt=""></p>
<p>Comecei com esse blog no início de 2014. Pretendia escrever vários posts, com uma frequência razoável, ao menos uma vez por mês, mas isso foi um mito. E pude perceber que não só pra mim, mas pra muita gente é complicado dedicar um tempo específico para escrever e manter o blog atualizado. Por isso resolvi lançar esse desafio a mim mesmo: <strong>escrever 1 post por dia em 2015</strong>.</p>
<a id="more"></a>

<p>Minha meta é chegar ao final do ano com, ao menos, 300 posts novos - dando uma margem de segurança de 65 dias pra poder respirar :P - para compartilhar conteúdo de qualidade em pt-BR sobre desenvolvimento web, focando em (mas não se limitando a) Javascript, HTML, CSS e WordPress.</p>
<p>A ideia principal dessa iniciativa é gerar e compartilhar muito conteúdo bom em pt-BR. Coisas que ainda não foram faladas (ou talvez já :P), mas que agreguem conhecimento para, desde o cara que está começando na área, até o cara que já tem 30 anos de experiência :D</p>
<p>Os posts podem ser desde dicas até tutorias completos, dicas sobre ferramentas, organização de arquivos, testes, workflow, etc.</p>
<p>Todos os posts serão compartilhados com a hashtag <strong>#1postperday</strong>.</p>
<p>Ideia doida? Pois é.. não sei se conseguirei fazer os posts diariamente, mas ao menos eu vou tentar.. o desafio está lançado!</p>
<p>Quer sugerir algum tema para os posts? Deixe seu comentário <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">nessa issue</a>.</p>
<p>Quer participar também? Não há regras, a não ser respeitar a frequência! Faça ao menos 1 post por dia e compartilhe-o usando a hashtag <strong>#1postperday</strong>! Se achar que é muito, use a criatividade e faça <strong>#1postperweek</strong> ou até <strong>#1postpermonth</strong>!</p>
<p>E que venha 2015! o/</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/12/calendar.jpg" alt=""></p>
<p>Comecei com esse blog no início de 2014. Pretendia escrever vários posts, com uma frequência razoável, ao menos uma vez por mês, mas isso foi um mito. E pude perceber que não só pra mim, mas pra muita gente é complicado dedicar um tempo específico para escrever e manter o blog atualizado. Por isso resolvi lançar esse desafio a mim mesmo: <strong>escrever 1 post por dia em 2015</strong>.</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordCamp Belo Horizonte 2014 - Minhas impressões]]></title>
    <link href="http://blog.da2k.com.br/2014/05/19/wordcamp-belo-horizonte-2014-minhas-impressoes/"/>
    <id>http://blog.da2k.com.br/2014/05/19/wordcamp-belo-horizonte-2014-minhas-impressoes/</id>
    <published>2014-05-19T02:42:44.000Z</published>
    <updated>2014-12-31T20:16:39.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/23071767957a2edbe1d4d2bf1a0bc1d876f5d3ab/68747470733a2f2f7261772e6769746875622e636f6d2f6664616369756b2f74616c6b732f6d61737465722f6173736574732f696d616765732f776f726463616d702d62682e6a7067" alt="WordCamp Belo Horizonte"></p>
<p>O <strong>WordCamp</strong>, como você já deve saber, é um evento internacional, que reúne pessoas de todos os lugares do mundo para falar de <strong>WordPress</strong>.</p>
<p>No último sábado (17/05/14), aconteceu o <strong><a href="http://2014.belohorizonte.wordcamp.org/" target="_blank" rel="external">WordCamp Belo Horizonte</a></strong>. E já pra começo de conversa: Foi o <strong>WordCamp</strong> mais animal que já participei! O evento se superou em tudo. Então, já gostaria de agradecer ao <a href="https://www.facebook.com/valerio.souza" target="_blank" rel="external">Valério</a> que organizou tudo com muito carinho pra fazer o melhor <strong>WordCamp</strong> de todos os tempos!</p>
<p>O cara tá morando no Rio de Janeiro, e fez o negócio acontecer de longe mesmo!</p>
<p>E não faltou o famoso pão de queijo! Teve até sorteio de uma caixa no final do evento xD</p>
<p>Mas vou começar pela viagem. Vem comigo!</p>
<a id="more"></a>

<h2 id="A_viagem">A viagem</h2>
<p>Sexta (16/05) e domingo (28/05) foram praticamente o dia todo dentro de ônibus e aviões. A viagem daqui de Joinville até BH foi bem longa, passando por Curitiba, Congonhas/SP e depois Belo Horizonte. Chegando lá, ainda foi necessário mais 1h de ônibus para chegar até próximo ao local do evento.</p>
<p>Foi cansativo, mas posso garantir que valeu muito a pena! Fizemos um encontro pré-evento na sexta pra conhecer a galera, trocar ideias e jogar conversa fora!</p>
<p>Enfim, chegou o sábado xD</p>
<h2 id="O_WordCamp">O WordCamp</h2>
<p>O evento começou com mais ou menos 1h de atraso, pois tinha muita gente pra fazer o cadastramento (mais de 300 pessoas), mas só havia 1 computador para fazer validar o cadastro e fazer o crachá dos participantes.</p>
<p>Ouvi algumas pessoas reclamando do atraso, alguns postando no Twitter também sobre isso. Vou dizer o que eu penso sobre: o evento foi (e é) feito para a comunidade. Enquanto alguns reclamaram por causa da demora, outros já foram abrindo seus notebooks e tablets, pedindo que o arquivo onde estavam os cadastros fosse compartilhado para que pudessem agilizar o processo. E isso economizou pelo menos mais 1 ou 2 horas de trabalho que estava sendo feito por apenas uma única pessoa.</p>
<p>Isso é o trabalho da comunidade! Todo mundo se ajudando da forma que pode, pra fazer o negócio acontecer da melhor forma possível!</p>
<p>E outra: quem reclamou foram 1 ou 2. As outras mais de 300 pessoas com certeza saíram de lá muito satisfeitas com o resultado xD</p>
<p>Mas apesar do pequeno atraso (normal em qualquer evento), o <strong>WordCamp Belo Horizonte</strong> foi um sucesso! As palestras foram de muito alto nível, o networking foi fenomenal! Encontrei amigos de outros WordCamps e pude conhecer pessoalmente algumas pessoas que sempre participam do <a href="https://www.facebook.com/groups/wordpress.brasil/" target="_blank" rel="external">Grupo WordPress Brasil, no Facebook</a>. Foi fantástico!</p>
<p>Teve gente vindo do Rio de Janeiro só para ser voluntário no evento! Isso é coisa linda de se ver :D</p>
<p>Foram <a href="http://2014.belohorizonte.wordcamp.org/programacao/" target="_blank" rel="external">20 palestrantes</a> de todo lugar do Brasil (inclusive uma Argentina xD), compartilhando conhecimento com a galera! </p>
<p>Dois palestrantes tiveram alguns imprevistos e não puderam comparecer por motivos pessoais, mas isso não foi um problema: O Luan Muniz conseguiu cobrir (e muito bem) um dos espaços com uma excelente palestra sobre como colaborar com projetos Open Source.</p>
<p>É notório como a comunidade de <strong>WordPress</strong> está crescendo muito no Brasil inteiro, e isso eu pude constatar nesse último WordCamp.</p>
<h2 id="Estrutura">Estrutura</h2>
<p>O evento foi realizado na <a href="http://2014.belohorizonte.wordcamp.org/guia-de-sobrevivencia/" target="_blank" rel="external">UNIBH</a>, um local muito bem localizado no bairro Estoril, em BH. Duas salas e o auditório principal da Universidade foram disponibilizados para as apresentações. Não foi possível assistir a todas as palestras do dia, pois estavam sendo apresentadas de 3 em 3; mas todo o conteúdo foi filmado e será disponibilizado em breve no <a href="http://2014.belohorizonte.wordcamp.org/" target="_blank" rel="external">site oficial do WordCamp Belo Horizonte</a>. Assim ninguém vai chorar porque não viu uma palestra ou outra xD</p>
<p>Havia algumas tomadas espalhadas pelo local, que foram suficientes pra carregar um ou outro smartphone ou notebook que arriou antes do tempo xD</p>
<p>A internet foi bem boa, na medida do possível, mas atendeu bem todo o público presente. Até porque, para uma estrutura WiFi suportar 300 conexões simultâneas é bem complicado, mas deu tudo certo!</p>
<p>Foi disponibilizado também, gratuitamente, um almoço no local, para que ninguém precisasse sair em busca de comida, haha! Tinha muitas bocas pra alimentar, mas todo mundo pôde comer bem a excelente comida mineira!</p>
<h2 id="Conteúdo">Conteúdo</h2>
<p>Muito conteúdo foi compartilhado durante todo o evento nas redes sociais usando a hashtag <strong>#wordcampbh</strong>. Você pode acompanhar tudo pelo <a href="https://www.facebook.com/hashtag/wordcampbh" target="_blank" rel="external">Facebook</a>, <a href="https://twitter.com/search?f=realtime&amp;q=%23wordcampbh&amp;src=typd" target="_blank" rel="external">Twitter</a> ou <a href="http://instagram.com/wordcampbh" target="_blank" rel="external">Instagram</a> (esse é o link para o perfil do WordCampBH no Instagram. Pesquise pela hashtag no seu smartphone xD).</p>
<h2 id="Social">Social</h2>
<p>No final, ainda sobrou muita comida. Por isso a organização do evento resolveu fazer sua parte social, e doou para a <a href="https://www.facebook.com/photo.php?fbid=634061596686214&amp;set=a.516641478428227.1073741828.492645257494516&amp;type=1" target="_blank" rel="external">Casa do Ancião Chichico Azevedo da Sociedade São Vicente de Paulo</a>. Uma atitude louvável!</p>
<h2 id="Fotos">Fotos</h2>
<p>Vou deixar aqui algumas fotos que tiramos lá (conformeu eu for encontrando outras, vou atualizando o post xD):</p>
<p><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/guga-alves-daciuk-andre-bertolino.jpg" alt="Guga Alves, Eu, André Bertolino "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/gulpjs-apresentando-node.jpg" alt="Falando sobre Gulp "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/abertura.jpg" alt="Abertura "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/credencial-daciuk.jpg" alt="Credencial "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/daciuk-deblyn-claudio-sanches.jpg" alt="Eu, Deblyn Prado, Claudio Sanches "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/gulp-minify.jpg" alt="Gulp Minify "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/funchal-daciuk.jpg" alt="Rafael Funchal, Eu "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/valerio-daciuk.jpg" alt="Valério Souza, Eu "><br><img src="http://blog.da2k.com.br/uploads/2014/05/wordcamp-bh/daciuk-luan-muniz.jpg" alt="Eu, Luan Muniz "></p>
<h2 id="Pra_finalizar">Pra finalizar</h2>
<p>Belo Horizonte é uma cidade muito massa! As pessoas muito receptivas, algumas um pouco tímidas, mas o povo lá é muito hospitaleiro! Gostaria de ter ficado <em>“má um cadin”</em> por lá, mas as crianças já estavam chorando pra trazer o leite pra casa, hahah :P</p>
<p>Quero voltar outras vezes pra visitar a cidade. Espero que em breve tenha outros eventos por lá pra eu usar como desculpa xD</p>
<p>Acompanhe o <a href="http://2014.belohorizonte.wordcamp.org/" target="_blank" rel="external">site oficial do WordCamp Belo Horizonte</a> e as redes sociais (<a href="https://www.facebook.com/WordCampBeloHorizonte" target="_blank" rel="external">Facebook</a>, <a href="https://twitter.com/WordCampBH" target="_blank" rel="external">Twitter</a> e <a href="http://instagram.com/wordcampbh" target="_blank" rel="external">Instagram</a>), pois será divuulgado assim que saírem os vídeos das apresentações e as fotos tiradas no evento!</p>
<p>Pra quem quiser ver, os slides da minha palestra estão disponíveis em <a href="https://github.com/fdaciuk/talks" target="_blank" rel="external">github.com/fdaciuk/talks</a>. Cada palestrante tuitou os slides da sua ou postou no grupo WordPress Brasil, no Facebook, mas em breve estarão todas reunidas também no site oficial!</p>
<p>E você, foi no <strong>WordCamp Belo Horizonte</strong>? O que achou do evento? Diz ae!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://camo.githubusercontent.com/23071767957a2edbe1d4d2bf1a0bc1d876f5d3ab/68747470733a2f2f7261772e6769746875622e636f6d2f6664616369756b2f74616c6b732f6d61737465722f6173736574732f696d616765732f776f726463616d702d62682e6a7067" alt="WordCamp Belo Horizonte"></p>
<p>O <strong>WordCamp</strong>, como você já deve saber, é um evento internacional, que reúne pessoas de todos os lugares do mundo para falar de <strong>WordPress</strong>.</p>
<p>No último sábado (17/05/14), aconteceu o <strong><a href="http://2014.belohorizonte.wordcamp.org/" target="_blank" rel="external">WordCamp Belo Horizonte</a></strong>. E já pra começo de conversa: Foi o <strong>WordCamp</strong> mais animal que já participei! O evento se superou em tudo. Então, já gostaria de agradecer ao <a href="https://www.facebook.com/valerio.souza" target="_blank" rel="external">Valério</a> que organizou tudo com muito carinho pra fazer o melhor <strong>WordCamp</strong> de todos os tempos!</p>
<p>O cara tá morando no Rio de Janeiro, e fez o negócio acontecer de longe mesmo!</p>
<p>E não faltou o famoso pão de queijo! Teve até sorteio de uma caixa no final do evento xD</p>
<p>Mas vou começar pela viagem. Vem comigo!</p>
]]>
    
    </summary>
    
      <category term="wordcamp" scheme="http://blog.da2k.com.br/tags/wordcamp/"/>
    
      <category term="wordcamp" scheme="http://blog.da2k.com.br/categories/wordcamp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Disqus - Uma thread para mais de uma URL]]></title>
    <link href="http://blog.da2k.com.br/2014/03/22/disqus-uma-thread-para-mais-de-uma-url/"/>
    <id>http://blog.da2k.com.br/2014/03/22/disqus-uma-thread-para-mais-de-uma-url/</id>
    <published>2014-03-22T07:51:35.000Z</published>
    <updated>2014-12-31T20:16:39.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/03/disqus.png" alt="Disqus"></p>
<p>Meu post sobre <a href="/2014/03/18/meu-workflow-javascript-com-module-pattern/">“Workflow Javascript com Module Pattern”</a> saiu na <a href="http://us5.campaign-archive1.com/?u=77b6594f10bba05dcc722c80e&amp;id=d85b8bbd77&amp;e=e3f205021c" target="_blank" rel="external">BrazilJS Weekly #69</a> <em>(obrigado a quem colocou lá o/)</em>, mas isso acabou me mostrando que eu tinha um pequeno “problema” com os comentários: como tinha uma query string na URL, o <a href="http://disqus.com/" target="_blank" rel="external">Disqus</a> achava que se tratava de uma página diferente e criava uma nova thread de comentários =/</p>
<a id="more"></a>

<h2 id="O_problema">O problema</h2>
<p>Por exemplo, se eu acessasse:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>/<span class="regexp">/blog.da2k.com.br/</span><span class="number">2014</span>/<span class="number">03</span>/<span class="number">18</span>/meu-workflow-javascript-com-<span class="class"><span class="keyword">module</span>-<span class="title">pattern</span>/</span></div><div class="line"><span class="symbol">http:</span>/<span class="regexp">/blog.da2k.com.br/</span><span class="number">2014</span>/<span class="number">03</span>/<span class="number">18</span>/meu-workflow-javascript-com-<span class="class"><span class="keyword">module</span>-<span class="title">pattern</span>/?123</span></div><div class="line"><span class="symbol">http:</span>/<span class="regexp">/blog.da2k.com.br/</span><span class="number">2014</span>/<span class="number">03</span>/<span class="number">18</span>/meu-workflow-javascript-com-<span class="class"><span class="keyword">module</span>-<span class="title">pattern</span>/?451<span class="title">k</span></span></div></pre></td></tr></table></figure>

<p>Cada uma dessas URLs gerava sua própria thread de comentários. Não deveria, pois fazem parte do mesmo post, apenas com alguns parâmetros a mais.</p>
<h2 id="Como_resolver?">Como resolver?</h2>
<p>Fazendo uma pesquisa na API do Disqus, vi que o problema é bem simples de resolver :)</p>
<h2 id="A_solução_xD">A solução xD</h2>
<p>Você precisa apenas definir uma variável chamada <code>disqus_url</code> com a URL absoluta do seu post. Se você não fizer isso, o Disqus vai usar <code>window.location.href</code>, e consequentemente para cada chamada de query string diferente, ele vai gerar uma nova thread.</p>
<p>Coloque essa variável no início do código que o Disqus gera <strong>(linha 5)</strong>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"disqus_thread"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span></div><div class="line">    <span class="keyword">var</span> disqus_shortname = <span class="string">'your_disqus_shortname'</span>; <span class="comment">// required: replace example with your forum shortname</span></div><div class="line">    <span class="keyword">var</span> disqus_url = <span class="string">'http://www.yoursite.com/your-post-url/'</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* * * DON'T EDIT BELOW THIS LINE * * */</span></div><div class="line">    (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> dsq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); dsq.type = <span class="string">'text/javascript'</span>; dsq.async = <span class="literal">true</span>;</div><div class="line">        dsq.src = <span class="string">'//'</span> + disqus_shortname + <span class="string">'.disqus.com/embed.js'</span>;</div><div class="line">        (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(dsq);</div><div class="line">    })();</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">noscript</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://disqus.com"</span> <span class="attribute">class</span>=<span class="value">"dsq-brlink"</span>&gt;</span>comments powered by <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"logo-disqus"</span>&gt;</span>Disqus<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>And done :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/03/disqus.png" alt="Disqus"></p>
<p>Meu post sobre <a href="/2014/03/18/meu-workflow-javascript-com-module-pattern/">“Workflow Javascript com Module Pattern”</a> saiu na <a href="http://us5.campaign-archive1.com/?u=77b6594f10bba05dcc722c80e&amp;id=d85b8bbd77&amp;e=e3f205021c" target="_blank" rel="external">BrazilJS Weekly #69</a> <em>(obrigado a quem colocou lá o/)</em>, mas isso acabou me mostrando que eu tinha um pequeno “problema” com os comentários: como tinha uma query string na URL, o <a href="http://disqus.com/" target="_blank" rel="external">Disqus</a> achava que se tratava de uma página diferente e criava uma nova thread de comentários =/</p>
]]>
    
    </summary>
    
      <category term="disqus" scheme="http://blog.da2k.com.br/tags/disqus/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/tags/tips/"/>
    
      <category term="tips" scheme="http://blog.da2k.com.br/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meu workflow Javascript com Module Pattern]]></title>
    <link href="http://blog.da2k.com.br/2014/03/18/meu-workflow-javascript-com-module-pattern/"/>
    <id>http://blog.da2k.com.br/2014/03/18/meu-workflow-javascript-com-module-pattern/</id>
    <published>2014-03-18T22:16:38.000Z</published>
    <updated>2015-01-01T10:41:35.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/03/module-pattern.jpg" alt="Module Pattern"></p>
<p><a href="http://simplesideias.com.br/design-patterns-no-javascript-module" target="_blank" rel="external">Module Pattern</a> é muito utilizado por vários devs JS hoje em dia, e ele tem muitas variações. Em busca de um formato que facilitasse meu dia-a-dia, testei alguns, até que cheguei em um que me agradou (ao menos por agora xD).</p>
<p>Resolvi escrever esse post, no caso de mais alguém se interessar nesse formato de organização de código <strong>Javascript</strong> :)</p>
<a id="more"></a>

<h2 id="Premissas">Premissas</h2>
<p>O que me levou a seguir esse padrão foi, principalmente, poder separar minhas <em>regras de negócio</em> da manipulação do DOM em sim (isso falando de JS no client-side).</p>
<p>Claro que nada impede de usar algo assim também com <strong>NodeJS</strong>.</p>
<p>Você vai ver como fica fácil fazer <a href="http://pt.wikipedia.org/wiki/Test_Driven_Development" target="_blank" rel="external">testes unitários (TDD)</a> e <a href="http://pt.wikipedia.org/wiki/Behavior_Driven_Development" target="_blank" rel="external">testes de comportamento (BDD)</a> separadamente usando esse formato.</p>
<p>Vou mostrar passo-a-passo o que me levou a tomar todas as decisões para chegar nesse resultado final.</p>
<h2 id="Estrutura_de_arquivos_e_diretórios">Estrutura de arquivos e diretórios</h2>
<p>Os arquivos e diretórios ficarão organizados dessa forma:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── /controllers</div><div class="line"><span class="string">|   ├── controllerExample.js</span></div><div class="line">├── /models</div><div class="line"><span class="string">|   ├── modelExample.js</span></div><div class="line">├── /modules</div><div class="line"><span class="string">|   ├── moduleExample.js</span></div><div class="line">├── /vendor</div><div class="line"><span class="string">|   ├── (libs usadas no projeto)</span></div><div class="line">└── app.js</div></pre></td></tr></table></figure>

<p>No diretório <strong><code>models</code></strong> ficarão todos os arquivos com as regras de negócio do site/app/sistema (vou chamar só de <em>aplicação</em> para facilitar). Nos models, serão feitos os nossos testes unitários. Eles serão usados somente para consultar e devolver valores, sem tratamento.</p>
<p>Em <strong><code>controllers</code></strong>, serão tratados os dados recebidos de <code>models</code> e também as manipulações do DOM, eventos, etc., quando necessário.</p>
<p>Em <strong><code>modules</code></strong>, os módulos do projeto, criados para automatizar tarefas repetitivas (carousels, accordions, banners, chamadas Ajax, etc).</p>
<p>Em <strong><code>vendor</code></strong>, as libs usadas no projeto: jQuery, Underscore, etc., ou qualquer lib de terceiros, que você não vai alterar diretamente.</p>
<h2 id="Nomenclatura_dos_arquivos">Nomenclatura dos arquivos</h2>
<p>Controllers começam com <strong>controller</strong>-alguma-coisa.js e models com <strong>model</strong>-alguma-coisa.js. Os arquivos serão criados conforme as necessidades do projeto: separados por funcionalidade ou por partes específicas do projeto.</p>
<h2 id="O_código">O código</h2>
<h3 id="Escopo_Local">Escopo Local</h3>
<p>A primeira coisa é manter tudo em um escopo local, e adicionar ao escopo global somente o que for realmente necessário. Normalmente só irá para o escopo global os objetos principais de cada arquivo, que vou mostrar mais abaixo.</p>
<p>Para manter o escopo local, começamos a estrutura do nosso arquivo com uma função anônima autoexecutável (ou <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="external">IIFE</a>):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line">  </div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Dessa forma, mantemos todos os nossos métodos, variáveis e funções dentro de um escopo local. Passamos como parâmetro os objetos globais <strong>window</strong> e <strong>document</strong> para serem usados dentro do nosso escopo e facilitar a minificação do código. Se usar jQuery ou Underscore, pode usar algo como:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, $, undefined )</span> </span>{</div><div class="line">  </div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span>, jQuery );</div></pre></td></tr></table></figure>

<p>O próximo passo é criar nosso objeto principal, dentro dessa função anônima:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> app = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  </div><div class="line">  })();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Atribuiremos a <code>app</code> uma função autoexecutável para não precisarmos adicionar os parênteses quando chamarmos algum método interno. O <code>&quot;use strict&quot;</code> habilita o <strong>Strict Mode</strong> para ECMAScript 5. Se você não sabe o que é o Strict Mode, recomendo a leitura <a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/" target="_blank" rel="external">desse artigo (em inglês)</a>.</p>
<h3 id="Separando_métodos_privados_e_públicos">Separando métodos privados e públicos</h3>
<p>Esse foi o ponto principal que mudou da minha <a href="http://www.voltsdigital.com.br/labs/escrevendo-javascript-em-modulos/" target="_blank" rel="external">antiga abordagem do Module Pattern</a>. É sempre uma boa prática usar <a href="http://pt.wikipedia.org/wiki/Don&#39;t_repeat_yourself" target="_blank" rel="external">DRY</a> para manter as coisas organizadas.</p>
<p>No Module Pattern, a maneira mais comum utilizada para retornar somente métodos públicos é essa:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> app = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> obj = {};</div><div class="line">  </div><div class="line">    obj._privateMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Private Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    obj.publicMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Public Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    obj.otherPublicMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Other Public Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> {</div><div class="line">      publicMethod : obj.publicMethod,</div><div class="line">      otherPublicMethod : obj.otherPublicMethod</div><div class="line">    };</div><div class="line">  })();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Os métodos privados começam com <code>_</code> por convenção e não são retornados. Mas sempre que escrever um método público, vai ter que incluí-lo no <code>return</code>, ou seja, dois trabalhos.</p>
<p>Uma forma que encontrei de contornar isso foi assim:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> app = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">  </div><div class="line">    $private.privateMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Private Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    $public.publicMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Public Method'</span>;</div><div class="line">    };</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  })();</div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Assim você retorna todos os métodos e propriedades de <code>$public</code> e mantém os métodos e propriedades privados em <code>$private</code>. Usei o <code>$</code> pois <code>public</code> e <code>private</code> são palavras reservadas. Poderia usar também <code>_</code> ou qualquer outro <em>namespace</em>, sem problemas.</p>
<h3 id="Ordem_das_chamadas">Ordem das chamadas</h3>
<p>Para manter um padrão de organização, iremos fazer dessa forma: primeiro as <em>propriedades</em>, e depois os <em>métodos</em>. E os <em>privados</em> sempre antes dos <em>públicos</em>, ordenando tudo alfabeticamente. Nossa abordagem ficará dessa forma:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( window, document, undefined )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> app = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $private = {};</div><div class="line">    <span class="keyword">var</span> $public = {};</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Private Variables</div><div class="line">     */</div><div class="line">    $private.privateVar = <span class="string">'private var'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// -----------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Public Variables</div><div class="line">     */</div><div class="line">    $public.publicVar = <span class="string">'public var'</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// -----------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Private Methods</div><div class="line">     */</div><div class="line">    $private.privateMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Private method'</span>;</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="comment">// -----------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Public Methods</div><div class="line">     */</div><div class="line">    $public.publicMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'Init'</span>;</div><div class="line">    };</div><div class="line">    </div><div class="line">    <span class="comment">// -----------------------------------</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $public;</div><div class="line">  })();</div><div class="line">  </div><div class="line">  <span class="comment">// Global</span></div><div class="line">  <span class="built_in">window</span>.app = app;</div><div class="line">  </div><div class="line">})( <span class="built_in">window</span>, <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>Se eu precisar usar <code>app</code> em outro arquivo, posso retorná-la como método do objeto <code>window</code>, para que se torne um método global.</p>
<p>Todos os nossos arquivos terão esse mesmo padrão, mudando somente o nome do objeto principal. Para manter um padrão bem definido e organizado, o objeto deve ter o mesmo nome do arquivo, trocando o formato de <code>slug</code> por <code>camelCase</code>.</p>
<p>Em um próximo artigo, mostrarei um caso de uso desse formato, para facilitar o entendimento.</p>
<p>O que achou dessa abordagem? E como você organiza os seus arquivos Javascript? Comente!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/03/module-pattern.jpg" alt="Module Pattern"></p>
<p><a href="http://simplesideias.com.br/design-patterns-no-javascript-module" target="_blank" rel="external">Module Pattern</a> é muito utilizado por vários devs JS hoje em dia, e ele tem muitas variações. Em busca de um formato que facilitasse meu dia-a-dia, testei alguns, até que cheguei em um que me agradou (ao menos por agora xD).</p>
<p>Resolvi escrever esse post, no caso de mais alguém se interessar nesse formato de organização de código <strong>Javascript</strong> :)</p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/tags/javascript/"/>
    
      <category term="workflow" scheme="http://blog.da2k.com.br/tags/workflow/"/>
    
      <category term="module pattern" scheme="http://blog.da2k.com.br/tags/module-pattern/"/>
    
      <category term="mvc" scheme="http://blog.da2k.com.br/tags/mvc/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Manter repositório do Github forkado sincronizado com o original]]></title>
    <link href="http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/"/>
    <id>http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/</id>
    <published>2014-01-19T17:13:14.000Z</published>
    <updated>2014-12-31T20:16:39.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/01/github-sync-repo.png" alt="Sincronizar repositórios do Github"></p>
<p>Depois que você <em>forka</em> um projeto no Github, você faz as alterações necessárias e envia um <em>Pull Request</em> para o repositório original.</p>
<p>Se você precisa fazer mais alguma alteração no mesmo repositório no futuro, mas já tem outras colaborações no repositório original, como você procede para manter seu repositório atualizado? Copia as alterações manualmente para o seu repositório? Apaga e forka novamente? Chora?</p>
<a id="more"></a>

<p>O Git é uma ferramenta excepcional e, quando você passa a conhecê-lo mais a fundo, vai ver que não vai precisar fazer mais nada manualmente quando ele é usado no seu projeto. Existe uma forma muito prática de sincronizar os dois repos, e vou mostrá-la agora mesmo! Me acompanha? ;)</p>
<p>O seu repositório forkado normalmente é adicionado como <strong>origin</strong> quando você faz o clone. Para sincronizar com o repositório principal, adicione esse repositório com outro nome (no caso do exemplo, <strong>upstream</strong>), com o comando abaixo:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote <span class="keyword">add</span> upstream [ENDEREÇO <span class="pseudo">DO</span> REPOSITÓRIO PRINCIPAL]</div></pre></td></tr></table></figure>

<p>Substituindo <strong>[ENDEREÇO DO REPOSITÓRIO PRINCIPAL]</strong> pelo endereço do repositório (não diga :P)</p>
<p>Depois, para sincronizar os repositórios, execute o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> fetch upstream</div></pre></td></tr></table></figure>

<p>Finalmente, só dar merge na branch master:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="operator"><span class="keyword">merge</span> upstream/<span class="keyword">master</span></span></div></pre></td></tr></table></figure>

<p><strong>And done! ;)</strong></p>
<p>Mais fácil que isso, só o drag’n drop do Visual Studio :P</p>
<p>Brincadeiras a parte: curtiu a dica? Já conhecia? Conhece outras formas de fazer a mesma coisa? Comente!</p>
<p><strong>Link de referência:</strong> <a href="https://help.github.com/articles/syncing-a-fork" target="_blank" rel="external">https://help.github.com/articles/syncing-a-fork</a></p>
<blockquote>
<p><strong>UPDATE:</strong> Havia esquecido de incluir o comando para dar merge na sua branch xD Com o <code>fetch</code>, o Git apenas sincroniza as branchs que existem no repositório selecionado. Obrigado <a href="http://disqus.com/claudiosmweb/" target="_blank" rel="external">Claudio Sanches</a> e <a href="http://disqus.com/gabrielizaias/" target="_blank" rel="external">Gabriel Izaias</a> :D</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2014/01/github-sync-repo.png" alt="Sincronizar repositórios do Github"></p>
<p>Depois que você <em>forka</em> um projeto no Github, você faz as alterações necessárias e envia um <em>Pull Request</em> para o repositório original.</p>
<p>Se você precisa fazer mais alguma alteração no mesmo repositório no futuro, mas já tem outras colaborações no repositório original, como você procede para manter seu repositório atualizado? Copia as alterações manualmente para o seu repositório? Apaga e forka novamente? Chora?</p>
]]>
    
    </summary>
    
      <category term="git" scheme="http://blog.da2k.com.br/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo - criando um blog ao estilo "miojo"]]></title>
    <link href="http://blog.da2k.com.br/2014/01/05/hexo-criando-um-blog-ao-estilo-miojo/"/>
    <id>http://blog.da2k.com.br/2014/01/05/hexo-criando-um-blog-ao-estilo-miojo/</id>
    <published>2014-01-05T16:18:00.000Z</published>
    <updated>2014-12-31T20:16:39.000Z</updated>
    <content type="html"><![CDATA[<p>Você é desenvolvedor web e gosta de escrever em <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>? Então aprenda como fazer um blog em apenas 3 minutos com o <strong><a href="http://zespia.tw/hexo/" target="_blank" rel="external">Hexo</a></strong>!</p>
<p><img src="http://blog.da2k.com.br/uploads/2014/01/hexo.jpg" alt="Hexo"></p>
<a id="more"></a>

<p>O Hexo é um framework para criação de blogs, escrito em <strong><a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a></strong> para geração de arquivos estáticos. Com ele, é possível criar um blog em apenas 3 minutos! Quer apostar? ;)</p>
<h2 id="Primeiros_passos">Primeiros passos</h2>
<p>Primeiramente você precisa ter o NodeJS e o Git instalados no seu computador. Se ainda não tem e não sabe como fazê-lo, recomendo <a href="http://udgwebdev.com/node-js-para-leigos-instalacao-e-configuracao/" target="_blank" rel="external">esse tutorial</a> para instalar o Node, ou <a href="http://zespia.tw/hexo/docs/index.html" target="_blank" rel="external">esse outro, direto do site do Hexo</a>, mostrando a melhor forma de instalar em qualquer sistema. Com o Node e o Git instalados, vamos instalar o Hexo.</p>
<h2 id="Instalando_o_Hexo">Instalando o Hexo</h2>
<p>Para instalar o Hexo, utilize o comando abaixo no seu terminal:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">sudo</span>] npm install -g hexo</div></pre></td></tr></table></figure>

<p>Esse comando instalará o Hexo globalmente, deixando o comando <code>hexo</code> disponível no terminal.</p>
<h2 id="Criando_os_arquivos">Criando os arquivos</h2>
<p>Agora vamos criar os arquivos necessários para o nosso projeto.<br>Crie um diretório chamado <code>my-hexo-blog</code>. Acesse esse diretório no seu terminal, e execute o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">init</span></div></pre></td></tr></table></figure>

<p><strong>E pronto!</strong></p>
<p>Será gerada a seguinte estrutura de arquivos:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── scripts</div><div class="line">├── source</div><div class="line"><span class="string">|   ├── _drafts</span></div><div class="line"><span class="string">|   └── _posts</span></div><div class="line">└── themes</div></pre></td></tr></table></figure>

<p>Explicarei mais à frente sobre essa estrutura.</p>
<h2 id="Iniciando_o_Server">Iniciando o Server</h2>
<p>Agora, para ver seu blog rodando, execute o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure>

<p>Se tudo correu bem, você receberá a seguinte mensagem:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[info] Hexo <span class="keyword">is</span> running at localhos<span class="variable">t:4000</span>/. Press Ctrl+C <span class="keyword">to</span> <span class="keyword">stop</span>.</div></pre></td></tr></table></figure>

<p>Agora acesse <code>http://localhost:4000/</code> no seu navegador e veja como ficou seu blog!</p>
<p>Muito fácil não? Um blog <em>like a miojo</em> :P</p>
<p>Agora vou mostrar como fazer algumas configurações mais básicas para o seu blog, como trocar de tema, mudar título, etc., e depois fazer deploy para o <a href="http://pages.github.com/" target="_blank" rel="external">Github Pages</a>, para que você tenha um local para hospedar seu blog.</p>
<h2 id="O_arquivo__config-yml">O arquivo <code>_config.yml</code></h2>
<p>Nesse arquivo fica toda a configuração padrão do blog. Cada tema pode ter um <code>_config.yml</code> também, para configurações específicas do tema. Não tem muito segredo em mexer nele.</p>
<p>Digamos que o YML (pra quem não conhece), seja um JSON sem os brackets <code>{}</code> e as aspas duplas <code>&quot;&quot;</code>. Ele trabalha com base na indentação.</p>
<p>Exemplo de um JSON:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">propriedade</span>": <span class="value"><span class="string">"valor"</span></span>,</div><div class="line">  "<span class="attribute">propriedade2</span>" : <span class="value"><span class="string">"valor2"</span></span>,</div><div class="line">  "<span class="attribute">propriedade3</span>" : <span class="value">{</span></div><div class="line">    "<span class="attribute">propriedade4</span>" : <span class="value"><span class="string">"valor4"</span></span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>O YML referente a esse JSON ficaria assim:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="label">propriedade:</span> valor</div><div class="line"><span class="label">propriedade2:</span> valor2</div><div class="line"><span class="label">propriedade3:</span></div><div class="line">  propriedade4: valor4</div></pre></td></tr></table></figure>

<p>Ao editar o arquivo <code>_config.yml</code>, vai ver algumas propriedades como <code>title</code>, <code>author</code>, <code>url</code>, etc. Mude conforme as configurações do seu blog. Para ver para que serve cada um, consulte <a href="http://zespia.tw/hexo/docs/configuration.html" target="_blank" rel="external">esse link</a>.</p>
<h2 id="Escrevendo_seu_primeiro_post">Escrevendo seu primeiro post</h2>
<p>Para criar um novo post, execute o comando no terminal:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"Meu novo post"</span></div></pre></td></tr></table></figure>

<p>Isso irá criar um arquivo <code>meu-novo-post.md</code> no diretório <code>source/_posts/</code> com o seguinte conteúdo:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: Meu novo post</div><div class="line">date: 2014-01-05 20:53:29</div><div class="line"><span class="header">tags:</span></div><div class="line">---</div></pre></td></tr></table></figure>

<p>Abaixo dos 3 traços <code>---</code> é onde você deve começar a digitar o seu post no formato Markdown. As variáveis title, date e tags são usadas no tema para mostrar essas informações ao usuário.</p>
<p>Para fazer com que Hexo assista todas as alterações no seu post enquanto você escreve, execute o servidor com o parâmetro <code>--debug</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> server --<span class="built_in">debug</span></div></pre></td></tr></table></figure>

<p>Pressione <code>Ctrl+C</code> quando quiser parar.</p>
<h2 id="Gerando_os_estáticos">Gerando os estáticos</h2>
<p>Agora você precisa gerar os arquivos estáticos que serão “upados” para o Github Pages. Para isso, rode o comando no terminal (no diretório <code>my-hexo-blog</code>):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span></div></pre></td></tr></table></figure>

<p>Perceba que o Hexo criou um diretório <code>public</code>, com todos os arquivos estáticos necessários para o seu blog funcionar.</p>
<blockquote>
<p>PS.: Você pode mudar o nome dos diretórios <code>public</code> e <code>source</code> no arquivo <code>_config.yml</code></p>
</blockquote>
<p>O Hexo já vem com um post padrão <em>Hello World</em>. Você pode remover esse arquivo do diretório <code>source/_posts/</code> sem maiores problemas.</p>
<p>Sempre que gerar um novo post, para gerar os estáticos, sempre execute o comando <code>hexo generate</code>, para que os estáticos estejam atualizados com a última versão dos seus posts.</p>
<h2 id="Deploy_para_Github_Pages">Deploy para Github Pages</h2>
<p>Para fazer deploy para o Github Pages é bem simples. Configure no arquivo <code>_config.yml</code> a propriedade <code>deploy</code> (no final do arquivo), dessa forma:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: github</div><div class="line">  repository: git@github.com:fdaciuk/fdaciuk.github.<span class="built_in">io</span>.git</div></pre></td></tr></table></figure>

<p>No valor de <code>repository</code>, inclua o seu repositório.</p>
<p>O Github te dá um subdomínio com o seu nome de usuário para você usar. No meu caso, ficou como <strong><a href="http://fdaciuk.github.io" target="_blank" rel="external">http://fdaciuk.github.io</a></strong>.</p>
<p>Se você quiser usar esse domínio para o seu blog, crie um repositório no seu Github chamada <code>your_username.github.io</code>, trocando o <code>your_username</code> pelo seu nome de usuário. Copie a URL do repositório e cole no <code>_config.yml</code>, na propriedade <code>repository</code>, como mostrado acima.</p>
<p>Depois execute o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> deploy</div></pre></td></tr></table></figure>

<p><strong>E pronto!</strong> Aguarde algus minutos e já poderá acessar seu blog em <strong>your_username.github.io</strong>.</p>
<p>Agora seu blog está pronto e publicado!</p>
<p>Você vai perceber que o Hexo criou um diretório <code>.deploy</code>, onde ficarão os arquivos que irão para o seu repositório ao rodar o comando de deploy. Quando você cria um post novo, o Hexo vai enviar somente os arquivos alterados para o Github.</p>
<p>Veja que os diretório <code>public</code> e <code>.deploy</code> são gerados pelo Hexo. Eles contém somente os arquivos estáticos. Logo, se você precisar removê-los, não há problema algum. Pode fazer sem medo :)</p>
<p>Para saber mais sobre o Github Pages, siga <a href="http://pages.github.com/" target="_blank" rel="external">esse link</a>.</p>
<h2 id="Domínio_personalizado_usando_Github_Pages">Domínio personalizado usando Github Pages</h2>
<p>Se você notar, o domínio do meu blog é <code>http://blog.da2k.com.br</code>. Para fazer isso é muito simples. Siga os procedimentos <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages" target="_blank" rel="external">desse link</a> para adicionar uma entrada <strong>CNAME</strong> que irá apontar para o endereço do seu blog.</p>
<p>Depois, crie um arquivo chamado <code>CNAME</code> no diretório <code>source</code> com a URL do seu blog. No meu caso está assim:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blog.da2k.<span class="keyword">com</span>.<span class="keyword">br</span></div></pre></td></tr></table></figure>

<p>Execute o <code>hexo generate</code> para gerar os estáticos e copiar o <code>CNAME</code> para a raiz de <code>public</code>. Então, execute o <code>hexo deploy</code> e pronto! Aguarde até que o DNS se propague. Isso pode levar algumas horas. Em breve, seu blog estará no seu domínio personalizado ;)</p>
<h2 id="Considerações_sobre_arquivos_estáticos">Considerações sobre arquivos estáticos</h2>
<p>Ao fazer o deploy do seu projeto, o Hexo irá gerar apenas arquivos estáticos (HTML, CSS e JS). Isso traz algumas vantagens e desvantagens.</p>
<p>A vantagem disso é que o conteúdo será carregado muito mais rápido do que se fosse feito em um software como o WordPress, por exemplo, pois o servidor não precisará processar nada, somente entregar para o nevagador do usuário o HTML, CSS e JS, que o navegador vai tratar de interpretar.</p>
<p>A desvantagem é que você perde a parte dinâmica da coisa. Não vai ser possível fazer, por exemplo, uma página de busca, comentários nativos, entre outras coisas que talvez facilitariam seu trabalho.</p>
<p>Claro que existem algumas soluções para isso. No caso da busca, o Hexo por padrão utiliza o Google, com a URL do seu site sendo chamada antes de fazer a busca <code>(seusite.com.br: busca por algo)</code>. Isso faz com que o Google procure resultados somente no <em>seu site</em>. Mas o usuário vai pro site do Google pra ver o resultado e depois volta novamente para ver o conteúdo.</p>
<p>Para comentários, temos os plugins do <a href="http://disqus.com/" target="_blank" rel="external">Disqus</a>, <a href="https://support.google.com/blogger/answer/2981015?hl=en" target="_blank" rel="external">Google+</a>, ou <a href="https://developers.facebook.com/docs/plugins/comments/" target="_blank" rel="external">Facebook</a>. Todos resolvem bem o problema de comentários para arquivos estáticos. Nesse caso, não há a necessidade de ter os comentários nativos.</p>
<p>A dica que fica é: coloque sempre na balança para ver qual a melhor solução para o seu problema. Para desenvolvedores, um gerador estático sempre é uma excelente solução. Mas se estiver fazendo um blog para um cliente, onde <em>ele</em> vai alimentar o conteúdo do site, não seria boa ideia deixar ele escrever em Markdown, concorda? ;)</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Estou gostando bastante de trabalhar com o Hexo. Já estava para começar a blogar faz um tempo, e o Hexo me proporcionou uma excelente experiência para começar a fazer isso muito rapidamente. Espero que você também goste!</p>
<p>Até os próximos artigos!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Você é desenvolvedor web e gosta de escrever em <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>? Então aprenda como fazer um blog em apenas 3 minutos com o <strong><a href="http://zespia.tw/hexo/" target="_blank" rel="external">Hexo</a></strong>!</p>
<p><img src="http://blog.da2k.com.br/uploads/2014/01/hexo.jpg" alt="Hexo"></p>
]]>
    
    </summary>
    
      <category term="hexo" scheme="http://blog.da2k.com.br/categories/hexo/"/>
    
  </entry>
  
</feed>
