<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Da2k Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.da2k.com.br/"/>
  <updated>2015-02-11T03:13:56.142Z</updated>
  <id>http://blog.da2k.com.br/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[WordPress - controlando a exibição dos dados]]></title>
    <link href="http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/"/>
    <id>http://blog.da2k.com.br/2015/02/11/wordpress-controlando-a-exibicao-dos-dados/</id>
    <published>2015-02-11T00:00:00.000Z</published>
    <updated>2015-02-11T03:13:30.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-controller.jpg" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/" target="_blank" rel="external">post anterior</a>, criamos a interface para nossa view. Hoje veremos como criar a base que vai controlar o conteúdo retornado! Vem comigo? ;)</p>
<a id="more"></a>

<h2 id="O_controller">O controller</h2>
<p>Lembra que criamos o arquivo <code>functions/controllers/controller-single.php</code>? A primeira coisa que precisamos fazer então, é incluir esse arquivo na nossa estrutura. Mas onde?</p>
<p>No <strong>functions.php</strong>! Esse arquivo é a “cola” que vai juntar todo o controle da nossa aplicação às nossas <em>views</em>.</p>
<p>Vamos então incluir nosso controller no início do nosso <code>functions.php</code>, logo abaixo do <code>require</code> do <code>security.php</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/security.php'</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/controllers/controller-single.php'</span>;</div></pre></td></tr></table></figure>

<p>Só um pequeno adendo: o <strong>Pedro Diaz</strong> me questionou <a href="http://blog.da2k.com.br/2015/01/14/wordpress-o-arquivo-functions-php/#comment-1792414180" target="_blank" rel="external">nesse post</a> que, quando ele tentava incluir o <code>security.php</code> usando um caminho relativo, o arquivo não era encontrado. Para resolver o problema, podemos fazer como eu fiz no exemplo acima: utilizar a <em>constante mágica</em> do PHP, <code>__DIR__</code>, que vai retornar o diretório atual. A partir daí, você aponta para onde está o arquivo.</p>
<p>Essa constante só funciona à partir do PHP 5.3. Então, se você estiver usando uma versão anterior a essa, utilize <code>dirname( __FILE__ )</code> no lugar :)</p>
<p>Agora voltando ao post: no arquivo <code>controller-single.php</code>, vamos criar a classe que vai gerenciar nosso conteúdo:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/../security.php'</span>;</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller_Single</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>{</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;thumbnail</span> = <span class="string">'thumbnail'</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;title</span> = <span class="string">'title'</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;content</span> = <span class="string">'content'</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Já expliquei sobre a boa prática de não fechar o <code>&lt;?php</code> quando você tem só código PHP no arquivo, né? ;)</p>
<p>Certo, agora precisamos instanciar essa classe na nossa view (<code>single.php</code>). Coloque o código no início do arquivo, logo abaixo de <code>get_header()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$single_post</span> = <span class="keyword">new</span> Controller_Single();</div></pre></td></tr></table></figure>

<p>Essa estrutura é a base principal que precisaremos para que o conteúdo seja mostrado corretamente na nossa view.</p>
<p>Se você não conhece <em>Orientação à objetos</em> no PHP, vou explicar rapidamente pra você entender o que foi feito, mas recomendo que você <a href="http://php.net/manual/pt_BR/language.oop5.php" target="_blank" rel="external">leia sobre o assunto</a>, pois vai ser bastante importante para nós, daqui pra frente ;)</p>
<p>Pra quem não conhece, o que pode parecer mais estranho é o método <code>__construct()</code>. Quando você cria uma classe PHP, usando <code>class Nome_Da_Classe</code>, você pode utilizar o método <code>__construct()</code> para “construir” o objeto, quando este instanciar a classe. Um outro detalhe que você deve ter reparado é o <code>$this</code>. Esse cara representa o objeto em si. Ou seja: toda propriedade ou método de dentro da <code>class</code>, pode ser chamado ali dentro via <code>$this-&gt;property_name</code> para chamar propriedades, ou <code>$this-&gt;method_name()</code>, para chamar métodos.</p>
<p>No arquivo <code>single.php</code>, repare que utilizamos o <code>new Controller_Single()</code> para instanciar a classe. Agora, o <code>$this</code>, que você vê dentro da classe, está representado pelo <code>$single_post</code>. Por isso nós conseguimos chamar o <code>thumbnail</code>, <code>title</code> e <code>content</code>, que chamamos de <em>propriedades</em> da classe, com a sintaxe de objetos:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="variable">$this</span><span class="variable">-&gt;thumbnail</span>;</div><div class="line"><span class="keyword">echo</span> <span class="variable">$this</span><span class="variable">-&gt;title</span>;</div><div class="line"><span class="keyword">echo</span> <span class="variable">$this</span><span class="variable">-&gt;content</span>;</div></pre></td></tr></table></figure>

<p>Basicamente, só para que você não fique perdido nos nomes:</p>
<ul>
<li>Quando você cria uma <strong>variável</strong> em qualquer parte do seu código PHP, o nome que se dá a ela é <em>variável</em>. Quando você cria uma variável dentro de uma <em>classe PHP</em>, o nome dado é <em>propriedade</em> da classe.</li>
<li>Quando você cria uma <strong>função</strong> em qualquer parte do seu código, damos o nome de <em>função</em>. Mas quando você cria uma função dentro de uma classe, ela é chamada <em>método</em>.</li>
</ul>
<p>Toda propriedade de uma classe, fica acessível para todos os métodos da classe, ou seja, se criarmos um outro método dentro da nossa classe, nós vamos conseguir acessar o valor de <code>$this-&gt;thumbnail</code>, por exemplo, dentro desse novo método, sem precisar usar o <code>global</code>. Isso deixa o código muito mais limpo e organizado.</p>
<p>Bom, isso foi só uma introdução pra contextualizar, pra quem ainda não conhece orientação a objetos. Se ainda ficar alguma dúvida, você pode perguntar nos comentários, ok? Vamos em frente? ;)</p>
<h2 id="Sobre_o_contéudo">Sobre o contéudo</h2>
<p>Ainda temos um conteúdo fictício, que colocamos só para ver as coisas funcionando. Precisamos usar o conteúdo do post mesmo. Mas antes disso, vamos alterar um pouco nosso código.</p>
<p>Nós conseguimos instanciar a classe <code>Controller_Single()</code> dentro de <code>single.php</code>, porque, dentro da estrutura do WordPress, ele carrega o arquivo <code>functions.php</code> antes de qualquer template dentro do seu tema. Então, tudo o que você adiciona no <code>functions.php</code>, automaticamente fica disponível em todos os seus templates.</p>
<p>Mas nesse caso, nós não iremos instanciar essa classe diretamente na nossa view. Vamos fazer uso dos <a href="http://codex.wordpress.org/Plugin_API/Hooks" target="_blank" rel="external"><em>hooks</em></a>, para que possamos chamar os dados da single somente quando realmente eles forem necessários. Com isso, vamos aprender também como criar nossos próprios <em>hooks</em> personalizados!</p>
<h2 id="Hooks">Hooks</h2>
<p>Como já falei em um artigo anterior, <em>hooks</em> são ganchos deixados por todo o código do <strong>WordPress</strong> pelos seus desenvolvedores, para que você possa “pendurar” trechos de código em momentos específicos.</p>
<p>Por exemplo: nós temos o <em>hook</em> <strong>the_title</strong>, que é executado sempre que você chama a template tag <code>the_title()</code>, ou retorna o título com <code>get_the_title()</code>. Todas as template tags tem os dois formatos: o que “dá <em>echo</em>“ no conteúdo, e o que retorna o conteúdo.</p>
<p><em>Pra quê isso?</em></p>
<p>A vantagem disso é que, com as <em>template tags</em> (que nada mais são do que simples funções do PHP), que dão <em>echo</em> no conteúdo, você não precisa escrever o <em>echo</em>. Já se você quiser salvar o valor em uma variável, você utiliza a versão prefixada com <code>get_</code>, que vai retornar o valor, ao invés de printar. Basicamente a regra para essas funções é colocar o <code>get_</code> na frente, sempre que você quiser retornar, salvo em alguns casos específicos, como quando você quer pegar um link: a função que dá <em>echo</em> é a <code>the_permalink()</code>. E a função que retorna é a <code>get_permalink()</code>. O recomendado é SEMPRE - Quando eu disse mesmo? SEMPRE! - <a href="http://codex.wordpress.org/Template_Tags" target="_blank" rel="external">consultar o Codex</a> quando você tiver dúvidas :)</p>
<p>Explicadas as <em>template tags</em>, vamos aos <em>hooks</em>!</p>
<p>Temos dois formatos de hooks que podemos utilizar: <code>actions</code> e <code>filters</code>.</p>
<p>A sintaxe para usá-los é a seguinte:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">add_action( <span class="string">'hook_name'</span>, <span class="string">'function_callback'</span> );</div><div class="line">add_filter( <span class="string">'hook_name'</span>, <span class="string">'function_callback'</span> );</div></pre></td></tr></table></figure>

<p><em>Pra que servem as duas funções?</em></p>
<h2 id="Actions">Actions</h2>
<p>De uma forma bem resumida: as <em>actions</em> “dão <em>echo</em>“ em valores, ou não precisam retornar nada. Você passa como primeiro parâmetro da função <code>add_action</code> o nome do <code>hook</code> onde será executada a <em>função de callback</em>, passada no segundo parâmetro.</p>
<p>Lembra que utlizamos o <em>hook</em> <code>after_setup_theme</code> no nosso <code>functions.php</code>, para adicionar suporte às thumbnails? Vamos lembrar como nós fizemos? Olha só o nosso <code>functions.php</code> atualizado:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/security.php'</span>;</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/functions/controllers/controller-single.php'</span>;</div><div class="line">  </div><div class="line">add_action( <span class="string">'after_setup_theme'</span>, <span class="string">'setup_features'</span> );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup_features</span><span class="params">()</span> </span>{</div><div class="line">    add_theme_support( <span class="string">'post-thumbnails'</span> );     </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Isso significa que, em algum lugar do código do <strong>WordPress</strong>, existe o gancho <code>after_setup_theme</code>, que deve executar após o <code>setup</code> do tema, como o próprio nome diz :P</p>
<p>Com o <code>add_action</code>, nós “penduramos” nesse gancho a função <code>setup_features</code>. Quando esse gancho for executado, nossa função também será :D</p>
<p>Para criar um gancho para uma <code>action</code>, nós usamos a função <code>do_action()</code>.</p>
<p>Por exemplo: se você colocar em qualquer lugar do seu código um <code>do_action( &#39;nada&#39; )</code>, você acabou de deixar um gancho ali.<br>Você pode pendurar qualquer coisa nesse gancho, a partir de qualquer outra parte do seu código, usando: </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_action( <span class="string">'nada'</span>, <span class="string">'funcao_callback'</span> );</div></pre></td></tr></table></figure>

<p>Deu pra entender até aqui?</p>
<h2 id="Filters">Filters</h2>
<p>E os <code>filters</code>, são ganchos que retornam valores.</p>
<p>Quando você usa:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_filter( <span class="string">'hook_name'</span>, <span class="string">'function_callback'</span> );</div></pre></td></tr></table></figure>

<p>A sua função de callback deve sempre ter um <code>return</code> no final, retornando um valor qualquer, mas NUNCA um <em>echo</em>.</p>
<p><em>Por que?</em></p>
<p>Porque os ganchos para <code>filters</code> são atribuídos à variáveis, ou então, onde é deixado o gancho, ele já tem um <code>echo</code> antes. A função que deixa o gancho para <code>filters</code> é a <code>apply_filters</code>.</p>
<p>Então, normalmente você vai ter algo assim:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$wp_content</span> = apply_filters( <span class="string">'the_content'</span>, <span class="string">'content_default'</span> );</div></pre></td></tr></table></figure>

<p>Então, quando você usar: </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add_filter( <span class="string">'the_content'</span>, <span class="string">'callback_function'</span> );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback_function</span><span class="params">( <span class="variable">$content_default</span> )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'content'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>O valor retornado pela função será passado para a variável <code>$wp_content</code>. Perceba o segundo parâmetro nessa função: ele é o valor padrão que a variável vai receber. Ou seja, se não tiver nada “pendurado” nesse gancho, <code>$wp_content</code> irá receber o valor <code>&#39;content_default&#39;</code>. Perceba na nossa função de callback que, os parãmetros adicionais que passamos em <code>apply_filters()</code> (sim, pode ter mais de um), são transferidos como parâmetros da função de callback :D</p>
<p>Agora vamos ver como isso se aplica na prática! Como usar no nosso tema?</p>
<h2 id="Usando_o_hook_no_nosso_template">Usando o hook no nosso template</h2>
<p>No nosso <code>single.php</code>, nós iremos trocar a linha:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$single_post</span> = <span class="keyword">new</span> Controller_Single();</div></pre></td></tr></table></figure>

<p>Pelo seguinte código:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">the_post();</div><div class="line"><span class="variable">$single_post</span> = apply_filters( <span class="string">'get_single_content'</span>, <span class="keyword">false</span> );</div></pre></td></tr></table></figure>

<p>Primeiro chamamos <code>the_post()</code>, pois o WP só irá usar esse template se um post existir. Então já chamamos a função <code>the_post()</code> para que possamos utilizar as <code>template_tags()</code> apontando as informações para o post em questão. Devemos sempre deixar a chamada do <code>post()</code> no arquivo de template principal, pois isso garante que, se tivermos partials, as <code>template_tags()</code> funcionarão também nessas partials.</p>
<p>Pronto! Deixamos um gancho na nossa <em>view</em> <code>single.php</code>, que irá receber todo o conteúdo que precisamos para mostrar os dados do post. Isso nos dá uma liberdade muito maior de usar a classe <code>Controller_Single</code> somente para organizar o conteúdo enviado para a view <code>single.php</code>, e trabalhar com outros objetos dentro dessa classe :D</p>
<p>E adivinha onde iremos pendurar código para esse gancho <code>get_single_content</code>?</p>
<p>Isso mesmo! No nosso controller!</p>
<p>Vamos então mudar um pouco a estrutura do <code>Controller_Single.php</code>. Deixe assim nosso métod <code>__construct()</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/../security.php'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller_Single</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>{</div><div class="line">        add_filter( <span class="string">'get_single_content'</span>, <span class="keyword">array</span>( <span class="variable">$this</span>, <span class="string">'get_single_content'</span> ) );</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>E, no final do arquivo, instancie a classe:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Controller_Single();</div></pre></td></tr></table></figure>

<p>Quando o arquivo for executado, a classe será instanciada automaticamente, e o gancho <code>get_single_content</code>, que está em <code>__construct()</code>, será ativado. Então, somente quando for encontrado o <code>apply_filters( &#39;get_single_content&#39; )</code>, é que a função passada no segundo parâmetro será executada.</p>
<p><em>Perae, mas você falou que o segundo parâmetro deveria ser o nome de uma função! Por que você passou um array?</em></p>
<p>Porque nós queremos usar um método da classe <code>Controller_Single</code>. Quando trabalhamos com orientação a objetos no PHP, sempre que precisamos passar uma função como <code>String</code>, que será executada em um momento futuro, nós usamos um array, passando no primeiro parâmetro o nome da classe em formato de <code>String</code> ou, se for um método da classe que você está, pode usar o <code>$this</code> para referenciar essa classe.</p>
<p>Fazer isso é o mesmo que dizer:</p>
<p><em>Ao encontrar o gancho <strong>get_single_content</strong>, execute o método <code>$this-&gt;get_single_content()</code></em>.</p>
<p>Agora, vamos pegar o conteúdo do post mesmo. Ainda na classe <code>Controller_Single</code>, crie um método público, chamado <code>get_single_content</code> (sim, o mesmo nome do gancho para facilitar encontar depois).</p>
<p>Nesse método, você vai então fazer o loop, ou retornar as informações que você montou na sua interface, no arquivo <code>single.php</code>. Então, faça isso no controller <code>Controller_Single</code>:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_single_content</span><span class="params">()</span> </span>{</div><div class="line">    <span class="variable">$single_content</span> = <span class="keyword">new</span> StdClass();</div><div class="line">    <span class="variable">$single_content</span><span class="variable">-&gt;thumbnail</span> = has_post_thumbnail() ? get_the_post_thumbnail() : <span class="string">''</span>;</div><div class="line">    <span class="variable">$single_content</span><span class="variable">-&gt;title</span> = get_the_title();</div><div class="line">    <span class="variable">$single_content</span><span class="variable">-&gt;content</span> = get_the_content();</div><div class="line">    <span class="keyword">return</span> <span class="variable">$single_content</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>A classe <code>StdClass()</code> que você pode ver sendo instanciada ali, é uma classe parão do PHP, em branco, para que você possa criar objetos rapidamente, sem precisar criar uma nova classe.</p>
<p>Perceba que a lógica do <code>post_thumbnail</code> nós fizemos ali no <em>controller</em>. Nada de lógica na view! Se precisamos testar qualquer coisa, que seja no <em>controller</em>, ou, se o projeto começar a ficar muito grande, separar os controllers em <em>services</em>.</p>
<p>Executando agora nosso site, podemos ver que tudo funciona como deveria!</p>
<p>Essa é a forma que eu uso hoje para separar responsabilidades! Gostou? Achou fácil? Difícil? Quero saber sua opinião, e como você estrutura seus temas no WP! Comente! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-controller.jpg" alt=""></p>
<p>No <a href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/" target="_blank" rel="external">post anterior</a>, criamos a interface para nossa view. Hoje veremos como criar a base que vai controlar o conteúdo retornado! Vem comigo? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Separando as responsabilidades]]></title>
    <link href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/"/>
    <id>http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/</id>
    <published>2015-02-10T00:00:00.000Z</published>
    <updated>2015-02-10T09:05:56.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-responsability-separator.jpg" alt=""></p>
<p>Vamos começar a organizar melhor nosso tema, separando as responsabilidades. Tiraremos toda a lógica da view, e trataremos em <em>controllers</em> separados. Vamos ver como isso fica na prática? ;)</p>
<a id="more"></a>

<p>Pra começar, acompanhe o tema que estamos desenvolvendo juntos: <a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br" target="_blank" rel="external">https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br</a></p>
<p>A grande vantagem de trabalhar com o WordPress, é que ele não nos prende a uma estrutura específica. Precisamos seguir algumas convenções, mas podemos facilmente organizar nossos arquivos e separar como cada coisa é feita de forma bem fácil.</p>
<p>Esse formato que vou mostrar hoje, é como eu uso nos meus projetos. É importante que fique claro que, existem várias formas de fazer o que veremos hoje. Essa não é a forma “absolutamente certa”, mas é como resolve os problemas pra mim.</p>
<p>Chega de lenga-lenga, vamos ao que interessa: código!</p>
<h2 id="Single">Single</h2>
<p>No último post, vimos que, no <strong>WordPress</strong>, temos alguns Tipos de Conteúdo padrão, mas que também podemos criar os nossos próprios. Hoje veremos o template <code>single.php</code>.</p>
<p>Então, antes de qualquer coisa, crie esse arquivo na raiz do seu tema. Nossa estrutura agora deve estar assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── footer.php</div><div class="line">├── /functions</div><div class="line">│   └── security.php</div><div class="line">├── functions.php</div><div class="line">├── header.php</div><div class="line">├── index.php</div><div class="line">├── single.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Fazendo isso, vamos começar a brincadeira! O <code>single.php</code> serve para mostrar uma postagem específica.<br>Quando você acessa a URL de um post, por exemplo, o WordPress procura usa esse template para renderizar o post.</p>
<p>Mas o <code>single.php</code> vai muito além disso: segundo a <a href="http://codex.wordpress.org/Template_Hierarchy" target="_blank" rel="external">hierarquia de templates</a> do <strong>WordPress</strong>, quando você acessa a URL de uma postagem (seja do <em>Post Type</em> “post” ou qualquer outro criado por você), a busca pelo template é feita na seguinte ordem:</p>
<p>Primeiro o <strong>WordPress</strong> procura na raiz da sua aplicação, um arquivo chamado <code>single-{post-type}.php</code>, onde `{post-type} é o nome do seu <em>Post Type</em>.</p>
<p>Exemplo: imagine que você tem um <em>Post Type</em> chamado filmes, e você quer acessar a URL que leva para o filme <strong>The Avengers</strong>. Ao acessar a URL <code>http://seusite.com.br/filmes/the-avengers/</code>, o <strong>WordPress</strong> irá verificar se no seu tema você tem um arquivo chamado <code>single-filmes.php</code>.</p>
<p>Se esse arquivo não existir, o WordPress vai procurar o arquivo <code>single.php</code> (que é o que estamos vendo agora). Se encontrar, é nese arquivo que a postagem será renderizada. Senão, a renderização é feita na <code>index.php</code>.</p>
<p>Perceba que a <code>index.php</code> é o fallback para todos os templates, por isso é importante mantê-la no seu projeto, ainda que você quase não a use, ou use pouco. Fazendo a cópia da <code>index.php</code> na <code>single.php</code>, nossa <code>single</code> deve estar com essa estrutura:</p>
<p><a href="https://github.com/fdaciuk/wordpress-base-theme-da2k.com.br/blob/7e61f6f73153641a438a4b8ca09da7bb9e2361f3/index.php" target="_blank" rel="external">Estrutura da single.php</a></p>
<p>Mantivemos essa estrutura, pois precisamos apenas mostrar um post. Não é necessário o loop aqui, somente as <em>template tags</em>.</p>
<h2 id="Interface">Interface</h2>
<p>Para separar as responsabilidades, não podemos deixar lógica alguma na nossa view. Os templates que o WordPress disponibiliza não deveriam ter nenhuma lógica ou regra de negócio. Isso precisa ficar em arquivos à parte.</p>
<p>No nosso caso, vamos utilizar <em>controllers</em> para nos ajudar a organizar as coisas. Crie no diretório <code>functions/</code>, um outro diretório chamado <code>controllers</code>. E dentro desse diretório, crie um arquivo chamado <code>controller-single.php</code>. A nossa estrutura agora deveria estar assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── footer.php</div><div class="line">├── /functions</div><div class="line">│   ├── /controllers</div><div class="line">│   │   └── controller-single.php</div><div class="line">│   └── security.php</div><div class="line">├── functions.php</div><div class="line">├── header.php</div><div class="line">├── index.php</div><div class="line">├── single.php</div><div class="line">└── style.css</div></pre></td></tr></table></figure>

<p>Cada <em>controller</em> conterá uma <em>classe PHP</em>, que irá responder por uma página específica, ou por URL. No nosso caso, estamos criando primeiramente um controller que vai gerenciar nossa <code>single.php</code>.</p>
<p>Vamos agora fazer algumas mudanças na <code>single.php</code>. Primeiro de tudo, vamos criar nossa interface. Nosso <code>single</code> deve ficar assim:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'functions/security.php'</span>;</div><div class="line">get_header();</div><div class="line"><span class="preprocessor">?&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$single_post</span><span class="variable">-&gt;thumbnail</span> <span class="preprocessor">?&gt;</span></span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span></div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$single_post</span><span class="variable">-&gt;title</span> <span class="preprocessor">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></div><div class="line">    <span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$single_post</span><span class="variable">-&gt;content</span> <span class="preprocessor">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="php"><span class="preprocessor">&lt;?php</span> get_footer() <span class="preprocessor">?&gt;</span></span></div></pre></td></tr></table></figure>

<p><em>O que é significa “ter uma interface” o por que precisamos de uma?</em></p>
<p>A interface são os métodos e propriedades públicas da classe que vai controlar o conteúdo mostrado na nossa <code>single</code>. Primeiramente nós colocamos na nossa <em>view</em>, o que nós esperamos que seja retornado. </p>
<p>Podemos ver nesse exemplo que:</p>
<ul>
<li>a variável <code>$single_post</code> recebe um objeto;</li>
<li>esperamos que sejam retornadas 3 informações: <code>thumbnail</code>, <code>title</code> e <code>content</code>, como propriedades do objeto <code>$single_post</code>.</li>
</ul>
<p><em>Mas de onde vêm esses dados?</em></p>
<p>Do <em>controller</em>! É ele que vai cuidar de toda a lógica para que nossa <em>view</em> se mantenha assim, limpa! A <em>view</em> deve somente “cuspir” as informações. Nada de zona na view! Nada de lógica de PHP e estruturas gigantes! Vamos separar as responsabilidades para que nosso código fique legível e fácil de editar!</p>
<p>No próximo post, vamos ver como ficará nosso <em>controller</em>, e como ele irá tratar as informações para devolver à <em>view</em>!</p>
<p>Ficou com alguma dúvida? Comente!</p>
<p>Até a próxima! :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/02/03/wordpress-tipos-de-conteudo/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/03/wordpress-tipos-de-conteudo/</a></p>
<p><strong> Próximo post:</strong><br><a href="">EM BREVE!</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/wordpress-responsability-separator.jpg" alt=""></p>
<p>Vamos começar a organizar melhor nosso tema, separando as responsabilidades. Tiraremos toda a lógica da view, e trataremos em <em>controllers</em> separados. Vamos ver como isso fica na prática? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serir temas wordpress" scheme="http://blog.da2k.com.br/tags/serir-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Branches]]></title>
    <link href="http://blog.da2k.com.br/2015/02/09/segredos-do-github-branches/"/>
    <id>http://blog.da2k.com.br/2015/02/09/segredos-do-github-branches/</id>
    <published>2015-02-09T00:00:00.000Z</published>
    <updated>2015-02-10T03:01:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-branches.png" alt=""></p>
<p>Quando você cria uma nova feature para o seu projeto, normalmente você também cria uma nova branch, e depois faz merge com a branch principal. Depois de um tempo, fica notória a necessidade de comparar as alterações que foram feitas. </p>
<p><em>Existe uma forma fácil de fazer isso com o <strong>Github</strong></em>? Adivinha? ;)</p>
<a id="more"></a>

<p>Na página do seu repositório, você pode ver todas as branches clicando no link <strong>Branches</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/branches.png" alt=""></p>
<p>Clicando nesse link, você tem a lista com todas as branches do seu projeto. Por aqui, você consegue acessar a página de comparação de branches ou deletar uma branch com o clique de um botão.</p>
<h2 id="Comparando_branches">Comparando branches</h2>
<p>Para comparar alterações feitas em branches diferentes, você pode fazer direto pela URL, acessando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/{range}</div></pre></td></tr></table></figure>

<p>Onde, no <code>{range}</code>, você troca pela branch principal, seguida de 3 pontos, e logo após, o nome da branch que você quer comparar. Por exemplo: nesse caso, quero ver quais alterações existem na branch <code>repeat</code>, que ainda não tem na <code>master</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/master...repeat</div></pre></td></tr></table></figure>

<p><img src="http://blog.da2k.com.br/uploads/2015/02/compare-branches.png" alt=""></p>
<p>Fazendo isso, se for possível, eu já vou ver um botão de <em>Pull Request</em>, para que eu possa enviar a sugestão de fazer marge direto na <code>master</code>. Consigo ver também os commits de quem fez as alterações e quais arquivos foram alterados :D</p>
<h2 id="Comparando_a_mesma_branch_por_data">Comparando a mesma branch por data</h2>
<p>Também é possível comparar a mesma branch, mas com uma data anterior:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/master@{<span class="number">30</span>.days.ago}...master</div></pre></td></tr></table></figure>

<p>Acessando a URL acima, eu consigo ver quais foram as alterações que ocorreram nos últimos 30 dias na branch master! Isso pode ser útil para você preencher o seu <em>changelog</em>, pois dá pra saber todas as mudanças que foram feitas nesse período de tempo :D</p>
<p>Podemos usar também com o formato de data - <code>YYYY-DD-MM</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/master@{<span class="number">2014.25</span>.<span class="number">12</span>}...master</div></pre></td></tr></table></figure>

<p>Agora eu sei tudo que foi alterado desde o natal de 2014 :D</p>
<h2 id="visualizações_diff_e_patch">visualizações diff e patch</h2>
<p>Você ainda pode usar as comparações nos formatos <code>diff</code> e <code>patch</code>, colocando essa “extensão” no final da URL:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/master@{<span class="number">2014.25</span>.<span class="number">12</span>}...master.diff</div><div class="line">https://github.com/{user}/{repo}/compare/master@{<span class="number">2014.25</span>.<span class="number">12</span>}...master.patch</div></pre></td></tr></table></figure>

<h2 id="Comparando_branches_de_repositórios_forkados">Comparando branches de repositórios forkados</h2>
<p>Agora, você forkou um projeto, criou uma nova branch e desenvolveu uma nova feature, ou arrumou um bug. Como fazer a comparação com o repositório original?</p>
<p>Simples! Só fazer assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/{user}/{repo}/compare/{user-original-repo}:{branch}...{own-branch}</div></pre></td></tr></table></figure>

<p>Onde:</p>
<ul>
<li><code>{user-original-repo}</code> é o usuário do repositório original e <code>{branch}</code> que vem logo após ele, é a branch no repositório original;</li>
<li><code>{own-branch}</code> é a branch no seu repositório, que você quer comparar.</li>
</ul>
<p>No caso do Odin, que eu forkei, eu quero comparar a minha master, com a master do projeto original. Eu posso fazer assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/fdaciuk/odin/compare/wpbrasil:master...master</div></pre></td></tr></table></figure>

<p>Claro que, para todas essas ações, você tem botões na interface do <strong>Github</strong> que facilitam a navegação. Mas, em alguns momentos, é muito mais fácil digitar direto na URL do que clicar em um botão xD</p>
<p>Era isso! Até a próxima :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-branches.png" alt=""></p>
<p>Quando você cria uma nova feature para o seu projeto, normalmente você também cria uma nova branch, e depois faz merge com a branch principal. Depois de um tempo, fica notória a necessidade de comparar as alterações que foram feitas. </p>
<p><em>Existe uma forma fácil de fazer isso com o <strong>Github</strong></em>? Adivinha? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="braches" scheme="http://blog.da2k.com.br/tags/braches/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Aprenda Markdown]]></title>
    <link href="http://blog.da2k.com.br/2015/02/08/aprenda-markdown/"/>
    <id>http://blog.da2k.com.br/2015/02/08/aprenda-markdown/</id>
    <published>2015-02-08T00:00:00.000Z</published>
    <updated>2015-02-08T03:29:10.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/markdown.png" alt=""></p>
<p><strong>Markdown</strong> é uma ferramenta de conversão de <em>text-to-HTML</em>. Com ele é possível você marcar títulos, listas, tabelas, etc., de forma muito mais limpa, legível e precisa, do que se fosse fazer com HTML.<br>Ainda não sabe tudo o que é possível fazer com Markdown? Então esse post é pra você! Vem comigo que eu te mostro :)</p>
<a id="more"></a>

<h2 id="Onde_usar_Markdown">Onde usar Markdown</h2>
<p>Existem vários lugares que você pode usar <strong>Markdown</strong>: No <strong>Github</strong> mesmo, você pode usar no <em>README.md</em>, que é um arquivo que fica na raiz do seu projeto, e é renderizado pelo <strong>Github</strong> abaixo da lista de arquivos. Aquele texto que você lê quando acessa um repositório é um arquivo <em>README.md</em>, escrito em <strong>Markdown</strong>.</p>
<p>Ainda no <strong>Github</strong>, você pode usar <strong>Markdown</strong> no texto das issues, no texto de um <em>pull request</em> e na <em>wiki</em>.</p>
<p>Também a maior parte dos <a href="https://www.staticgen.com/" target="_blank" rel="external">geradores de estáticos</a> (Hexo, Jekyll, HarpJS, Docpad, etc.), permitem escrever em <strong>Markdown</strong>! É uma ótima oportunidade pra você que queria começar o seu blog, mas estava com preguiça de usar um CMS ou ficar fazendo HTML na mão xD</p>
<h2 id="Porque_eu_devo_aprender_e_usar_Markdown">Porque eu devo aprender e usar Markdown</h2>
<p>Porque HTML é muito verboso! <strong>Markdown</strong> é mais legível, mais fácil de ler e interpretar.</p>
<h2 id="Devo_parar_de_escrever_HTML_para_sites_e_fazer_tudo_em_Markdown?">Devo parar de escrever HTML para sites e fazer tudo em Markdown?</h2>
<p>Não! <strong>Markdown</strong> serve basicamente para escrever textos. Como toda ferramenta, ele tem algumas desvantagens com relação à escrever em HTML:</p>
<ul>
<li>Você não consegue colocar atributos nos elementos (class, id, title, etc.), além dos poucos que ele permite por padrão;</li>
<li>Você não tem muito controle para fazer aninhamento de tags.</li>
</ul>
<p>Por isso é importante frisar que o uso do <strong>Markdown</strong> deve ser especificamente para a escrita de textos, artigos de blog, etc. Não é para simplesmente usá-lo no lugar do HTML!</p>
<h2 id="Como_eu_começo_a_escrever_em_Markdown">Como eu começo a escrever em Markdown</h2>
<p>Se você já tiver um <em>parser</em>, você só precisa criar um arquivo com uma dessas extensões: mark, markdown, md, mdml, mdown, text, mdtext, mdtxt, mdwn, mkd, mkdn.</p>
<p>Entre essas, a mais utilizada é a <em>md</em>. Crie um arquivo com uma dessas extensões e você já estará apto para começar a escrever em <strong>Markdown</strong>!</p>
<p>Agora, se você não tiver um <em>parser</em>, pode usar uma ferramenta online. Existem muitas ferramentas de <em>parse</em> de <strong>Markdown</strong> para <strong>HTML</strong>. Vou recomendar uma para que você possa acompanhar esse post, mas buscando por <strong>Markdown Editor</strong> no Google, você vai encontrar muitas outras!</p>
<p>Gosto bastante do <a href="https://stackedit.io/editor" target="_blank" rel="external">Stack Edit</a>. Ele converte <strong>Markdown</strong> para <strong>HTML</strong> enquanto você digita. É bastante simples para ver o resultado :)</p>
<p>Vamos aprender então como escrever em <strong>Markdown</strong>!</p>
<h2 id="Tìtulos_(&lt;h1&gt;_a_&lt;h6&gt;)">Tìtulos (<code>&lt;h1&gt;</code> a <code>&lt;h6&gt;</code>)</h2>
<p>Para marcar um título, você vai usar <code>#</code> a quantidade de vezes que irá representar o nível do título. Exemplo:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="header"># Título nível 1</span></div><div class="line"><span class="header">## Título nível 2</span></div><div class="line"><span class="header">### Título nível 3</span></div><div class="line"><span class="header">#### Título nível 4</span></div><div class="line"><span class="header">##### Título nível 5</span></div><div class="line"><span class="header">###### Título nível 6</span></div></pre></td></tr></table></figure>

<p>Parseia para:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Título nível 1<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>Título nível 2<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span>Título nível 3<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h4</span>&gt;</span>Título nível 4<span class="tag">&lt;/<span class="title">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h5</span>&gt;</span>Título nível 5<span class="tag">&lt;/<span class="title">h5</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">h6</span>&gt;</span>Título nível 6<span class="tag">&lt;/<span class="title">h6</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Bastante simples, não? O <code>h1</code> e o <code>h2</code> ainda podem ser escritos da seguinte forma:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="header">Título de nível 1</span></div><div class="line">==================</div><div class="line">  </div><div class="line"><span class="header">Título de nível 2</span></div><div class="line">------------------</div></pre></td></tr></table></figure>

<h2 id="Parágrafos_e_quebras_de_linha_(&lt;p&gt;_e_&lt;br_/&gt;)">Parágrafos e quebras de linha (<code>&lt;p&gt;</code> e <code>&lt;br /&gt;</code>)</h2>
<p>Para gerar parágrafos, basta você escrever o texto em uma linha:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Este é um parágrafo.</div><div class="line">  </div><div class="line">Este é outro parágrafo.</div></pre></td></tr></table></figure>

<p>Isso gera:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Este é um parágrafo.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Este é outro parágrafo.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Note que eu pulei uma linha entre os parágrafos. Se eu não fizesse isso, o código gerado seria:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Este é um parágrafo. Este é outro parágrafo.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p><em>Mas ele não deveria usar um `<br> para quebrar linha?</em></p>
<p>Isso é muito particular de cada parser. Alguns quebram linha quando você dá enter. Mas a documentação do <strong>Markdown</strong> diz que, para quebras de linha, você precisa deixar dois espaços no final da linha:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Primeira linha do parágrafo.··</div><div class="line">Segunda linha do parágrafo.</div></pre></td></tr></table></figure>

<p>Coloquei o <code>··</code> no final da primeira linha somente para facilitar a visualização. Você deve substituir esse símbolo por dois espaços em branco. Isso deve gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  Primeira linha do parágrafo.<span class="tag">&lt;<span class="title">br</span> /&gt;</span></div><div class="line">  Segunda linha do parágrafo.</div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Por isso, se você estiver usando o <a href="http://editorconfig.org/" target="_blank" rel="external">.editorconfig</a> no seu projeto, deixe a opção <code>trim_trailing_whitespace</code> como <code>false</code> para arquivos <strong>Markdown</strong>. Assim, os espaços adicionais não serão removidos :)</p>
<h2 id="Ênfase_(&lt;strong&gt;_e_&lt;em&gt;)">Ênfase (<code>&lt;strong&gt;</code> e <code>&lt;em&gt;</code>)</h2>
<p>Para enfatizar uma palavras (<code>&lt;em&gt;</code>), usamos um <code>*</code> ou <code>_</code>:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Javascript é <span class="emphasis">_cool_</span>!</div></pre></td></tr></table></figure>

<p>ou:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Javascript é <span class="emphasis">*cool*</span>!</div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  Javascript é <span class="tag">&lt;<span class="title">em</span>&gt;</span>cool<span class="tag">&lt;/<span class="title">em</span>&gt;</span>!</div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>O mais utilizado para ênfase (<code>&lt;em&gt;</code>) é o <em>underline</em>.</p>
<p>Para dar forte ênfase em palavras (<code>&lt;strong&gt;</code>), você usa dois <code>**</code> ou <code>__</code>:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**Da2k**</span> é a pronúncia para <span class="strong">**Daciuk**</span>: DA-TWO-K!</div></pre></td></tr></table></figure>

<p>ou </p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="strong">__Da2k__</span> é a pronúncia para <span class="strong">__Daciuk__</span>: DA-TWO-K!</div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">strong</span>&gt;</span>Da2k<span class="tag">&lt;/<span class="title">strong</span>&gt;</span> é a pronúncia para <span class="tag">&lt;<span class="title">strong</span>&gt;</span>Daciuk:<span class="tag">&lt;/<span class="title">strong</span>&gt;</span> DA-TWO-K!</div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>O mais utilizado para forte ênfase (<code>&lt;strong&gt;</code>) são dois asteriscos.</p>
<h2 id="Links_(&lt;a&gt;)">Links (<code>&lt;a&gt;</code>)</h2>
<p>Para gerar links, você usa <code>[]()</code>. Dentro dos colchetes você coloca o texto do link, e dentro dos parênteses, você coloca a URL:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="link_label">Blog do Da2k</span>](<span class="link_url">http://blog.da2k.com.br</span>)</div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://blog.da2k.com.br"</span>&gt;</span>Blog do Da2k<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Passando um texto após a URL, separando o link do texto por um espaço em branco, esse texto será usado como <code>title</code>:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="link_label">Blog do Da2k</span>](<span class="link_url">http://blog.da2k.com.br "Clique e acesse agora!"</span>)</div></pre></td></tr></table></figure>

<p>Vai gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://blog.da2k.com.br"</span> <span class="attribute">title</span>=<span class="value">"Clique e acesse agora!"</span>&gt;</span>Blog do Da2k<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Links_automáticos">Links automáticos</h2>
<p>Se o texto do seu link é o próprio link, você pode envolvê-lo entre <code>&lt;</code> e <code>&gt;</code>, que o link será gerado automaticamente:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">https:</span>//<span class="attribute">www.google.com.br</span>&gt;</span></span></div></pre></td></tr></table></figure>

<p>Irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"https://www.google.com.br"</span>&gt;</span>https://www.google.com.br<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E isso funciona também para e-mails:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="title">meu@email.com</span>&gt;</span></span></div></pre></td></tr></table></figure>

<p>Vai gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"mailto:meu@email.com"</span>&gt;</span>meu@email.com<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Da hora, não? ;)</p>
<h2 id="Referências">Referências</h2>
<p>Expliquei sobre referências <a href="http://blog.da2k.com.br/2015/01/16/segredos-do-github-variaveis/" target="_blank" rel="external">nesse post</a>.</p>
<h2 id="Blocos_de_citação_(&lt;blockquote&gt;)">Blocos de citação (<code>&lt;blockquote&gt;</code>)</h2>
<p>Para criar blocos de citação, você usa o sinal de <code>&gt;</code>:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="blockquote">&gt; Esse é um bloco de citação.</span></div><div class="line"><span class="blockquote">&gt; Ele pode ter várias linhas por parágrafo.</span></div><div class="line"><span class="blockquote">&gt;</span></div><div class="line">&gt; Inclusive, dando um espaço, você tem um novo parágrafo.</div></pre></td></tr></table></figure>

<p>Que gera o seguinte:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">blockquote</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">    Esse é um bloco de citação.</div><div class="line">    Ele pode ter várias linhas.</div><div class="line">  <span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Inclusive, uma quebra de linha.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">blockquote</span>&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Listas_(&lt;ul&gt;_e_&lt;ol&gt;)">Listas (<code>&lt;ul&gt;</code> e <code>&lt;ol&gt;</code>)</h2>
<p>Para listas não ordenadas (<code>&lt;ul&gt;</code>), você pode usar <code>*</code>, <code>+</code> ou <code>-</code>. Veja:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>Item 1</div><div class="line"><span class="bullet">* </span>Item 2</div><div class="line"><span class="bullet">* </span>Item 3</div><div class="line">  </div><div class="line"><span class="bullet">+ </span>Item 1</div><div class="line"><span class="bullet">+ </span>Item 2</div><div class="line"><span class="bullet">+ </span>Item 3</div><div class="line">  </div><div class="line"><span class="bullet">- </span>Item 1</div><div class="line"><span class="bullet">- </span>Item 2</div><div class="line"><span class="bullet">- </span>Item 3</div></pre></td></tr></table></figure>

<p>Os três formatos acima geram a mesma marcação:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E para listas ordenadas, você usa o número, seguido de ponto:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>Item 1</div><div class="line"><span class="bullet">2. </span>Item 2</div><div class="line"><span class="bullet">3. </span>Item 3</div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ol</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ol</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Alguns parsers renderizam automaticamente os próximos números, após o 1. Você só precisa usar <code>*</code> para os itens do 2 em diante:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>Item 1</div><div class="line"><span class="bullet">* </span>Item 2</div><div class="line"><span class="bullet">* </span>Item 3</div></pre></td></tr></table></figure>

<p>Mas não são todos que renderizam dessa forma, então é bom ficar ligado ;)</p>
<h2 id="Imagens_(&lt;img_/&gt;)">Imagens (<code>&lt;img /&gt;</code>)</h2>
<p>Geração de imagens é bem parecido com a geração de links: você só precisa adicionar uma <code>!</code> no início. E o texto que você coloca entre os colchetes, é usado como <code>alt</code> na imagem:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">Banana</span>](<span class="link_url">http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif</span>)</div></pre></td></tr></table></figure>

<p>Esse código vai gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif"</span> <span class="attribute">alt</span>=<span class="value">"Banana"</span> /&gt;</span></div></pre></td></tr></table></figure>

<p>O <code>title</code> também funciona como no link:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">Banana</span>](<span class="link_url">http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif "Olha a banana dançando!"</span>)</div></pre></td></tr></table></figure>

<p>Que gera:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://cdn.osxdaily.com/wp-content/uploads/2013/07/dancing-banana.gif"</span> <span class="attribute">alt</span>=<span class="value">"Banana"</span> <span class="attribute">title</span>=<span class="value">"Olha a banana dançando!"</span> /&gt;</span></div></pre></td></tr></table></figure>

<h2 id="Tabelas_(&lt;table&gt;)">Tabelas (<code>&lt;table&gt;</code>)</h2>
<p>Já falei sobre tabelas em um <a href="http://blog.da2k.com.br/2015/01/17/segredos-do-github-tabelas-e-task-lists/" target="_blank" rel="external">post anterior</a>. Nesse post eu falo também sobre as <code>task lists</code>, mas elas são específicas do <strong>Github</strong>, não funcionam com qualquer parser ;)</p>
<h2 id="Código_inline_e_bloco_(&lt;code&gt;_e_&lt;pre&gt;)">Código inline e bloco (<code>&lt;code&gt;</code> e <code>&lt;pre&gt;</code>)</h2>
<p>Vocế ainda pode adicionar trechos de código via <strong>Markdown</strong>. Para adicionar código a nível <em>inline</em>, você usa ```:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O <span class="code">`&lt;blockquote&gt;`</span> é uma tag HTML.</div></pre></td></tr></table></figure>

<p>Isso irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  O <span class="tag">&lt;<span class="title">code</span>&gt;</span>&lt;blockquote&gt;<span class="tag">&lt;/<span class="title">code</span>&gt;</span> é uma tag HTML!</div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>E para gerar blocos de código, você simplesmente indenta o código 4 espaços (ou 1 tab) à frente do paràgrafo:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Essa é a função sayHello():</div><div class="line"><span class="code">    function sayHello() {</span></div><div class="line"><span class="code">      return 'hi!';</span></div><div class="line"><span class="code">    }</span></div></pre></td></tr></table></figure>

<p>Que irá gerar:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">  Essa é a função sayHello():</div><div class="line">  <span class="tag">&lt;<span class="title">pre</span>&gt;</span><span class="tag">&lt;<span class="title">code</span>&gt;</span>function sayHello() {</div><div class="line">    return 'hi!';</div><div class="line">  }<span class="tag">&lt;/<span class="title">code</span>&gt;</span><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Isso é como está na documentação. Mas a maior parte dos parses que eu conheço não funcionam dessa forma. Eles geram blocos de código usando três crases no início da primeira e última linha, para marcar o início e o fim do bloco:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/code-block.png" alt=""></p>
<p>PS.: Tive que colocar como imagem, pois o meu parser não consegue escapar as 3 crases ¬¬</p>
<p>O <strong>Github</strong> inclusive <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code" target="_blank" rel="external">recomenda que se use as 3 crases</a>, pois é mais fácil de visualizar e dar manutenção no código.</p>
<p>No <strong>Github</strong>, você ainda consegue definir qual a linguagem que está sendo utilizada, para que seja feito <em>code highlight</em> no seu código. Só passe a linguagem após as 3 crases, dessa forma:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/code-block-language.png" alt=""></p>
<p>Que ó seu código será mostrado bonitinho assim:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/code-block-highlighted.png" alt=""></p>
<p>:D</p>
<h2 id="Backslash_scapes">Backslash scapes</h2>
<p>Para escapar caracteres que são parseados pelo <strong>Markdown</strong>, você pode usar a barra invertida <code>\</code> (<em>backslash</em>), seguida do caractere, para imprimí-lo literalmente. O escape funciona para os caracteres listados abaixo:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\   backslash (barra invertida)</div><div class="line">`   backtick (crase)</div><div class="line"><span class="bullet">*   </span>asterisk (asterisco)</div><div class="line">_   underscore</div><div class="line">{}  curly braces (chaves)</div><div class="line">[]  square brackets (colchetes)</div><div class="line">()  parentheses (parênteses)</div><div class="line"><span class="header">#   hash mark (sustenido / hash / jogo da velha)</span></div><div class="line"><span class="bullet">+   </span>plus sign (sinal de "mais" ou somar)</div><div class="line"><span class="bullet">-   </span>minus sign (hyphen) (sinal de menos ou hífen)</div><div class="line">.   dot (ponto)</div><div class="line">!   exclamation mark (ponto de exclamação)</div></pre></td></tr></table></figure>

<p>Além de tudo isso, é importante saber também, que é possível usar HTML junto com <strong>Markdown</strong>! Isso mesmo! Se você precisar adicionar uma classe em uma imagem para alinhar, ou colocar uma cor específica em alguma palavra, você pode usar tags HTML normalmente :D</p>
<p>Para saber mais sobre <strong>Markdown</strong>, recomendo a leitura da documentação oficial:<br><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">http://daringfireball.net/projects/markdown/</a></p>
<p>E alguns links de como o <strong>Github</strong> usa <strong>Markdown</strong>:<br><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="external">https://help.github.com/articles/markdown-basics/</a><br><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">https://help.github.com/articles/github-flavored-markdown/</a><br><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">https://guides.github.com/features/mastering-markdown/</a><br><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="external">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</a></p>
<p>E você: o que já faz hoje com <strong>Markdown</strong>? Tem algo diferente do que foi visto nesse post para compartilhar? Ficou com alguma dúvida? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/markdown.png" alt=""></p>
<p><strong>Markdown</strong> é uma ferramenta de conversão de <em>text-to-HTML</em>. Com ele é possível você marcar títulos, listas, tabelas, etc., de forma muito mais limpa, legível e precisa, do que se fosse fazer com HTML.<br>Ainda não sabe tudo o que é possível fazer com Markdown? Então esse post é pra você! Vem comigo que eu te mostro :)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="markdown" scheme="http://blog.da2k.com.br/categories/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - assistindo mudanças no DOM sem temporizadores]]></title>
    <link href="http://blog.da2k.com.br/2015/02/07/javascript-assistindo-mudancas-no-dom-sem-temporizadores/"/>
    <id>http://blog.da2k.com.br/2015/02/07/javascript-assistindo-mudancas-no-dom-sem-temporizadores/</id>
    <published>2015-02-07T00:00:00.000Z</published>
    <updated>2015-02-08T03:29:10.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/Oo.png" alt=""></p>
<p>Existem basicamente duas formas de ouvir mudanças em um elemento no DOM: ou você usa eventos, ou, em casos mais extremos, temporizadores.</p>
<p><em>Como saber quando um atributo de um elemento mudou? Como saber se os filhos de um elemento foram alterados? Não tem outra forma de fazer, que não seja usando temporizadores?</em></p>
<p>Sim, tem! E é isso que eu quero mostrar nesse post! Vem comigo :D</p>
<a id="more"></a>

<p>Quando uma ação é executada em algum elemento do DOM (click, mouseenter, mousedown, etc.), é possível atribuir um evento a esse elemento, que irá disparar uma função de callback para que você possa manipular o elemento no momento certo.</p>
<p>Mas, e quando temos, por exemplo, uma mudança de atributo? Ou ainda, uma mudança na árvore do DOM, onde você precisa saber exatamente quando esses eventos ocorrem para tomar alguma decisão? Como fazer?</p>
<p>Provavelmente você logo pensa: </p>
<p><em><a href="http://blog.da2k.com.br/2015/01/29/javascript-usando-temporizadores-like-a-ninja/" target="_blank" rel="external">Temporizadores</a>! Vou usar um <code>setInterval()</code> ou um <code>setTimeout()</code> recursivo, e, a cada x milissegundos, eu executo uma função :D</em></p>
<p>Funciona, mas não é a melhor solução. Se você tiver muitos temporizadores executando juntos, você pode acabar deixando sua aplicação lenta, e até travar o navegador do usuário!</p>
<p><em>Como eu posso então resolver isso de forma elegante?</em></p>
<h2 id="MutationObserver">MutationObserver</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver" target="_blank" rel="external">MutationObserver</a> nos dá um caminho para reagir à mudanças no DOM. Ele foi projetado para substituir o <a href="https://developer.mozilla.org/en-US/docs/DOM/Mutation_events" target="_blank" rel="external">Mutation Events</a>, que foi definido na especificação de Eventos do DOM 3.</p>
<p>O <code>MUtationObserver</code> é um construtor, e funciona de forma parecida com o <code>addEventListener</code>, com a diferença que ele não é atribuído mais de uma vez por elemento, se for utilizada a mesma instância.</p>
<p>Com o <code>addEventListener</code>, se você atribuir duas vezes um listener para o evento de <code>click</code>, ao clicar nesse elemento, a função de callback será disparada duas vezes. Isso não acontece com o <code>MutationObserver</code>. Independente de quantas vezes você atribuí-lo ao mesmo elemento, o callback executará só uma vez.</p>
<h2 id="Construtor">Construtor</h2>
<p>Para começarmos a observar as mudanças em um elemento, primeiro precisamos instanciar o construtor:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver( callback );</div></pre></td></tr></table></figure>

<p>A função de <em>callback</em> é executada a cada mudança no DOM, e ela pode receber dois argumentos: o primeiro é um array de objetos, cada um do tipo <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationRecord" target="_blank" rel="external">MutationRecord</a>. O segundo é uma instância do <code>MutationObserer</code>.</p>
<h2 id="Métodos_da_instância">Métodos da instância</h2>
<h3 id="observe()"><code>observe()</code></h3>
<p>O <code>observe()</code> registra a instância do <code>MutationObserver</code> para receber notificações do DOM para um nó específico:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.observe( target, options );</div></pre></td></tr></table></figure>

<p><strong>Parâmetro target</strong>:</p>
<p>O <code>target</code> é o nó que será observado por mudanças.</p>
<p>O <code>options</code> é um objeto que especifíca as mudanças que devem ser observadas.</p>
<p>Por exemplo:</p>
<p>Se eu quiser verificar quando um nó descendente (filho) for adicionado ou removido, ou quando um atributo for adicionado / alterado ou removido, eu posso usar da seguinte maneira:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mydiv"</span> <span class="attribute">data-js</span>=<span class="value">"div"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = <span class="built_in">document</span>.querySelector( <span class="string">'[data-js="div"]'</span> );</div><div class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver( handleMutationObserver );</div><div class="line"><span class="keyword">var</span> config = { childList: <span class="literal">true</span>, attributes: <span class="literal">true</span> };</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMutationObserver</span><span class="params">( mutations )</span> </span>{</div><div class="line">  mutations.forEach(<span class="function"><span class="keyword">function</span><span class="params">(mutation)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( mutation.type );</div><div class="line">  });</div><div class="line">}</div><div class="line">  </div><div class="line">observer.observe( target, config );</div></pre></td></tr></table></figure>

<p>No meu HTML, adicionei uma div com um atributo <code>data-js=&quot;div&quot;</code> e uma classe <code>mydiv</code>.</p>
<p>No JS, atribuímos esse nó para a variável <code>target</code>.<br>A variável <code>observer</code> será nosso observador. Então instanciamos o <code>MutationObserver</code> nessa varíável, passando como parâmetro a função de callback <code>handleMutationObserver</code>.</p>
<p>Depois criamos mais uma variável que receberá as configurações do que deve ser observado no elemento.<br><code>childList</code> verifica mudanças nos filhos do nó correspondente. Se algum nó for adicionado ou removido do nó principal (<code>target</code>), será disparada a função de callback. Isso é válido também para nós de texto, não precisa ser somente tags.</p>
<p><code>attributes</code> observa os atributos do elemento. Se algo mudar, o callback também é disparado.</p>
<p>Para ver todos os parâmetros que você pode utilizar, consulte <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver#MutationObserverInit" target="_blank" rel="external">esse link</a>.</p>
<p>Faça o teste, jogando o código acima no seu console! :D<br>Só troque o <code>target</code> para um elemento válido :)</p>
<p>Se você não quiser mais observar um elemento, pode usar o método <code>disconnect()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observer.disconnect();</div></pre></td></tr></table></figure>

<h2 id="Compatibilidade_de_browsers">Compatibilidade de browsers</h2>
<p>Por ser algo relativamente novo, o <code>MutationObserver</code> só funciona em browsers modernos:</p>
<ul>
<li>Chrome - 18+;</li>
<li>Firefox - 14+;</li>
<li>IE - 11+;</li>
<li>Opera - 15+;</li>
<li>Safari - 6+;</li>
</ul>
<h2 id="Polyfill">Polyfill</h2>
<p>Para funcionar em todos os browsers, você pode usar um polyfill, feito com temporizadores. Não é o mais recomendado, mas funciona. O polyfill você encontra <a href="https://github.com/megawac/MutationObserver.js" target="_blank" rel="external">nesse link</a>.</p>
<p>É possível fazer muita coisa com o MutationObserver. Recomendo que você dê uma lida na documentação completa dele aqui: <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver</a></p>
<p>Até a próxima! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/Oo.png" alt=""></p>
<p>Existem basicamente duas formas de ouvir mudanças em um elemento no DOM: ou você usa eventos, ou, em casos mais extremos, temporizadores.</p>
<p><em>Como saber quando um atributo de um elemento mudou? Como saber se os filhos de um elemento foram alterados? Não tem outra forma de fazer, que não seja usando temporizadores?</em></p>
<p>Sim, tem! E é isso que eu quero mostrar nesse post! Vem comigo :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="mutation observer" scheme="http://blog.da2k.com.br/tags/mutation-observer/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - o operador void]]></title>
    <link href="http://blog.da2k.com.br/2015/02/06/javascript-o-operador-void/"/>
    <id>http://blog.da2k.com.br/2015/02/06/javascript-o-operador-void/</id>
    <published>2015-02-06T00:00:00.000Z</published>
    <updated>2015-02-07T04:55:41.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/undefined.png" alt=""></p>
<p>Você já deve ter visto em alguns links por aí algo como <code>&lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</code>, não? Mas você sabe para quê usamos o <code>void</code> em Javascript? E sabe quando podemos usá-lo? Vem descobrir :D</p>
<a id="more"></a>

<p>Segundo a <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/void" target="_blank" rel="external">documentação da MDN</a>:</p>
<blockquote>
<p>O operador <code>void</code> avalia uma expressão dada, e retorna undefined.</p>
</blockquote>
<p>Ou seja: qualquer valor passado após <code>void</code> será avalidado, mas o valor retornado sempre será <code>undefined</code>.</p>
<p>Vamos ver na prática como isso funciona. Execute no console:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldReturnOne</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line">shouldReturnOne(); <span class="comment">// 1</span></div></pre></td></tr></table></figure>

<p>Agora, se você usar o <code>void</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldReturnUndefined</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">void</span> <span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line">shouldReturnUndefined(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p>O número <code>1</code> é avaliado, mas o valor retornado é <code>undefined</code>.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/gente-qual-a-necessidade-disso.jpg" alt=""></p>
<p>Só lembrando que o <code>void</code> não é uma função, e sim um <code>operador</code>. Os parênteses são opcionais.</p>
<p><em>Não daria para retornar direto <code>undefined</code>?</em></p>
<p>Nesse caso, sim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldReturnUndefined</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">}</div><div class="line"></div><div class="line">shouldReturnUndefined(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p><em>Então pra quê eu vou usar o <code>void</code>?</em></p>
<p>Javascript é uma linguagem de <em>tipagem fraca</em> e <em>dinâmica</em>. Isso significa que você não precisa dizer ao Javascript que uma variável vai receber um número ou uma string, ou que uma função irá retornar um valor booleano.<br>Você simplesmente atribui valores à variáveis e retorna valores em funções, e o Javascript se vira com o resto.</p>
<p>Para entender melhor o <code>void</code>, é necessário entender um pouco sobre tipagem.</p>
<p>Por exemplo: se fossemos escrever um <code>Hello World</code> em Java, ele seria algo assim:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class HelloWorld {</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>( String args[] ) {</div><div class="line">    System.out.println( <span class="string">"Hello World!"</span> );</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>O Java é uma linguagem imperativa, orientada a objetos. Por isso é necessário sempre criar uma <code>class</code> para qualquer coisa que você queira fazer. </p>
<p>Mas o que eu quero mostrar está na primeira linha dentro da classe:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>( String args[] )</div></pre></td></tr></table></figure>

<p>Essa linha cria um método estático (<code>static</code>), público (<code>public</code>), chamado <code>main</code>, e que não retorna nada (<code>void</code>). Ou seja: posso colocar qualquer código dentro desse método que será executado normalmente. Agora, seu eu colocar no final desse método um <code>return 1</code>, por exemplo, na hora de tentar compilar, vai dar esse erro:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HelloWorld.java:<span class="number">4</span>: error: incompatible types: unexpected <span class="keyword">return</span> value</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">           ^</div><div class="line"><span class="number">1</span> error</div></pre></td></tr></table></figure>

<p>Porque o Java não espera nenhum valor retornado para esse método.</p>
<p>Enfim, não quero ensinar Java, mas sim mostrar que, para não retornar nenhum valor em linguagens de tipagem forte, é necessário deixar explícito no método o <code>void</code>.</p>
<p>Em Javascript não precisamos disso, mas tem alguns casos em que ele pode vir a ser útil.</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fillBodyRed</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">document</span>.querySelector( <span class="string">'body'</span> ).style.background = <span class="string">'red'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHypsterStyle</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDOM</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">if</span>( isHypsterStyle() ) {</div><div class="line">    fillBodyRed();</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line">handleDOM();</div></pre></td></tr></table></figure>

<p>No exemplo acima, executamos a função <code>handleDOM()</code>, que verifica se <code>isHypsterStyle</code> está setado e chama a função <code>fillBodyRed</code>, que preenche o <code>background</code> do <code>body</code> de vermelho.</p>
<p>A única função que retorna algum valor, é a <code>isHypsterStyle()</code>, para verificar se o estilo foi setado na função <code>handleDOM()</code>.</p>
<p>Podemos melhorar a função <code>handleDOM()</code>, removendo o <code>if</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDOM</span><span class="params">()</span> </span>{</div><div class="line">  isHypsterStyle() && fillBodyRed();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Ao passar o código acima pelo <a href="http://jshint.com/" target="_blank" rel="external">JSHint</a>, ele vai acusar um <em>warning</em>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Expected an assignment or <span class="function"><span class="keyword">function</span> <span class="title">call</span> <span class="title">and</span> <span class="title">instead</span> <span class="title">saw</span> <span class="title">an</span> <span class="title">expression</span>.</span></div></pre></td></tr></table></figure>

<p>Ou seja: nós estamos utilizando um operador lógico (<code>&amp;&amp;</code>), em <em>short circuit</em>, que normalmente é usado para testar expressões. Uma expressão normalmente retorna um valor. Se a expressão retorna um valor, para me aproveitar desse valor, eu preciso usar um <code>return</code> dentro da <code>function</code>, para que eu possa invocar essa função para obter esse valor, ou então atribuir à uma variável, por exemplo, para que eu possa usar o valor no futuro.</p>
<p>Como nossa função <code>fillBodyRed()</code> não retorna nada, mas é ela que será executada se <code>isHypsterStyle()</code> for <code>true</code>, precisamos de uma forma de avaliar essa expressão para remover o <em>warning</em>.</p>
<p>Poderíamos usar o <code>return</code>, mas não faria sentido pois não temos valor a retornar. É aqui que entra o <code>void</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDOM</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">void</span> ( isHypsterStyle() && fillBodyRed() );</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Agora nós avaliamos a expressão e não retornamos nada. Esse é um uso válido do <code>void</code>. </p>
<h2 id="IIFE">IIFE</h2>
<p>Como você já deve ter visto no post sobre <a href="http://blog.da2k.com.br/2015/01/30/javascript-como-invocar-funcoes/" target="_blank" rel="external">invocação de funções</a>, para que uma função anônima seja invocada, ela também precisa ser transformada em uma expressão. Logo, também podemos usar o <code>void</code> nesse caso:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  ...</div><div class="line">}();</div></pre></td></tr></table></figure>

<p>Normalmente quem trabalha com frontend tem seu primeiro contato com uma linguagem de programação através do Javascript, e acabam não entendendo algumas coisas, como é o caso do <code>void</code>. Espero que o seu uso tenha ficado claro :D</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/undefined.png" alt=""></p>
<p>Você já deve ter visto em alguns links por aí algo como <code>&lt;a href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</code>, não? Mas você sabe para quê usamos o <code>void</code> em Javascript? E sabe quando podemos usá-lo? Vem descobrir :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="void" scheme="http://blog.da2k.com.br/tags/void/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Hospedando seu site no Github]]></title>
    <link href="http://blog.da2k.com.br/2015/02/05/segredos-do-github-hospedando-seu-site-no-github/"/>
    <id>http://blog.da2k.com.br/2015/02/05/segredos-do-github-hospedando-seu-site-no-github/</id>
    <published>2015-02-05T00:00:00.000Z</published>
    <updated>2015-02-07T04:55:41.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-gh-pages.png" alt=""></p>
<p><em>Mas eu já sei que eu posso usar o Github para versionar meu site. O que tem de segredo nisso?</em></p>
<p>Eu disse <strong>hospedar</strong>! Isso mesmo! Seu site pode ficar hospedado no <strong>Github</strong>, <em>for free</em>, e ser executado diretamente de lá, sem a necessidade de um servidor! Não sabe como fazer? Vem que eu te mostro então ;)</p>
<a id="more"></a>

<p>Uma ponto importante que eu preciso frizar antes de começar: o <strong>Github</strong> só aceita arquivos estáticos. Não adianta querer usar o <strong>Github</strong> para hospedar um site em <strong>PHP</strong> que não vai funcionar, blz? ;)</p>
<p>Ele só vai servir os arquivos <em>estáticos</em> gerados - HTML, CSS e JS, imagens, fontes, etc.</p>
<p>Para se aproveitar dessa feature, você pode cair em duas situações:</p>
<p>1) <em>Tenho um site pessoal que quero hospedar no <strong>Github</strong></em><br>2) <em>Tenho um projeto Open Source, em um repositório dentro da minha conta, e quero criar um site para ele.</em></p>
<h2 id="Site_Pessoal">Site Pessoal</h2>
<p>Para o seu site pessoal, você deve fazer o seguinte:</p>
<ul>
<li>crie um novo repositório na sua conta, com o seguinte padrão:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username.github.io</div></pre></td></tr></table></figure>

<p>Obviamente, trocando <code>username</code> pelo seu nome de usuário no <strong>Github</strong>. No meu caso, ficou <code>fdaciuk.github.io</code>. O repositório é esse: <a href="https://github.com/fdaciuk/fdaciuk.github.io/" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/</a></p>
<p>Fazendo isso, você pode subir seus arquivos estáticos para a branch <strong>master</strong> normalmente, e acessá-los pelo endereço:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://username.github.io</div></pre></td></tr></table></figure>

<p>De novo: trocando o <code>username</code> pelo seu nome de usuário!</p>
<h2 id="Site_para_projeto_open_source">Site para projeto open source</h2>
<p>Se você já tem um projeto open source no Github, e quer criar um site para ele, você precisa fazer o seguinte:</p>
<ul>
<li>crie uma branch orfã - em branco - chamada <code>gh-pages</code>.</li>
<li>suba os arquivos para essa branch.</li>
</ul>
<p>Para criar uma nova branch em branco, use o seguinte comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout --orphan gh-pages</div></pre></td></tr></table></figure>

<p>Só lembre de <strong>NUNCA</strong> fazer merge dessa branch na master. Os arquivos das duas branches serão completamente diferentes! Na <code>master</code>, ficarão os arquivos do seu projeto. Na <code>gh-pages</code>, somente os estáticos do site do projeto.</p>
<p>Você conseguirá acessar pelo seguinte endereço:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://username.github.io/repositoryname</div></pre></td></tr></table></figure>

<p>Não precisa falar do <code>username</code> de novo, né? :P</p>
<p>E troque o <code>repositoryname</code> pelo nome do seu repositório.</p>
<p>Para facilitar, veja como fica o acesso ao site do <a href="https://github.com/wpbrasil/odin" target="_blank" rel="external">Odin</a>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://wpbrasil.github.io/odin</div></pre></td></tr></table></figure>

<p>Onde temos a conta da organização <code>wpbrasil</code> e o repositório cadastrado como <code>odin</code>. Fácil, não?</p>
<h2 id="Usando_um_domínio_personalizado">Usando um domínio personalizado</h2>
<p>Para usar um domínio personalizado, você só precisa criar um arquivo chamado <code>CNAME</code>, - na branch onde estão os estáticos do seus site - e o conteúdo dele deve ser o seu domínio. </p>
<p>O <code>CNAME</code> do meu blog está com o conteúdo assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blog.da2k.com.br</div></pre></td></tr></table></figure>

<p>Não precisa do <code>http(s)</code>.</p>
<p>Depois você só precisa configurar para que o seu domínio aponte para os DNS do <strong>Github</strong>. Para fazer isso, siga esse tutorial: <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/" target="_blank" rel="external">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/</a></p>
<p>Você pode usar tanto um domínio principal, como um subdomínio :)</p>
<h2 id="Geradores_de_estáticos">Geradores de estáticos</h2>
<p>E já respondendo à pergunta: Não! Você não precisa criar todos os seus arquivos HTML manualmente!</p>
<p>Existem milhares de ferramentas que geram estáticos, onde você escreve em uma linguagem específica - NodeJS, Ruby, etc - e o framework gera toda a estrutura dos estáticos para você. Aqui no blog, eu estou usando o <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>. Inclusive, fiz <a href="http://blog.da2k.com.br/2014/01/05/hexo-criando-um-blog-ao-estilo-miojo/" target="_blank" rel="external">um post</a>, mostrando como é simples usá-lo para começar um blog :D</p>
<p>O <strong>Hexo</strong> tem um plugin que gera um <code>sitemap.xml</code> e um <code>atom.xml</code>, onde fica o feed. </p>
<p>Eu posso criar templates para as páginas, usando <strong>EJS</strong>, <strong>Jade</strong> ou <strong>Markdown</strong>, posso usar <strong>Stylus</strong> para pré-processar o CSS, me aproveitar de partials para não ficar repetindo código, etc. No final, tudo é compilado para HTML, CSS e JS.</p>
<p>E para escrever os posts, posso utilizar <strong>Markdown</strong> &lt;3</p>
<p>Ele gera também uma estrutura de URLs amigáveis, que você pode escolher. Ou seja, é perfeito para SEO :)</p>
<p>Se quiser outras opções de geradores de estáticos, veja esses links:</p>
<ul>
<li><a href="https://github.com/pinceladasdaweb/Static-Site-Generators" target="_blank" rel="external">https://github.com/pinceladasdaweb/Static-Site-Generators</a></li>
<li><a href="https://www.staticgen.com/" target="_blank" rel="external">https://www.staticgen.com/</a></li>
<li><a href="https://staticsitegenerators.net/" target="_blank" rel="external">https://staticsitegenerators.net/</a></li>
<li><a href="http://www.modernstatic.com/" target="_blank" rel="external">http://www.modernstatic.com/</a></li>
</ul>
<p><em>Have fun</em> :)</p>
<h2 id="Jekyll">Jekyll</h2>
<p>Um outro detalhe importante, é que o <strong>Github</strong> consegue compilar seus estáticos sozinho, se você estiver usando o <strong>Jekyll</strong>. O <a href="https://github.com/willianjusten" target="_blank" rel="external">Willian Justen</a> já mostrou porque é interessante usar o <strong>Jekyll</strong> com o <strong>Github</strong>, nesse <a href="http://willianjusten.com.br/por-que-usar-jekyll/" target="_blank" rel="external">ótimo post</a>! E <a href="http://willianjusten.com.br/perguntas-e-respostas-jekyll/" target="_blank" rel="external">nesse outro</a> ele tira algumas dúvidas sobre a ferramenta. Vale muito a leitura!</p>
<p><em>That’s all folks!</em> Até a próxima :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-gh-pages.png" alt=""></p>
<p><em>Mas eu já sei que eu posso usar o Github para versionar meu site. O que tem de segredo nisso?</em></p>
<p>Eu disse <strong>hospedar</strong>! Isso mesmo! Seu site pode ficar hospedado no <strong>Github</strong>, <em>for free</em>, e ser executado diretamente de lá, sem a necessidade de um servidor! Não sabe como fazer? Vem que eu te mostro então ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git e Github - Do clone ao pull request]]></title>
    <link href="http://blog.da2k.com.br/2015/02/04/git-e-github-do-clone-ao-pull-request/"/>
    <id>http://blog.da2k.com.br/2015/02/04/git-e-github-do-clone-ao-pull-request/</id>
    <published>2015-02-04T00:00:00.000Z</published>
    <updated>2015-02-05T03:07:54.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/git-clone-pull-request.jpg" alt=""></p>
<p>Você tem uma conta no Github, acompanha projetos open source, gostaria de colaborar com algum deles, mas não sabe como fazer? Como criar uma nova feature? Como preparar o repositório? O que é <em>git push</em>?</p>
<p>Se você tem essas dúvidas, esse artigo é pra você!</p>
<a id="more"></a>

<p>Alguns devs já me perguntaram como seria o workflow correto para colaborar com um projeto open source. Como criar uma nova branch, porque fazer isso, como enviar um pull request, como saber se o que você está fazendo está de acordo com o propósito do repositório.</p>
<p>Seguindo a dica do <a href="https://github.com/romuloctba" target="_blank" rel="external">Rômulo</a>, esse artigo é para você que quer aprender desde o básico necessário de git, até a submissão de um <em>pull request</em>, com um ajuste ou nova funcionalidade para um projeto no Github!</p>
<h2 id="Primeiros_passos_com_Git">Primeiros passos com Git</h2>
<p>Eu poderia escrever aqui todos os passos necessários para você instalar o git, criar seu projeto, criar um repositório local, criar branchs, etc. Mas o <a href="https://github.com/rogerdudler" target="_blank" rel="external">Roger Dudler</a> já fez um ótimo trabalho que você encontra <a href="http://rogerdudler.github.io/git-guide/index.pt_BR.html" target="_blank" rel="external">nesse link</a>, traduzido por brasileiros :)</p>
<h2 id="Escolhendo_o_repositório">Escolhendo o repositório</h2>
<p>Após seguir os passos acima, vocẽ já estará apto para fazer alterações em qualquer projeto e submeter o seu <em>pull request</em>!<br>E a primeira coisa que você tem que fazer é <strong>clonar</strong> o repositório que vocẽ quer colaborar!</p>
<p><em>Mas qual repositório eu escolho?</em></p>
<p>Se você não sabe em qual repositório pode colaborar, acesse o perfil de seus amigos no <strong>Github</strong>, veja os repositórios que eles têm e/ou seguem, e escolha algum que utilize uma linguagem que você está familiarizado, ou que quer aprender.</p>
<p>Fuce no código que está no repositório. Ele está ali para que você possa aprender com ele. Baixe, teste, procure por falhas! Quando encontrar algo que possa ser melhorado, é hora de você fazer a sua parte e enviar um <em>pull request</em> :D</p>
<p>Vamos pegar como exemplo o repositório do <strong>Gulp</strong>. Vamos fazer todos os passos e enviar nosso <em>pull request</em> através desse repositório.</p>
<h2 id="Forkando_o_repositório">Forkando o repositório</h2>
<p>A primeira coisa a fazer é <em>forkar</em> o repositório. Acesse a <a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">página do repositório no <strong>Github</strong></a>, e clique no botão <strong>Fork</strong>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/fork-repository.png" alt="Forkar o repositório"></p>
<p><em>O que significa forkar?</em></p>
<p>A tradução literal de <em>fork</em> é <em>garfo</em>. Então, você dá uma “garfada” no repositório, dá aquela enrolada no garfo, e traz ele pra sua conta xD</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/forked-repository.png" alt="Repositório forkado"></p>
<p>Quando você <em>forkar</em> o repositório, repare que, abaixo do nome do repositório é mostrado o repositório original, ou seja, de onde ele foi <em>forkado</em>:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/forked-from.png" alt="Forkado de"></p>
<p>Você agora pode fazer o que quiser com esse repositório (tomando cuidado com a <a href="http://blog.da2k.com.br/2015/02/02/segredos-do-github-licencas/" target="_blank" rel="external">licença</a> sob a qual ele foi liberado). A ideia aqui é resolver um problema e enviar o <em>pull request</em> com a correção para o repositório original. Como você não tem permissão para comitar diretamente no repositório principal, você precisa forkar e alterar no seu, para então submeter a correção.</p>
<p>Após <em>forkar</em>, vamos fazer nossas alterações!</p>
<h2 id="Clonando_o_repositório">Clonando o repositório</h2>
<p>Agora você precisa baixar os arquivos do repositório para que você possa alterar. A primeira coisa a fazer é copiar a URL do repositório daqui:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/clone-repository.png" alt="Clonar repositório"></p>
<p>Confira se o texto de cima do <code>input</code> está como <code>SSH clone URL</code>. Se não estiver, clique no link SSH que aparece abaixo do <code>input</code>.</p>
<p>Após copiar a URL, abra seu terminal, crie um diretório onde você vai guardar o projeto, e digite <code>git clone &lt;url-do-repositorio&gt;</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> clone git<span class="variable">@github</span>.com:fdaciuk/gulp.git</div></pre></td></tr></table></figure>

<p>O comando <code>git clone</code> pega o repositório como ele está no <strong>Github</strong>, já iniciado e com todo o histórico de commits atualizado. Seria o mesmo que você executar os comandos:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git init</div><div class="line"><span class="variable">$ </span>git remote add origin git<span class="variable">@github</span>.<span class="symbol">com:</span>fdaciuk/gulp.git</div><div class="line"><span class="variable">$ </span>git pull origin master</div></pre></td></tr></table></figure>

<p>Pronto! Já temos nosso projeto clonado em nossa máquina local! Com esse comando (<code>git clone</code>), será criado um diretório com o mesmo nome do repositório. Entrando nele (<code>cd gulp</code>), vamos começar a codar!</p>
<h2 id="Criando_a_branch_para_codar_a_feature">Criando a branch para codar a feature</h2>
<p>Agora vamos criar uma nova <em>branch</em> para a nossa feature. Digamos que vamos melhorar o método <code>watch()</code> do <strong>Gulp</strong>. Vamos criar uma <em>branch</em> com um nome que diga o que será feito. Antes de tudo, garanta que você está na branch <strong>master</strong>, executando o comando:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> branch</div></pre></td></tr></table></figure>

<p>A resposta deve ser:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>master</div></pre></td></tr></table></figure>

<p><em>Porque precisa estar na master?</em></p>
<p>Por convenção, o <strong>git</strong> utiliza a <em>branch</em> master como padrão, para o código estável do projeto. Então, tudo o que estiver nessa <em>branch</em>, em qualquer repositório, <del>teóricamente</del> é código estável. Logo, você nunca irá mexer diretamente nela, mas em outras branchs, para então fazer <strong>merge</strong> com a master.</p>
<p>Agora vamos criar a <em>branch</em> com nossa feature. Temos duas formas de fazer isso. A forma mais rápida é:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">git</span> checkout -b improve_method_watch</div></pre></td></tr></table></figure>

<p><code>improve_method_watch</code> é o nome da nossa <em>branch</em>. A outra forma de criar um repositório é com os comandos:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git branch improve_method_watch</div><div class="line"><span class="variable">$ </span>git checkout improve_method_watch</div></pre></td></tr></table></figure>

<p>O primeiro comando cria a branch. O segundo comando troca da branch <strong>master</strong> para a branch <strong>improve_method_watch</strong>.</p>
<p>Mas o primeiro comando que executamos (<code>git checkout -b improve_method_watch</code>), já faz essas duas coisas em um comando só: cria a branch (<code>-b</code>) e já muda para a branch criada (<code>git checkout</code>).</p>
<p>Ok. Agora podemos trabalhar! Vamos codar o que for necessário para deixar essa feature funcionando!</p>
<p><em>Tá, mas porque eu preciso criar uma nova branch? Se tudo irá para a master, porque não posso codar direto ali?</em></p>
<p>Como eu disse, a branch <strong>master</strong> é a branch com o código final do projeto, estável. Criando uma nova branch, se você submeter o <em>pull request</em> para o repositório original, mas ele não for aceito, as alterações não estarão na sua branch master. Dessa forma, se você quiser manter sempre os dois repositórios atualizados e sincronizados, você só precisa apagar a branch que você criou e fez a feature. As duas <strong>master</strong> vão continuar iguaizinhas :)</p>
<h2 id="Dicas_para_um_bom_Pull_Request">Dicas para um bom Pull Request</h2>
<p>Quando você for fazer um <em>pull request</em>, a pessoa que é responsável pelo repositório terá de conferir se o código que você está enviando está de acordo com os padrões definidos para aquele projeto. Por isso, tenha em mente que o seu <em>pull request</em> deve ter <strong>pouco código</strong>. Se a funcionalidade que você quer implementar for muito grande, quebre em partes menores, e envie <em>pull requests</em> pequenos, com o mínimo de alterações possíveis. </p>
<p>Isso vai facilitar a conferência do código, e a sua feature terá maiores chances de ser aceita e fazer parte do projeto principal :)</p>
<p>Após codar sua alteração, é hora de enviar para o seu <em>fork</em>. Primeiro você precisa <em>commitar</em> sua alteração:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> --<span class="keyword">all</span></div><div class="line">$ git commit -<span class="keyword">m</span> <span class="string">"Mensagem de commit"</span></div></pre></td></tr></table></figure>

<p>Coloque uma mensagem que defina exatamente o que você fez. De preferência, a cada pequena parte que você codar, comite com uma mensagem que diga o que está sendo feito até ali. Exemplo:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> -<span class="keyword">all</span></div><div class="line">$ git commit -<span class="keyword">m</span> <span class="string">"Remove código não utilizado"</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> -<span class="keyword">all</span></div><div class="line">$ git commit -<span class="keyword">m</span> <span class="string">"Ajusta posicionamento do botão de submeter formulário, na página de contato"</span></div></pre></td></tr></table></figure>

<p>Só alguns exemplos de mensagens de commit. Disserte um pouco sobre a funcionalidade que você está criando. Não precisa ser nada muito formal, mas escreva de uma forma que qualquer pessoa que ler, entenda.</p>
<p>Lembrando que, se você estiver fazendo uma alteração para um projeto em inglês, a mensagem de commit deve ser nessa língua.</p>
<p>Após comitar, nossa alteração já está na árvore do <strong>git</strong>. Vamos agora subir para o nosso repositório forkado:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">push</span> origin improve_method_watch</div></pre></td></tr></table></figure>

<p>Você vai rodar esse comando, trocando <code>improve_method_watch</code> pelo nome da sua <em>branch</em>, obviamente.</p>
<p>Fazendo isso, acesse a conta do repositório original no <strong>Github</strong>, e você verá uma mensagem como essa:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/message-pull-request.png" alt="Mensagem de Pull Request no Github"></p>
<p>Depois é só clicar no botão verde <strong>Compare &amp; Pull Request</strong>.</p>
<p><em>Você tá falando de Pull Request desde que começou esse tutorial, mas afinal, o que é Pull Request?</em></p>
<p><em>Pull Request</em> é quando você envia uma sugestão de melhoria para o repositório. </p>
<p>Quando você quer <em>trazer</em>, <em>pegar</em>, <em>puxar</em> algo para o seu repositório usando o git, você usa o comando <code>git pull</code>. Então, um <em>pull request</em> nada mais é do que uma requisição, ou pedido para que aquele repositório faça um <em>pull</em> com as suas alterações. :)</p>
<p>Após clicar no botão <strong>Compare &amp; Pull Request</strong>, você será direcionado para a tela onde você vai criar o <em>pull request</em>, e pode conferir se as alterações que aparecem realmente correspondem às alterações que você fez:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/create-pull-request.png" alt="Mensagem de Pull Request"></p>
<p>Na imagem acima você pode ver:</p>
<ul>
<li>Onde diz <strong>base fork</strong> é o diretório padrão. No meu caso, está em <strong>gulpjs/gulp</strong>.</li>
<li>Ao lado, a <em>branch</em> para a qual eu vou enviar meu <em>pull request</em>. Vou enviar direto para a master do repositório padrão.</li>
<li><strong>head fork</strong> é o seu repositório, que você forkou. Na imagem, é o <strong>fdaciuk/gulp</strong>.</li>
<li>E por fim, a <em>branch</em> onde eu fiz a alteração: <em>compare improve_method_watch</em></li>
</ul>
<p>Depois disso, você vai colocar um título no seu <em>pull request</em>, para que, ao visualizar a listagem de <em>pull requests</em>, fique fácil saber do que se trata. Normalmente, quando você só tem uma mensagem de commit, esse título é assumido com a mensagem. Ajuste conforme a necessidade.</p>
<p>Não esqueça também de comentar porque você está fazendo esse <em>pull request</em>, e porque esse ajuste que você fez, faz sentido para o repositório. Uma boa defesa pode ajudar a fazer com que seu <em>pull request</em> seja aceito.</p>
<p>Antes de clicar no botão <strong>Create Pull Request</strong>, confira os dados da imagem abaixo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/check-pull-request.png" alt="Conferir Pull Request"></p>
<p>Rolando um pouco, você vai ver os commits que você fez. Confira se está na branch correta, e que você está enviando somente aquilo que vocẽ alterou. Se você escolher uma branch errada para enviar, você verá milhares de outras alterações - ou talvez nenhuma, se for a mesma branch - que não fará sentido de ser feito o <strong>merge</strong> do <em>pull request</em>.</p>
<p>No meu caso, eu fiz só uma alteração no <strong>README.md</strong>, adicionando um plugin do <strong>Gulp</strong> (<code>gulp-util</code>) na sessão de <em>plugins recomendados</em>.</p>
<p>Depois de tudo verificado, clique no botão <strong>Creat Pull Request</strong> e aguarde a resposta! Você será avisado por e-mail - se você não desabilitou as notificações - se houver qualquer atividade nesse <em>pull request</em>: comentários tanto no <em>pull request</em> como nos códigos, para que você possa modificar algo, se a <em>branch</em> for fechada, porque o autor achou que a alteração não fez sentido, ou ainda se o <strong>merge</strong> for feito. </p>
<p>Se ele fez o <strong>merge</strong>, então sua alteração já faz parte do repositório principal, e você aparecerá na guia <strong>Contributors</strong> do repositório principal:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/contributors.png" alt="Colaboradores"></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/contributors-list.png" alt="Lista de colaboradores"></p>
<p>Como você viu na imagem acima, aparece quantos commits você fez, quanto código você adicionou e quanto você removeu!</p>
<h2 id="Manter_o_projeto_sempre_atualizado">Manter o projeto sempre atualizado</h2>
<p>Para que o seu projeto tenha sempre as últimas alterações do repositório principal, siga as instruções <a href="http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/" target="_blank" rel="external">desse link</a>.</p>
<p>Agora você não tem mais desculpas para não colaborar com algum projeto no <strong>Github</strong>! Cada vez que você colabora para um projeto <em>open source</em>, você ganha conhecimento e cresce como profissional! Siga a <a href="https://www.youtube.com/watch?v=dkLCn2S03ws" target="_blank" rel="external">dica do E.T. Bilú</a>: busque conhecimento!</p>
<p>Ficou alguma dúvida? Comente!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/git-clone-pull-request.jpg" alt=""></p>
<p>Você tem uma conta no Github, acompanha projetos open source, gostaria de colaborar com algum deles, mas não sabe como fazer? Como criar uma nova feature? Como preparar o repositório? O que é <em>git push</em>?</p>
<p>Se você tem essas dúvidas, esse artigo é pra você!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="git" scheme="http://blog.da2k.com.br/tags/git/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WordPress - Tipos de conteúdo]]></title>
    <link href="http://blog.da2k.com.br/2015/02/03/wordpress-tipos-de-conteudo/"/>
    <id>http://blog.da2k.com.br/2015/02/03/wordpress-tipos-de-conteudo/</id>
    <published>2015-02-03T00:00:00.000Z</published>
    <updated>2015-02-10T03:01:20.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/lorem-wordpress.jpg" alt=""></p>
<p><em>O que eu posso fazer com WordPress?</em> A resposta para isso é: o que a sua imaginação permitir! Além dos tipos de conteúdo que ele traz por padrão, você ainda tem infinitas possibilidades de criação de novos tipos de conteúdo e personalização! </p>
<p>Hoje vamos conhecer um pouco sobre cada um deles! :D</p>
<a id="more"></a>

<h2 id="Tipos_de_conteúdo">Tipos de conteúdo</h2>
<p>Como vocế já deve saber, o WordPress teve seu início como uma plataforma de blog. E até hoje ele ainda serve muito bem para esse propósito. Mas hoje, ele é muito mais do que isso: o WordPress é um framework que te oferece várias ferramentas para que você crie qualquer tipo de conteúdo que possa ser gerenciado pelo <a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-1/" target="_blank" rel="external">Painel</a>!</p>
<p>O WordPress trata todo tipo de conteúdo como “post”. Então, quando nos referirmos a “post”, estaremos falando de qualquer tipo de conteúdo que tenha alguma “postagem”, e não os posts de um blog, - a menos que isso seja dito - ok?</p>
<p>O WordPress tem 5 tipos de conteúdo por padrão:</p>
<ul>
<li>Post (Post Type “post”);</li>
<li>Page (Post Type “page”);</li>
<li>Attachment (Post Type “attachment”);</li>
<li>Revision(Post Type “revision”);</li>
<li>Navigation Menu (Post Type “nav_menu_item”).</li>
</ul>
<h3 id="Post">Post</h3>
<p><strong>Post</strong> é um tipo de conteúdo normalmente usado para mostrar conteúdo de um blog. Eles são ordenados por data decrescente, ou seja, o mais recente aparece primeiro. Eles também são usados para criação dos <a href="http://codex.wordpress.org/Glossary#Feed" target="_blank" rel="external">Feeds</a>.</p>
<h3 id="Pages">Pages</h3>
<p><strong>Page</strong> é um tipo de conteúdo parecido com o <strong>post</strong>, mas ele é ordenado hierarquicamente, ou seja, páginas podem ter páginas filhas, e sua ordem, mostrada no site, é a ordem que você deixa no Painel. <strong>Pages</strong> ainda podem usar <strong>template pages</strong>, onde você pode criar um template e setar como uma página irá ficar.</p>
<h3 id="Attachment">Attachment</h3>
<p><strong>Attachment</strong> é um tipo especial de conteúdo, que guarda informações de todos os arquivos que foram “subidos” para o site.</p>
<h3 id="Revision">Revision</h3>
<p><strong>Revision</strong> é usado para fazer revisões de posts. Nesse tipo de conteúdo, os posts que são automaticamente salvos, ficam com uma cópia anterior nesse tipo de conteúdo, para que, se você fez alguma besteira, você tenha a opção de voltar algumas versões atrás.</p>
<h3 id="Navigation_Menu">Navigation Menu</h3>
<p>Esse é um tipo de conteúdo que guarda informações de cada item do menu no <strong>Painel</strong>.</p>
<h2 id="Custom_Post_Types_(CPT)">Custom Post Types (CPT)</h2>
<p><strong>Tipos de post personalizados</strong> ou <strong>Tipos de conteúdo personalizados</strong>, são os tipos de conteúdo que você pode criar. Quando você cria um CPT, você escolhe se ele vai ser no estilo dos <strong>posts</strong> (cronológico) ou no estilo de <strong>pages</strong> (hierárquico). Entraremos mais a fundo nesse assunto quando estivermos criando nossos próprios “Post Types” (ou “Content Types”, como alguns gostam de chamar)! o/</p>
<p>No próximo post, veremos como é a estrutura de templates do WordPress, e como isso afeta os tipos de conteúdo!</p>
<p>Até a pŕóxima! :D</p>
<blockquote>

<p><strong>Link para o índice: </strong><br><a href="http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/11/indice-da-serie-como-criar-temas-para-wordpress/</a></p>
<p><strong> Post anterior:</strong><br><a href="http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-2/" target="_blank" rel="external">http://blog.da2k.com.br/2015/01/20/wordpress-conhecendo-o-painel-parte-2/</a></p>
<p><strong> Próximo post:</strong><br><a href="http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/" target="_blank" rel="external">http://blog.da2k.com.br/2015/02/10/wordpress-separando-as-responsabilidades/</a></p>
</blockquote>


<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/lorem-wordpress.jpg" alt=""></p>
<p><em>O que eu posso fazer com WordPress?</em> A resposta para isso é: o que a sua imaginação permitir! Além dos tipos de conteúdo que ele traz por padrão, você ainda tem infinitas possibilidades de criação de novos tipos de conteúdo e personalização! </p>
<p>Hoje vamos conhecer um pouco sobre cada um deles! :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="serie temas wordpress" scheme="http://blog.da2k.com.br/tags/serie-temas-wordpress/"/>
    
      <category term="wordpress" scheme="http://blog.da2k.com.br/categories/wordpress/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Licenças]]></title>
    <link href="http://blog.da2k.com.br/2015/02/02/segredos-do-github-licencas/"/>
    <id>http://blog.da2k.com.br/2015/02/02/segredos-do-github-licencas/</id>
    <published>2015-02-02T00:00:00.000Z</published>
    <updated>2015-02-03T02:59:08.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-license.png" alt=""></p>
<p><em>Licença</em> não é só sinônimo de educação (<del>só piada boa!</del>). No mundo do software, o que define como aquele software será distribuído? O software será pago? Outras pessoas poderão distribuí-lo sem problemas, ou terão que pagar por isso? Ou ainda, podem distribuir o software, mas terão que citar o autor?</p>
<p>Quem responde a essas perguntas são as <em>licenças!</em></p>
<a id="more"></a>

<p>Não vou entrar em muitos detalhes sobre as licenças, pois o post é sobre como o Github nos ajuda com elas. Mas é necessário uma pequena divagação sobre o assunto.</p>
<p>Quando você coloca seu código na internet, ele fica disponível para milhões de pessoas o aproveitarem como bem entenderem. Algumas irão utilizar seu código, citando que você é o autor, outras simplesmente irão copiá-lo, como se fossem os próprios autores. Enfim, internet é terra de ninguém, e todos sabemos disso. </p>
<p>O que te “garante” algo é a licença que você disponibiliza junto com seu código. Existem vários tipos de licenças.</p>
<p>Algumas das mais utilizadas conhecidas são: MIT, GPL, LGPL, BSD.</p>
<p><em>Mas o que o Github tem a ver com isso?</em></p>
<p>Quando você cria um novo repositório, o Github te dá a opção de adicionar uma licença:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/license.png" alt=""></p>
<p><em>Mas eu já tenho meu projeto, e não tenho uma licença ainda? Como escolher?</em></p>
<p>Se você já criou seu repositório, você tem a opção de criar o arquivo de licença através do link <code>+</code>, mostrado abaixo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/new-license.png" alt=""></p>
<p>Será mostrada a tela para criar um novo arquivo:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/new-file-github.png" alt=""></p>
<p>Coloque o nome do arquivo como <code>LICENSE</code>, e veja a mágica acontecer:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/02/new-file-github-license.png" alt=""></p>
<p>Agora é só escolher uma licença, e salvar. Ao fazer isso, já fica registrado um novo commit com a alteração :D</p>
<p>Para saber mais sobre lincenças, segue alguns links interessantes:</p>
<ul>
<li><a href="http://ccsl.ime.usp.br/files/relatorio-licencas.pdf" target="_blank" rel="external">http://ccsl.ime.usp.br/files/relatorio-licencas.pdf</a></li>
<li><a href="http://www.dirceupauka.com/entendendo-a-licenca-mit" target="_blank" rel="external">http://www.dirceupauka.com/entendendo-a-licenca-mit</a></li>
</ul>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/02/github-secrets-license.png" alt=""></p>
<p><em>Licença</em> não é só sinônimo de educação (<del>só piada boa!</del>). No mundo do software, o que define como aquele software será distribuído? O software será pago? Outras pessoas poderão distribuí-lo sem problemas, ou terão que pagar por isso? Ou ainda, podem distribuir o software, mas terão que citar o autor?</p>
<p>Quem responde a essas perguntas são as <em>licenças!</em></p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - mantendo a ordem no seu repositório]]></title>
    <link href="http://blog.da2k.com.br/2015/02/01/segredos-do-github-mantendo-a-ordem-no-seu-repositorio/"/>
    <id>http://blog.da2k.com.br/2015/02/01/segredos-do-github-mantendo-a-ordem-no-seu-repositorio/</id>
    <published>2015-02-01T00:00:00.000Z</published>
    <updated>2015-02-02T09:34:15.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/2015/02/github-secrets-clean-repository.png" alt=""></p>
<p>Uma dica simples, mas funcional!</p>
<a id="more"></a>

<p>Quando você cria uma nova feature para um projeto open source, normalmente você cria uma branch nova, faz suas alterações, faz o <em>push</em> para o seu repositório nessa nova branch e então envia um <em>pull request</em>.</p>
<p>Quando o <em>pull request</em> é aceito, você faz o <a href="http://blog.da2k.com.br/2014/01/19/manter-repositorio-github-forkado-sincronizado-com-o-original/" target="_blank" rel="external">processo para atualizar o seu repositório com o repositório forkado</a> e tudo fica 100% como deveria!</p>
<p>Mas, com o tempo, sua lista de branchs no <strong>Github</strong> vai aumentando, mas você não vai mais precisar delas, pois seu <em>pull request</em> já foi aceito. Como limpar a sujeira e deixar somente as branchs que você precisa?</p>
<h2 id="Removendo_branchs_do_Github">Removendo branchs do Github</h2>
<p>Para remover uma branch do <strong>Github</strong>, você pode usar o comando no seu terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin nome_da_branch --delete</div></pre></td></tr></table></figure>

<p>Isso irá deletar a branch do <strong>Github</strong>!</p>
<p>Você pode ainda fazer assim:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :nome_da_branch</div></pre></td></tr></table></figure>

<p>Com os dois pontos (<code>:</code>) na frente do nome da branch, o resultado é o mesmo :D</p>
<h2 id="Removendo_branchs_localmente">Removendo branchs localmente</h2>
<p>E para remover branchs localmente, o comando é:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -D nome_da_branch</div></pre></td></tr></table></figure>

<p>Dica rápida, mas ajuda a organizar a casa :D</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/2015/02/github-secrets-clean-repository.png" alt=""></p>
<p>Uma dica simples, mas funcional!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - incentivar a contribuição para seus projetos open source]]></title>
    <link href="http://blog.da2k.com.br/2015/01/31/segredos-do-github-incentivar-a-contribuicao-para-seus-projetos-open-source/"/>
    <id>http://blog.da2k.com.br/2015/01/31/segredos-do-github-incentivar-a-contribuicao-para-seus-projetos-open-source/</id>
    <published>2015-01-31T00:00:00.000Z</published>
    <updated>2015-01-31T13:32:26.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-contributing.png" alt=""></p>
<p>Contribuir para projetos open source é algo que nos faz crescer muito como profissionais. Temos a oportunidade de aprender coisas novas e praticar o que muitas vezes não utilizamos comumente no nosso dia-a-dia. Como o Github nos ajuda com isso?</p>
<a id="more"></a>

<p>Cada pessoa que cria um projeto open source tem sua forma de escrever seus códigos, organizar a estrutura de arquivos, etc. Se o projeto é interessante, outras pessoas acabam ficando interessadas em contribuir. Mas a frustração vem quando descobrimos que cada um escreve seu código de uma forma: alguns usam tabs, outros espaços; uns preferem 4 espaços, outros preferem 2; colocar espaço entre o <code>if</code> e os <code>()</code> ou não, escrever o<code>else</code> em uma nova linha, ou na mesma linha do fechamento do <code>}</code>, etc.</p>
<p>Nenhuma forma está errada! São apenas diferentes modos de escrever o mesmo código! Mas se um mesmo código tiver várias dessas formas misturadas, o projeto vai acabar virando uma zona!</p>
<p>Então, normalmente você coloca no <strong>README.md</strong> do seu repositório uma área de <strong>Como contribuir</strong>, citando os padrões que você utilizou no código, mostrando como criar uma nova feature, etc.</p>
<p>Mas no momento de empolgação, muitas vezes os devs nem chegam nessa parte do seu <strong>README</strong>, e acabam enviando <em>pull requests</em> com seus próprios padrões.</p>
<h2 id="O_arquivo_CONTRIBUTING-md">O arquivo CONTRIBUTING.md</h2>
<p>Uma feature bem simples do Github, mas que pode ajudar a organizar melhor a colaboração nos seus projetos, é você adicionar um arquivo chamado <code>CONTRIBUTING.md</code>.</p>
<p>Nesse arquivo você coloca tudo o que a pessoa que vai colaborar com o seu projeto precisa saber.</p>
<p><em>Mas se o dev nem chega a ler o <strong>README</strong>, como ele vai saber que tem um arquivo separado com as informações de como contribuir?</em></p>
<p>É aí que está o pulo do gato! Quando você cria esse arquivo, sempre que alguém for criar uma nova <em>issue</em> ou enviar um <em>pull request</em>, olha o que vai aparecer pra ele:</p>
<p><img src="https://camo.githubusercontent.com/b38f439e43db12ebcbf6f6f2b8afe88862d31e47/687474703a2f2f692e696d6775722e636f6d2f726e38334e58672e706e67" alt=""></p>
<p>O “<strong>guidelines for contributing</strong>“ que aparece na mensagem acima, é linkado diretamente com o seu arquivo <strong>CONTRIBUTING.md</strong>! Assim, sempre que alguém for colaborar, ele verá esse aviso, e ainda que não leia o <strong>README</strong>, verá que existem alguns padrões a serem seguidos para que ele possa contribuir! :D</p>
<p>Claro que pode acontecer do dev nem clicar pra ler, mas com certeza ele verá o aviso ;)</p>
<p>Já conhecia essa feature? Bacana, não? :D</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-contributing.png" alt=""></p>
<p>Contribuir para projetos open source é algo que nos faz crescer muito como profissionais. Temos a oportunidade de aprender coisas novas e praticar o que muitas vezes não utilizamos comumente no nosso dia-a-dia. Como o Github nos ajuda com isso?</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - como invocar funções]]></title>
    <link href="http://blog.da2k.com.br/2015/01/30/javascript-como-invocar-funcoes/"/>
    <id>http://blog.da2k.com.br/2015/01/30/javascript-como-invocar-funcoes/</id>
    <published>2015-01-30T00:00:00.000Z</published>
    <updated>2015-01-30T09:00:46.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/functions-invoke.jpg" alt=""></p>
<p>Funções são objetos de primeira classe em <strong>Javascript</strong>. É o que faz do <strong>Javascript</strong> a <em>coisa fofa</em> que ele é hoje. Por isso, é muito importante saber todas as formas das quais podemos invocar funções, e como isso afeta nossos programas. Já sabe? Não sabe? Não sabe se sabe? Vem ver então!</p>
<a id="more"></a>

<h2 id="Funções_como_objetos_de_primeira_classe">Funções como objetos de primeira classe</h2>
<p><strong>Objetos de primeira classe</strong> em Javascript, são os tipos de objetos que apresentam capacidades comuns dentro da linguagem, como:</p>
<ul>
<li>podem ser criados a partir de literais;</li>
<li>podem ser atribuídos a variáveis, arrays e propriedades de outros objetos;</li>
<li>podem ser passados como argumentos para funções;</li>
<li>podem ser retornados como valores de funções;</li>
<li>podem ter propriedades, sendo criadas e atribuídas dinamicamente.</li>
</ul>
<p>Por isso <strong>funções</strong> são <strong>objetos de primeira classe</strong>; pois, exatamente como qualquer outro tipo de objeto, elas têm as capacidades citadas acima.</p>
<h2 id="Estrutura_de_uma_função">Estrutura de uma função</h2>
<p>Uma função é formada por quatro partes:</p>
<ul>
<li>A palavra-chave <code>function</code>;</li>
<li>um nome (opcional);</li>
<li>os parênteses <code>()</code>, que podem receber - opcionalmente - parâmetros;</li>
<li>as chaves <code>{}</code>, onde ficará o corpo da função. O corpo também é opcional.</li>
</ul>
<p>Então, para que possa ser considerada uma função, ela precisa ao menos ter a seguinte estrutura:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div></pre></td></tr></table></figure>

<h2 id="Invocando_funções_como_função">Invocando funções como função</h2>
<p>Parece um termo meio estranho, mas é assim mesmo. Essa é a forma mais conhecida de invocar funções. Para invocar funções <em>como função</em>, nós utilizamos o operador <code>()</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'Hi!'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( hello() ); <span class="comment">// Hi!</span></div></pre></td></tr></table></figure>

<p>Criamos uma função chamada <code>hello</code> e a invocamos com o operador <code>()</code>. Se não tivéssemos adicionado o operador <code>()</code>, a função seria retornada em seu formato literal. Experimente fazer isso, removendo os parênteses da chamada no <code>console.log()</code> :)</p>
<p><em>Mas você disse que o nome da função é opcional. Se eu não colocar o nome, como vou invocá-la?</em></p>
<p>Boa pergunta, meu jovem! Quando uma função não tem nome, a chamamos de <strong>função anônima</strong>. Para invocar uma função anônima, só existe uma forma: utilizando um <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="external"><em>IIFE</em></a>, ou mais conhecido como <em>invocação de função imediata</em>.</p>
<p>Para que uma função seja invocada, ela não pode estar no seu estado literal, ela precisa ser uma <em>expressão</em>. Para tornar uma função em uma expressão, podemos fazer das seguintes formas:</p>
<p><strong>Com o operador <code>()</code></strong>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{})</div></pre></td></tr></table></figure>

<p>Agora essa função é uma expressão, e pode ser invocada:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}())</div></pre></td></tr></table></figure>

<p>Ou ainda:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{})()</div></pre></td></tr></table></figure>

<p>Não faz diferença alguma se os parênteses (operador) estão dentro ou fora dos primeiros parênteses (expressão). O resultado é o mesmo: a função será invocada. Faça o teste. Cole no console do seu navegador e veja o que retorna:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'oi'</span>;</div><div class="line">}());</div><div class="line"><span class="comment">// oi</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'oi'</span>;</div><div class="line">})();</div><div class="line"><span class="comment">// oi</span></div></pre></td></tr></table></figure>

<p>Temos ainda outros operadores que transformam um literal em uma expressão: O <code>+</code>, <code>-</code>, <code>!</code> e <code>~</code>. Como funções são tratadas como qualquer outro tipo de objeto, elas também podem ser convertidas em expressões usando esses operadores.</p>
<p>Por exemplo, se você tentar invocar uma função no seu formato literal:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>

<p>Você terá um erro de sintaxe, pois, para funções literais, o nome é obrigatório para que elas possam ser invocadas. Nesse caso, teríamos que fazer algo como:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span> </span>{}</div><div class="line">hello();</div></pre></td></tr></table></figure>

<p>Pois se tentarmos invocar a função no formato literal, ela continuará dando erro de sintaxe.</p>
<p>Mas usando os operadores mostrados acima, a função se torna uma expressão, podendo então ser invocada. Todos os exemplos abaixo são válidos para uma <em>IIFE</em>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}()</div></pre></td></tr></table></figure>

<p>Provavelmente você já deve ter visto essa sintaxe, principalmente em arquivos minificados (talvez um plugin jQuery).</p>
<p><em>E qual a vantagem de usar um desses operadores no lugar dos parênteses?</em></p>
<p>Um caractere a menos! Para minificação de código, qualquer caractere a mais já faz diferença!</p>
<h2 id="Invocando_funções_como_método_de_um_objeto">Invocando funções como método de um objeto</h2>
<p>Para invocar uma função <em>como método</em>, precisamos de um objeto. Depois, passamos uma função para ele. Quando temos uma função que é retornada por um objeto, nós a chamamos de <code>método</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = {};</div><div class="line">obj.func = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{};</div><div class="line">obj.func();</div></pre></td></tr></table></figure>

<p>Dessa forma, nós estamos trabalhando com <em>orientação a objetos</em> em Javascript! </p>
<p><em>E qual a diferença de invocar uma função “como função” e invocar “como método” de um objeto?</em></p>
<p>Em outras linguagens, o <code>this</code> dentro de uma classe representa o objeto que está envolvendo esse parâmetro. Esse <code>this</code> depende da forma como essa classe foi declarada.</p>
<p>Já em Javascript, o contexto do método (<code>this</code>) depende da forma de como a função é <strong>invocada</strong>.<br>Invocando a função <code>func</code> como método do objeto <code>obj</code>, o <code>this</code> usado dentro da função representa o <code>obj</code>.</p>
<p>Experimente colar no seu console dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = {};</div><div class="line">obj.func = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">};</div><div class="line"><span class="built_in">console</span>.log( obj.func() );</div></pre></td></tr></table></figure>

<p>O retorno será um <em>Objeto</em> (no caso, o <code>obj</code>), contendo o método <code>func</code>.</p>
<p>Agora, faça o teste sem o objeto:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( func() );</div></pre></td></tr></table></figure>

<p>O que é retornado? O <em>Objeto</em> <code>window</code>!</p>
<p><em>Porque</em>?</p>
<p>Por que estamos declarando a função no escopo global. Com isso, podemos dizer que toda função é um método. Nesse caso, <code>func</code> foi declarada como um método de <code>window</code>, que é nosso objeto global no browser.</p>
<p>Para ter uma visão melhor de orientação a objetos aqui, podemos declarar a função <code>func</code> como método do objeto <code>window</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.func = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">window</span>.func() );</div></pre></td></tr></table></figure>

<p>E o resultado é o mesmo que o anterior! O <code>this</code> é o objeto <code>window</code>. Assim fica mais fácil de entender o <code>this</code>, não? Mas falaremos mais sobre ele um pouco mais à frente :)</p>
<p>O que você precisa saber aqui é que, dependendo de como você invoca a função, assim o contexto dela será definido.</p>
<h2 id="Invocando_funções_como_construtores">Invocando funções como construtores</h2>
<p>Outra forma de invocar funções é como <em>construtores</em>, usando a palavra-chave <code>new</code>. Fazendo isso, criamos um novo objeto vazio, que será o contexto da nossa função. Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  };</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> Func();</div><div class="line"><span class="built_in">console</span>.log( newObj.method() );</div></pre></td></tr></table></figure>

<p>Você pode ver que um construtor nada mais é que uma simples função. Novamente: o que vai mudar aqui é a forma como essa função é invocada. Ao invocar como construtor, um novo objeto é criado e passado como referência ao construtor como o parâmetro <code>this</code>. </p>
<p>Perceba que na função construtora <code>Func</code> não temos um <code>return</code> diretamente no corpo dela, pois como usamos o <code>new</code> para invocá-la, implicitamente o <code>this</code> já é o novo objeto criado, e este objeto é automaticamente retornado, se não tiver um <code>return</code> explícito na função.</p>
<p>Para saber se o código acima se refere mesmo ao objeto <code>newObj</code>, criado a partir da função construtora, podemos testar dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  };</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> Func();</div><div class="line"><span class="built_in">console</span>.log( newObj.method() === newObj );</div></pre></td></tr></table></figure>

<p>O método <code>method</code> retorna o <code>this</code>. Como invocamos com o <code>new</code>, o <code>this</code> deve referenciar o objeto que acabamos de criar <code>newObj</code>. A instrução acima deveria retornar <code>true</code>. :)</p>
<p>Vamos criar dois objetos diferentes para tirar a prova real:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  };</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> newObj = <span class="keyword">new</span> Func();</div><div class="line"><span class="keyword">var</span> newObj2 = <span class="keyword">new</span> Func();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( newObj.method() === newObj );</div><div class="line"><span class="built_in">console</span>.log( newObj2.method() === newObj2 );</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( newObj.method() === newObj2 );</div><div class="line"><span class="built_in">console</span>.log( newObj2.method() === newObj );</div></pre></td></tr></table></figure>

<p>Dessa forma, podemos visualizar melhor a vantagem de utilizar construtores: você cria um único método, genérico e reutilizável, que pode ser referenciado por instâncias diferentes, não precisando repetir código :)</p>
<p>O resultado é que:</p>
<ul>
<li>O método <code>method</code> de <code>newObj</code>, que retorna <code>this</code> é exatamente o objeto <code>newObj</code>;</li>
<li>O método <code>method</code> de <code>newObj2</code>, que retorna <code>this</code> é exatamente o objeto <code>newObj2</code>.</li>
</ul>
<p>Mas fazendo a comparação com o outro objeto, podemos ver que isso é bastante consistente, e o valor retornado é <code>false</code> para os dois casos:</p>
<ul>
<li>O método <code>method</code> de <code>newObj</code> não faz referência ao <code>newObj2</code>;</li>
<li>E nem o método <code>method</code> de <code>newObj2</code> faz referência ao <code>newObj</code>.</li>
</ul>
<p><strong>Observação:</strong> por definição, usamos nomes de construtores com a primeira letra maíuscula, para saber que essa função será usada como <em>construtor</em>.</p>
<h2 id="Invocando_funções_com_call()_e_apply()">Invocando funções com <code>call()</code> e <code>apply()</code></h2>
<p><em>Invocar funções com outras funções? Pra quê isso?</em></p>
<p>Função não são objetos? Então! Se elas são objetos, então elas podem ter propriedades e métodos, certo? Vamos começar brincando um pouco:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'oi'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line">func.bye = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'Good bye!'</span>;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( func() ); <span class="comment">// oi</span></div><div class="line"><span class="built_in">console</span>.log( func.bye() ); <span class="comment">// Good bye!</span></div></pre></td></tr></table></figure>

<p><em>Isso é sério? Tá de zua né?</em></p>
<p>Não tô! Cole o código acima no seu console pra você ver :P</p>
<p>O primeiro <code>console.log()</code> vai retornar <code>oi</code>, pois é o retorno da função. Depois, usamos das habilidades da função ser um objeto, e criamos um método chamado <code>bye</code>, que recebe uma função, que retorna <code>Good bye!</code>. Essa é uma das maravilhas que a programação funcional te proporciona!</p>
<p>Agora, voltando ao assunto: sempre que uma função é criada, ela tem algumas propriedades específicas de funções:</p>
<ul>
<li>A propriedade <code>name</code>, que retorna como <code>String</code> o nome da função;</li>
<li>Os métodos <code>call()</code> e <code>apply()</code>, que veremos a seguir.</li>
</ul>
<p><strong>Sobre a propriedade <code>name</code>:</strong> se você passa uma função anônima como valor de uma variável, o <code>name</code> vai retornar uma <em>String vazia</em>, pois a função não tem nome. Não confunda o nome da variável com o nome da função, ok?</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>{}</div><div class="line"><span class="built_in">console</span>.log( test.name ); <span class="comment">// "test"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> test2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{};</div><div class="line"><span class="built_in">console</span>.log( test2.name ); <span class="comment">// ""</span></div></pre></td></tr></table></figure>

<h3 id="Os_métodos_call()_e_apply()">Os métodos <code>call()</code> e <code>apply()</code></h3>
<p>Esses dois métodos fazem exatamente a mesma coisa: invocam uma função, onde você pode passar o contexto que você quiser. Eles só diferem na sintaxe.</p>
<p>O <code>call()</code>, recebe como primeiro parâmetro o contexto da função, e os outros parâmetros - pode passar quantos quiser - serão passados como argumentos para a função referenciada.</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( func.call( <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span> ) ); <span class="comment">// contexto - 10 - oie</span></div></pre></td></tr></table></figure>



<p>Veja que o <code>this</code> da função é retornado como a string <code>contexto</code>, pois foi o que eu passei no primeiro parâmetro. Depois, no segundo e terceiro parâmetros de <code>call()</code>, ele transportou para a função como primeiro e segundo argumentos, respectivamente. </p>
<p>Lembrando que o contexto é você quem decide. Você poderia passar um objeto, por exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.method();</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> obj = {</div><div class="line">  method: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="string">'method de obj'</span>;</div><div class="line">  }</div><div class="line">};</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( func.call( obj ) ); <span class="comment">// method de obj</span></div></pre></td></tr></table></figure>

<p>Veja que agora não passamos nenhum parâmetro para função <code>func</code>, através do método <code>call()</code>. Só passamos como contexto da função, o objeto <code>obj</code>. Esse objeto tem um método chamado <code>method</code>.</p>
<p>Como agora <code>obj</code> é o contexto de <code>func</code>, o <code>this</code> dentro de <code>func</code> faz referência a <code>obj</code>. Por isso podemos retornar <code>this.method();</code> dentro de <code>func</code>. Ficou claro?</p>
<p>O método <code>apply()</code> faz exatamente a mesma coisa que <code>call()</code>. A diferença está nos parâmetros passados: <code>apply()</code> recebe apenas dois parâmetros: o primeiro é o contexto, igual <code>call()</code>, e o segundo é um <code>Array</code> de argumentos que serão passados para a função. Usando o mesmo exemplo de <code>call()</code>, mas com <code>apply()</code>, ficaria assim: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( func.apply( <span class="string">'contexto'</span>, [ <span class="number">10</span>, <span class="string">'oie'</span> ]) ); <span class="comment">// contexto - 10 - oie</span></div></pre></td></tr></table></figure>

<p>E o resultado é exatamente o mesmo! Agora você me pergunta:</p>
<p><em>E precisa de duas abordagens diferentes pra fazer a mesma coisa?</em></p>
<p>Sim! Imagine se você precisa passar como argumentos de uma função vários parâmetros que você precisa iterar em um <code>for</code>. Como você faria? Não tem como passar os parâmetros, separados por vírgula. O que você faz então é: cria um array, coloca todos os parâmetros dentro desse array, e invoca a função com <code>apply()</code>. Simples, não?</p>
<h2 id="O_método_bind()">O método bind()</h2>
<p>Apesar de não servir para invocação de funções, acho que é bastante importante falar sobre o método <code>bind()</code>. Esse método faz a mesma coisa que os dois citados acima (<code>call()</code> e <code>apply()</code>), tem a mesma sintaxe de <code>call()</code>, com a diferença que ele não invoca a função, mas somente <em>injeta</em> o contexto e os argumentos para que a função possa ser chamada no futuro já com essas configurações pré-definidas.</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="keyword">var</span> funcConfig = func.bind( <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span>);</div><div class="line"><span class="built_in">console</span>.log( funcConfig() ); <span class="comment">// contexto - 10 - oie</span></div></pre></td></tr></table></figure>

<p>Mas esse método acaba sendo um pouco lento, pois ele é novo, e ainda não foi muito bem implementado pelos navegadores. Uma alternativa, é, novamente, se aproveitar da programação funcional, e criar um <em>polyfill</em> para usar como <code>bind()</code>. Podemos fazer algo assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> func = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> that = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call( <span class="built_in">arguments</span>, <span class="number">2</span> );</div><div class="line">  <span class="keyword">return</span> func.apply( that, args );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( bind( func, <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span> ) );</div></pre></td></tr></table></figure>

<p>Criamos a função que faz o papel do método <code>bind()</code>. Essa função vai receber 3 ou mais parâmetros, um pouco diferente do <code>bind()</code> nativo, que recebe 2 ou mais: o primeiro parâmetro é a função, onde serão injetados o contexto e os argumentos. O segundo segue o padrão normal: o contexto e depois os argumentos, no mesmo formato de <code>call()</code>.</p>
<p><em>Mas na função <code>bind()</code> você não passou nenhum parâmetro! Como pode isso funcionar? E o que é aquele <code>arguments</code>?</em></p>
<p>Vamos ver agora! :D</p>
<h2 id="arguments_e_this"><code>arguments</code> e <code>this</code></h2>
<p>Toda função recebe - implicitamente - dois parâmetros: <code>this</code> e <code>arguments</code>. </p>
<p>O <code>this</code>, como já vimos, se refere ao contexto da função. Já o <code>arguments</code> recebe uma coleção de argumentos que foram passados para a função.</p>
<p><em>Porque você disse “coleção”? Ele não é um <code>Array</code>?</em></p>
<p>Não! Apesar de você poder utilizar a mesma notação do <code>Array</code>, pegando o primeiro argumento passado para a função com <code>arguments[0]</code>, e também podendo ver a quantidade de argumentos passados com a propriedade <code>length</code>, podendo ser usado como <code>arguments.length</code>, as semelhanças com array acabam aqui.</p>
<p>Com isso nós temos um problema: nós não podemos usar os métodos de um <code>Array</code> comum na coleção <code>arguments</code>!</p>
<p>Mas, de novo, a lindeza da linguagem funcional aparece, e mostra quão poderoso é o Javascript. Baseado em <strong>Herança Prototipal (<em>Prototypal Inheritance</em>)</strong>, nós podemos invocar os métodos do <code>Array</code>, utilizando <code>call()</code> ou <code>apply()</code> para passar o nosso <em>pseudo-array</em> como contexto da função!</p>
<p><em>Hã?</em></p>
<p>Vou exemplificar:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log( arr.slice( <span class="number">1</span> ) ); <span class="comment">// [ 2, 3 ]</span></div></pre></td></tr></table></figure>

<p>O método <code>slice()</code> remove a quantidade de itens, passada como parâmetro, a partir do início do array. </p>
<p>Invocando esse método com <code>call()</code>, ele ficaria assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log( arr.slice.call( arr, <span class="number">1</span> ) ); <span class="comment">// [ 2, 3 ]</span></div></pre></td></tr></table></figure>

<p>Ou seja, o contexto é o próprio array, que usei como objeto, e repeti, passando-o no primeiro parâmetro, então não há necessidade de eu chamar assim. Mas no caso da nossa função <code>bind()</code> acima, o <code>arguments</code> não é um <code>Array</code>, logo, não podemos usar o método <code>slice()</code>.</p>
<p><em>Duvido!</em></p>
<p>Tente! A função ficaria assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> func = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> that = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>.slice( <span class="number">2</span> );</div><div class="line">  <span class="keyword">return</span> func.apply( that, args );</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">( arg1, arg2 )</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' - '</span> + arg1 + <span class="string">' - '</span> + arg2;</div><div class="line">}</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( bind( func, <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span> ) );</div></pre></td></tr></table></figure>

<p>E você vai tomar um erro na cara! Porque eu te disse que o <code>arguments</code> não é um <code>Array</code> :P</p>
<p>Então o que fazemos é (explicando a função <code>bind()</code> toda): </p>
<ul>
<li>Declaramos algumas variáveis no início, pra facilitar a visualização. <code>func</code> recebe o primeiro parâmetro (<code>arguments[0]</code>);</li>
<li><code>that</code> recebe o <code>this</code>, que é o contexto, passado no segundo parâmetro (<code>arguments[1]</code>);</li>
<li><code>args</code> recebe todos os outros parâmetros, menos os dois primeiros, por isso precisamos usar o <code>slice</code>.</li>
<li>e finalmente, retornamos a função passada no primeiro parâmetro, invocando ela com <code>apply()</code> para que possamos passar o contexto que está em <code>that</code> e o <code>Array</code> de argumentos em <code>args</code>. Aqui só precisamos da notação de <code>Array</code>, então não precisamos converter novamente :)</li>
</ul>
<p>Entendeu a ideia do nosso bind? É uma função que retorna uma outra função. Para que a segunda função seja invocada junto da primeira chamada, vocẽ teria que fazer algo como:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind( func, <span class="string">'contexto'</span>, <span class="number">10</span>, <span class="string">'oie'</span> )();</div></pre></td></tr></table></figure>

<p>A primeira chamada do operador <code>()</code> passa os parâmetros para dentro da função. Mas o retorno dela é uma função literal, por isso precisamos usar novamente o operador <code>()</code>, para que, dessa vez, a função que é o retorno seja executada!</p>
<p>Espero que tenha ficado claro como funciona a invocação de funções em Javascript, o método <code>bind()</code> e os parâmetros implícitos <code>this</code> e <code>arguments</code>.</p>
<p>Se ficou alguma dúvida, poste nos comentários!</p>
<p>Até o próximo! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/functions-invoke.jpg" alt=""></p>
<p>Funções são objetos de primeira classe em <strong>Javascript</strong>. É o que faz do <strong>Javascript</strong> a <em>coisa fofa</em> que ele é hoje. Por isso, é muito importante saber todas as formas das quais podemos invocar funções, e como isso afeta nossos programas. Já sabe? Não sabe? Não sabe se sabe? Vem ver então!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="funções" scheme="http://blog.da2k.com.br/tags/funcoes/"/>
    
      <category term="functional programming" scheme="http://blog.da2k.com.br/tags/functional-programming/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript - Usando temporizadores like a Ninja]]></title>
    <link href="http://blog.da2k.com.br/2015/01/29/javascript-usando-temporizadores-like-a-ninja/"/>
    <id>http://blog.da2k.com.br/2015/01/29/javascript-usando-temporizadores-like-a-ninja/</id>
    <published>2015-01-29T00:00:00.000Z</published>
    <updated>2015-01-29T02:49:42.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/javascript-timers.jpg" alt=""></p>
<p>Você provavelmente já conhece os métodos <code>setInterval()</code> e <code>setTimeout()</code>. Mas você sabe a exatamente a diferença entre eles? Sabe como eles realmente funcionam? Vem descobrir :)</p>
<a id="more"></a>

<p><code>setInterval()</code> e <code>setTimeout()</code> são funções temporizadoras. Elas executam uma função de <em>callback</em> após determinado tempo.</p>
<p>O uso delas é assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setTimeout( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Executa uma vez após 1 segundo.'</span> );</div><div class="line">}, <span class="number">1000</span> );</div><div class="line">  </div><div class="line">setInterval( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Executa infinitamente, 1 vez por segundo.'</span> );</div><div class="line">}, <span class="number">1000</span> );</div></pre></td></tr></table></figure>

<p>Como você pode ver, a sintaxe para as duas é a mesma: o primeiro parâmetro é uma função de callback que será executada após <code>x</code> milissegundos, passados no segundo parâmetro.</p>
<p>A principal diferença entre elas é que:</p>
<ul>
<li><code>setInterval()</code> executa infinitamente, até que você execute <code>clearInterval()</code>;</li>
<li><code>setTimeout()</code> executa apenas uma vez.</li>
</ul>
<p>Você pode remover um temporizador, atribuindo ele a uma variável, e depois usando <code>clearInterval( variavel )</code> para o <code>setInterval()</code>, e <code>clearTimeout( variavel )</code> para <code>setTimeout()</code>.</p>
<p>Um exemplo prático:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">if</span>( counter &gt;= <span class="number">10</span> ) {</div><div class="line">    clearInterval( timer );</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log( counter++ );</div><div class="line">}, <span class="number">1000</span>);</div></pre></td></tr></table></figure>

<p>Colando esse código no seu console, você pode constatar que é printado o valor de 0 a 10, e então o temporizador é removido.</p>
<p>Para usar com o <code>setTimeout()</code>, poderíamos fazer algo assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTimer</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> timer = setTimeout( <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( counter++ );</div><div class="line">    <span class="keyword">if</span>( counter &lt; <span class="number">11</span> ) {</div><div class="line">      myTimer();</div><div class="line">    }</div><div class="line">  }, <span class="number">1000</span> );</div><div class="line">}</div><div class="line">  </div><div class="line">myTimer();</div></pre></td></tr></table></figure>

<p>Como o <code>setTimeout()</code> executa somente uma vez, precisamos utilizar uma função recursiva para que temporizador continue executando até que ele encha o saco e nós possamos mandá-lo parar de chamar a função! xD</p>
<p>Bom, até aqui, provavelmente você já sabia de tudo. Mas você sabe em que momento usar <code>setInterval()</code> e quando usar <code>setTimeout()</code>? E porquê?</p>
<p><em>Dá no mesmo, posso usar qualquer uma!</em></p>
<p>É nesse ponto que fazemos a separação do jovem Padawan para o verdadeiro Ninja: você precisa conhecer o <em>Event Loop</em> do Javascript, e saber como essas funções o afetam.</p>
<h2 id="Como_funciona_o_Javascript">Como funciona o Javascript</h2>
<p>O Javascript trabalha em single thread. Aí você me pergunta: <em>então como ele faz concorrência?</em> </p>
<p>Através do <em>Event Loop!</em></p>
<p>Cada instrução assíncrona que precisa ser executada em JS, é lançada no <em>Event Loop</em>. Imagine um círculo, com uma única entrada e uma única saída. Todas as instruções entram pelo mesmo lugar, e saem por outro, uma de cada vez.</p>
<p>Como essas instruções são <em>assíncronas</em>, elas ficam rodando ali no <em>Event Loop</em> até que estejam prontas. Com isso, o JS não bloqueia a thread, podendo executar outras instruções. Quando uma instrução finaliza, o JS dispara um <strong>evento</strong> (daí o nome <em>Event Loop</em>), devolvendo em uma função de <code>callback</code> o resultado dessa instrução.</p>
<p>Instruções <em>síncronas</em> são executadas diretamente, bloqueando a thread.</p>
<p>Vamos ver isso na prática:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) {</div><div class="line">  <span class="built_in">console</span>.log( i );</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log( <span class="string">'Terminou o for'</span> );</div></pre></td></tr></table></figure>

<p>Um loop é uma instrução <em>síncrona</em>, bloqueante. Ou seja, enquanto ele estiver executando, a thread ficará bloqueada. Assim que ele terminar, a próxima instrução é executada. Rodando o exemplo acima no seu console, você verá que, primeiro serão impressos os números de 0 a 9, para então mostrar a mensagem <code>Terminou o for</code>.</p>
<p><em>E como seria uma instrução assíncrona?</em></p>
<p>Assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( <span class="string">'Vou executar antes de setInterval() o/'</span> );</div><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">if</span>( counter &gt;= <span class="number">10</span> ) {</div><div class="line">    clearInterval( timer );</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log( counter++ );</div><div class="line">}, <span class="number">1000</span>);</div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log( <span class="string">'E eu, apesar de estar depois, também vou executar antes do setInterval() xD'</span> );</div></pre></td></tr></table></figure>

<p><em>Porque os console.log() executam antes de setInterval()?</em></p>
<p>Por que o temporizador é uma função assíncrona. Tanto o <code>setInterval()</code>, quanto o <code>setTimeout()</code>. A função passada como parâmetro não é executada até que o tempo passado no segundo parâmetro se esgote.</p>
<p>O que acontece basicamente é o seguinte: o primeiro <code>console.log()</code> é automaticamente executado. Depois, o setInterval é colocado no <em>Event Loop</em> e, assim que se passar 1 segundo, e ele for o próximo da fila a ser executado (lembra que o <em>Event Loop</em> só executa uma coisa de cada vez?), o JS vai disparar um evento, fazendo com que a função de callback passada no primeiro parâmetro seja executada.</p>
<p>O tempo nunca vai garantir que o que está no callback vai ser executado exatamente naquele tempo, pois podem ter outras funções assíncronas no <em>Event Loop</em> sendo disparadas. Logo que a fila é liberada, e chega a vez do temporizador, aí então ele é executado.</p>
<p>Ficou claro como funciona o <em>Event Loop</em>? Ótimo, vamos seguir!</p>
<p>Sabendo disso, podemos enfim falar sobre as diferenças de <code>setInterval()</code> e <code>setTimeout()</code>.</p>
<h2 id="setInterval()">setInterval()</h2>
<p>Como o <code>setInterval()</code> executa infinitamente, a garantia que temos é que ele vai adicionar uma instrução ao <em>Event Loop</em> a cada um segundo (levando em consideração os exemplos passados).</p>
<p>Isso significa que, se em 1 segundo a primeira instrução não for executada, - por ter outras instruções no <em>Event Loop</em> - a segunda instrução será adicionada ao <em>Event Loop</em>, ficando duas instruções na fila.</p>
<p>Imagine agora você com vários temporizadores na tela. Cada <code>setInterval()</code> adicionando várias instruções ao <em>Event Loop</em>. Lembrando que o <em>Event Loop</em> é gerenciado pelo browser, no <em>client side</em>. Pode acontecer de chegar um momento que seu computador não terá memória suficiente para suportar a quantidade de eventos alocados, fazer seu navegador dar <em>crash</em>, e em alguns casos, até travar o computador.</p>
<p>Isso já aconteceu com você? Então. O problema, provavelmente, era o <code>setInterval()</code>.</p>
<h2 id="setTimeout()">setTimeout()</h2>
<p>Agora, analisando por esse lado, e sabendo que o <code>setTimeout()</code> só executa uma vez, - a menos que fizermos uma chamada recursiva para que ele execute mais vezes - podemos concluir que, o <code>setTimeout()</code> só vai adicionar mais uma instrução no <em>Event Loop</em> depois que a primeira instrução for retornada através do evento disparado!</p>
<p>Se a primeira instrução demorar 5 segundos para disparar o evento, a segunda instrução só será adicionada DEPOIS disso!</p>
<p>Agora pense no caso do exemplo acima, onde usamos vários <code>setInterval()</code>. Com o <code>setTimeout()</code> não teríamos o mesmo problema, pois cada <code>setTimeout()</code> garante que só uma instrução por <code>setTimeout()</code> será enviada ao <em>Event Loop</em>! É um ganho de performance absurdo! :D</p>
<p>Então, sempre que estiver na dúvida: </p>
<p><em><code>setInterval()</code> ou <code>setTimeout()</code> recursivo?</em></p>
<p>Vá pela segunda opção. É muito mais performática!</p>
<p>Até o próximo artigo!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/javascript-timers.jpg" alt=""></p>
<p>Você provavelmente já conhece os métodos <code>setInterval()</code> e <code>setTimeout()</code>. Mas você sabe a exatamente a diferença entre eles? Sabe como eles realmente funcionam? Vem descobrir :)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="temporizadores" scheme="http://blog.da2k.com.br/tags/temporizadores/"/>
    
      <category term="setInterval" scheme="http://blog.da2k.com.br/tags/setinterval/"/>
    
      <category term="setTimeout" scheme="http://blog.da2k.com.br/tags/settimeout/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GulpJS - entendendo o método watch()]]></title>
    <link href="http://blog.da2k.com.br/2015/01/28/gulpjs-entendendo-o-metodo-watch/"/>
    <id>http://blog.da2k.com.br/2015/01/28/gulpjs-entendendo-o-metodo-watch/</id>
    <published>2015-01-28T00:00:00.000Z</published>
    <updated>2015-01-28T01:01:10.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs-watch.jpg" alt=""></p>
<p>Apesar de simples, o método <code>watch()</code> do <strong>GulpJS</strong> tem algumas particularidades que o tornam bastante poderoso!</p>
<a id="more"></a>

<h2 id="Sintaxe">Sintaxe</h2>
<p>O método <code>watch()</code> tem duas possíveis sintaxes:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch( glob, [, opts], tasks );</div></pre></td></tr></table></figure>

<p>e:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch( glob, [, opts, cb]);</div></pre></td></tr></table></figure>

<p>Na primeira sintaxe, temos:</p>
<h3 id="glob">glob</h3>
<p>Tipo: <code>String</code> ou <code>Array</code></p>
<p>Um simples <em>glob</em> ou array de <em>globs</em>, que indicam quais arquivos devem ser assistidos, para saber quando foram alterados.</p>
<p>Exemplo de uso:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch( <span class="string">'src/js/**/*.js'</span> );</div></pre></td></tr></table></figure>

<p>Onde todos os arquivos <code>.js</code>, dentro do diretório <code>src/js</code> serão assistidos, recursivamente.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/recursion.gif" alt="Recursão"></p>
<p>Outro exemplo, com <code>Array</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch([ <span class="string">'src/js/**/*.js'</span>, <span class="string">'src/stylus/**/*.styl'</span> ]);</div></pre></td></tr></table></figure>

<p>Assiste todos os arquivos <code>.js</code> dentro de <code>src/js</code>, e todos os arquivos <code>.styl</code>, dentro de <code>src/stylus</code>, recursivamente.</p>
<h3 id="opts">opts</h3>
<p>Tipo: <code>Object</code></p>
<p>Opções, que são passadas para a lib <a href="https://github.com/shama/gaze" target="_blank" rel="external">Gaze</a>, que o <strong>GulpJS</strong> usa para fazer o <code>watch</code> dos arquivos. As opções que você pode usar estão disponíveis em <a href="https://github.com/shama/gaze#properties" target="_blank" rel="external">https://github.com/shama/gaze#properties</a></p>
<h3 id="tasks">tasks</h3>
<p>Tipo: <code>Array</code></p>
<p>Um <code>Array</code> de tasks criadas com <code>gulp.task()</code>, que devem ser executadas, quando houver mudanças em qualquer dos arquivos passados em <code>glob</code>.</p>
<p>Exemplo:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch( <span class="string">'src/js/**/*.js'</span>, [ <span class="string">'lint'</span>, <span class="string">'uglify'</span> ] );</div></pre></td></tr></table></figure>

<p>As tarefas <code>lint</code> e <code>uglify</code> serão executadas sempre que um arquivo <code>.js</code> em <code>src/js</code> for alterado.</p>
<p>Você ainda pode usar eventos do <strong>NodeJS</strong>, para ter uma função <code>callback</code> que execute assim que os arquivos forem alterados:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> watcher = gulp.watch( <span class="string">'src/js/**/*.js'</span>, [ <span class="string">'lint'</span>, <span class="string">'uglify'</span> ] );</div><div class="line">watcher.on( <span class="string">'change'</span>, <span class="function"><span class="keyword">function</span><span class="params">( event )</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'File'</span> + event.path + <span class="string">' was '</span> + event.type );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>O <code>callback</code> tem como parâmetro o objeto <code>event</code>, que possui as propriedades <code>path</code>, com o caminho do arquivo, e <code>type</code>, com o tipo de evento disparado.</p>
<p><code>event.type</code> pode ter 3 possíveis valores:</p>
<ul>
<li><code>changed</code>: quando um arquivo no caminho assistido é alterado;</li>
<li><code>deleted</code>: quando um arquivo é deletado do caminho assistido;</li>
<li><code>added</code>: Quando um novo arquivo é criado no caminho assistido.</li>
</ul>
<p>A segunda sintaxe difere apenas no último parâmetro. Você pode passar uma função de <code>callback</code> no lugar de chamar tasks para executar. Essa função tem o mesmo parâmetro <code>event</code> mostrado anteriormente, quando usado com o método <code>.on(&#39;change&#39;)</code>.</p>
<h2 id="Problemas_com_event-type_added_no_GulpJS">Problemas com <code>event.type added</code> no GulpJS</h2>
<p>O <strong>GulpJS</strong> executa corretamente os eventos <code>changed</code> e <code>deleted</code>, mas quando você adiciona um novo arquivo, em alguns momentos o <code>added</code> não é disparado.</p>
<p>Já havia conversado com alguns amigos sobre isso, e estava confiante que era algum bug no <strong>GulpJS</strong>. Fiz algumas pesquisas por cima, mas não cheguei a nenhuma solução. </p>
<p>O problema era que, ao adicionar um novo arquivo, eu sempre teria que parar o <code>watch()</code>, criar os novos arquivos e então executar novamente o <code>watch()</code>.</p>
<p>Mas hoje estava trocando uma ideia com o <a href="https://github.com/romuloctba" target="_blank" rel="external">Rômulo</a>, que estava passando pelo mesmo problema. Então, em meio a vários links dizendo que era “um problema mesmo”, “era bug do Gaze”, etc., ele encontrou um link onde dizia exatamente qual era o problema:</p>
<p>Havia uma <em>issue</em> aberta no Gaze, - que foi fechada, mas o problema continua - dizendo que isso acontecia quando se usava <code>./</code> no início do <code>glob</code>, no <code>watch()</code>. E o problema - e consequentemente, a solução - é exatamente esse!</p>
<p>Se você não colocar o <code>./</code> no início do <code>glob</code>, o <strong>GulpJS</strong> reconhece corretamente novos arquivos adicionados, sem precisar parar o <code>watch()</code>!</p>
<p>Uma grande descoberta :D</p>
<p>Bom, era isso que eu queria mostrar sobre o <code>watch()</code> hoje. O <strong>GulpJS</strong> nos dá muitas possibilidades de personalização, e você ainda vai cansar - ou não - de ler artigos legais sobre o Gulp aqui no blog :D</p>
<p>Até o próximo!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs-watch.jpg" alt=""></p>
<p>Apesar de simples, o método <code>watch()</code> do <strong>GulpJS</strong> tem algumas particularidades que o tornam bastante poderoso!</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GulpJS - deploy com Rsync]]></title>
    <link href="http://blog.da2k.com.br/2015/01/27/gulpjs-deploy-com-rsync/"/>
    <id>http://blog.da2k.com.br/2015/01/27/gulpjs-deploy-com-rsync/</id>
    <published>2015-01-27T00:00:00.000Z</published>
    <updated>2015-01-27T02:38:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulp-rsync.png" alt=""></p>
<p>Fazer deploy via FTP é um trabalho bem chato e custoso. Agora que já sabemos <a href="http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/" target="_blank" rel="external">como usar o <strong>GulpJS</strong></a>, que tal utilizá-lo para fazer deploy do nosso projeto via <strong>SSH</strong>, usando <strong>Rsync</strong>, e com apenas um simples comando, sincronizar nosso ambiente local com o ambiente de produção? Duvida? Vem ver! ;)</p>
<a id="more"></a>

<p>E pra começar, vou mostrar que pra usar o <strong>Gulp</strong>, você não precisa ficar preso a um plugin específico. No <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">repositório de plugins do <strong>GulpJS</strong></a>, se buscar por <strong>rsync</strong>, você vai encontrar o plugin <a href="https://www.npmjs.com/package/gulp-rsync/" target="_blank" rel="external">gulp-rsync</a>, mas não vamos utilizá-lo :P</p>
<p>Vamos usar um módulo do <strong>NodeJS</strong>, chamado <a href="https://github.com/jedrichards/rsyncwrapper" target="_blank" rel="external">rsyncwrapper</a>.</p>
<h2 id="Começando_do_começo">Começando do começo</h2>
<p>Vamos criar a estrutura do nosso projeto:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── build</div><div class="line">│   ├── // ... arquivos que irão para o servidor ...</div><div class="line">├── gulpfile.js</div><div class="line">└── package.json</div></pre></td></tr></table></figure>

<p>Como você já sabe, o <code>package.json</code> deve ter somente <code>{}</code> como conteúdo.</p>
<p>No diretório <code>build</code>, você vai colocar os arquivos que quer que sejam enviados ao seu servidor.</p>
<blockquote>
<p><strong>OBSERVAÇÃO IMPORTANTE:</strong> para fazer deploy com <strong>Rsync</strong>, você precisa ter acesso <strong>SSH</strong> liberado no seu servidor! (melhor avisar, antes que alguém comente dizendo que não funcionou :P)</p>
</blockquote>
<p>Sabendo disso, vamos instalar os módulos necessários: </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp rsyncwrapper</div></pre></td></tr></table></figure>

<p>Acho que isso eu não falei ainda, mas você pode instalar vários módulos de uma só vez :D<br>Nesse caso, estamos instalando o <code>gulp</code> e o <code>rsyncwrapper</code> ao mesmo tempo, e salvando no <code>package.json</code>.</p>
<p>E vamos configurar nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> rsync = <span class="built_in">require</span>( <span class="string">'rsyncwrapper'</span> ).rsync;</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  rsync({</div><div class="line">    src: <span class="string">'./build/'</span>,</div><div class="line">    dest: <span class="string">'user@domain.com:/path/on/your/server'</span>,</div><div class="line">    recursive: <span class="literal">true</span></div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Essa é a configuração mais simples para usar o <code>rsync</code>. Adicionamos ao nosso <code>gulpfile.js</code> o <code>gulp</code> e o <code>rsyncwrapper</code>, chamando o método <code>rsync</code>, mas sem invocá-lo.</p>
<p>Dentro da <code>task</code>, passamos um objeto como parâmetro da função <code>rsync</code>, com duas propriedades:</p>
<ul>
<li><strong>src</strong>: Caminho dos arquivos que serão “deployados” para o servidor;</li>
<li><strong>dest</strong>: Caminho NO SERVIDOR que receberá os arquivos.</li>
<li><strong>recursive</strong>: Passa recursivamente pelos diretórios em <code>src</code> para enviar os arquivos.</li>
</ul>
<p>O formato para o <code>dest</code> é o seguinte:</p>
<ul>
<li>nome do seu usuário;</li>
<li>arroba (<code>@</code>);</li>
<li>seu domínio;</li>
<li>dois-pontos;</li>
<li>caminho no servidor que receberá os arquivos.</li>
</ul>
<p>Listei para ficar fácil você saber o que precisa ser mantido, e o que você precisa editar. Não sei se precisava, mas enfim…</p>
<p>Fazendo isso, pode rodar o comando <code>gulp</code> no terminal e conferir os arquivos no seu servidor!</p>
<p><em>Mas não tenho nenhum feedback visual! Como vou saber quando terminou de enviar os arquivos?</em></p>
<p>O <strong>rsyncwrapper</strong> tem algumas propriedades que podemos utilizar para facilitar nossa vida. Vamos a elas. Altere seu <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> rsync = <span class="built_in">require</span>( <span class="string">'rsyncwrapper'</span> ).rsync;</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  rsync({</div><div class="line">    src: <span class="string">'./build/'</span>,</div><div class="line">    dest: <span class="string">'user@domain.com:/path/on/your/server'</span>,</div><div class="line">    recursive: <span class="literal">true</span>,</div><div class="line">    args: [ <span class="string">'--verbose'</span> ]</div><div class="line">  }, <span class="function"><span class="keyword">function</span><span class="params">( error, stdout, stderr, cmd )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( stdout, <span class="string">'END!'</span> );</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Passamos no primeiro parâmetro um objeto para a função <code>rsync</code>, com as propriedades <code>src</code> e <code>dest</code>. Como segundo parâmetro, podemos passar uma função de callback que será executada assim que todos os arquivos forem enviados!</p>
<p>Adicionamos também um parâmetro <code>args</code>, que receberá argumentos, como se você estivesse usando o <strong>rsync</strong> na linha de comando xD</p>
<p>Podemos passar para essa propriedade, um array de argumentos. Para conhecer todos os argumentos disponíveis para o <strong>rsync</strong>, visite <a href="https://rsync.samba.org/ftp/rsync/rsync.html" target="_blank" rel="external">https://rsync.samba.org/ftp/rsync/rsync.html</a></p>
<p><em>Tá ficando bom! Mas eu tenho muitos arquivos! Eu posso acompanhar um a um, enquanto estiverem subindo?</em></p>
<p>Sim! O <strong>rsyncwrapper</strong> tem um método <code>onStdout</code>, que recebe um parâmetro com o Buffer do arquivo que está sendo enviado. Vamos ver como utilizá-lo (vou colocar só a função <code>rsync</code> agora):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">rsync({</div><div class="line">  src: <span class="string">'./build/'</span>,</div><div class="line">  dest: <span class="string">'user@domain.com:/path/on/your/server'</span>,</div><div class="line">  recursive: <span class="literal">true</span>,</div><div class="line">  args: [ <span class="string">'--verbose'</span> ],</div><div class="line">  onStdout: <span class="function"><span class="keyword">function</span><span class="params">( data )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( data.toString() );</div><div class="line">  }</div><div class="line">}, <span class="function"><span class="keyword">function</span><span class="params">( error, stdout, stderr, cmd )</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'END!'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Usamos a forma mais bruta para mostrar o nome do arquivo: convertê-lo para <code>String</code>, usando o <code>.toString()</code>. Agora, a cada arquivo que subir, será mostrado o nome no terminal, para que você possa acompanhar o progresso :D</p>
<p>Removi também do função de callback o <code>stdout</code>, para não mostrar duplicado o retorno.</p>
<h2 id="Extras">Extras</h2>
<p>Ainda podemos deixar melhor :D</p>
<p>Temos uma propriedade <code>exclude</code>, que recebe um array de arquivos que você NÃO quer enviar. Exemplo: você quer ignorar um <code>.htaccess</code>, ou qualquer outro arquivo? Adicione-o ao array em <code>exclude</code>. Ficaria algo como:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exclude: [ <span class="string">'.htaccess'</span>, <span class="string">'.editorconfig'</span>, <span class="string">'node_modules'</span> ]</div></pre></td></tr></table></figure>

<p>Você pode usar também as propriedades <code>delete: true</code> ou <code>deleteAll: true</code>.</p>
<p><code>deleteAll</code> vai sincronizar os arquivos em <code>src</code> com o <code>dest</code>. Se você remover algo local, ele vai remover do servidor também. Bruto assim.</p>
<p><code>delete</code> também sincroniza, porém ele ignora os arquivos em <code>exclude</code>. Se você tem, por exemplo, localmente um diretório <code>node_modules</code> que não quer enviar para o servidor, mas tem um diretório com o mesmo nome no servidor, mas não quer deletá-lo, usando o <code>delete</code> esse diretório se manterá lá. Caso contrário, use o <code>deleteAll</code>.</p>
<blockquote>
<p>Muito cuidado com essas opções! Você pode perder seus dados importantes se não configurar corretamente! Faça testes antes e verifique se está tudo ok antes de continuar!</p>
</blockquote>
<p>Podemos também setar um formato de comparação, usando <code>compareMode: &#39;checksum&#39;</code> ou <code>compareMode: &#39;sizeOnly</code>. <code>checksum</code> compara por um checksum de 128bit. <code>sizeOnly</code> só verifica se o tamanho do arquivo mudou. Recomendo que use o <code>checksum</code>, pois é mais preciso.</p>
<p>Adicionando algumas dessas opções, nosso <code>gulpfile.js</code> ficaria assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> rsync = <span class="built_in">require</span>( <span class="string">'rsyncwrapper'</span> ).rsync;</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  rsync({</div><div class="line">    src: <span class="string">'./build/'</span>,</div><div class="line">    dest: <span class="string">'user@domain.com:/path/on/your/server'</span>,</div><div class="line">    recursive: <span class="literal">true</span>,</div><div class="line">    args: [ <span class="string">'--verbose'</span> ],</div><div class="line">    deleteAll: <span class="literal">true</span>,</div><div class="line">    compareMode: <span class="string">'checksum'</span>,</div><div class="line">    onStdout: <span class="function"><span class="keyword">function</span><span class="params">( data )</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log( data.toString() );</div><div class="line">    }</div><div class="line">  }, <span class="function"><span class="keyword">function</span><span class="params">( error, stdout, stderr, cmd )</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'END!'</span> );</div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Para ver todas as opções do <strong>rsyncwrapper</strong>, acesse: <a href="https://github.com/jedrichards/rsyncwrapper" target="_blank" rel="external">https://github.com/jedrichards/rsyncwrapper</a></p>
<p>Por hoje é isso! Mas ainda temos muita coisa de Gulp para mostrar! Continue acompanhando :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulp-rsync.png" alt=""></p>
<p>Fazer deploy via FTP é um trabalho bem chato e custoso. Agora que já sabemos <a href="http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/" target="_blank" rel="external">como usar o <strong>GulpJS</strong></a>, que tal utilizá-lo para fazer deploy do nosso projeto via <strong>SSH</strong>, usando <strong>Rsync</strong>, e com apenas um simples comando, sincronizar nosso ambiente local com o ambiente de produção? Duvida? Vem ver! ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="deploy" scheme="http://blog.da2k.com.br/tags/deploy/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="ssh" scheme="http://blog.da2k.com.br/tags/ssh/"/>
    
      <category term="rsync" scheme="http://blog.da2k.com.br/tags/rsync/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Imagens]]></title>
    <link href="http://blog.da2k.com.br/2015/01/26/segredos-do-github-imagens/"/>
    <id>http://blog.da2k.com.br/2015/01/26/segredos-do-github-imagens/</id>
    <published>2015-01-26T00:00:00.000Z</published>
    <updated>2015-01-25T11:03:17.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-images.png" alt="Segredos do Github - Imagens"></p>
<p>Imagens? Isso é segredo? ;)</p>
<a id="more"></a>

<h2 id="Emojis">Emojis</h2>
<p>Nada como alegrar aquela mensagem de commit, o comentário de uma <em>issue</em> ou um <em>pull request</em> com os famosos <strong>Emojis</strong>! Para usar, basta você colocar o nome do emoji entre dois-pontos: <code>:emoji-name:</code>.</p>
<p>E sim, isso funciona nas mensagens de commit! Experimente! </p>
<p>Para saber quais são os Emojis disponíveis, acesse <a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">http://www.emoji-cheat-sheet.com/</a> ou <a href="https://github.com/scotch-io/All-Github-Emoji-Icons" target="_blank" rel="external">https://github.com/scotch-io/All-Github-Emoji-Icons</a> :)</p>
<p>O <em>Top 5O</em> dos Emojis são:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Emoji</th>
<th style="text-align:center">Código</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/shipit.png" alt=""></td>
<td style="text-align:center">:shipit:</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/sparkles.png" alt=""></td>
<td style="text-align:center">:sparkles:</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/-1.png" alt=""></td>
<td style="text-align:center">:-1:</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/+1.png" alt=""></td>
<td style="text-align:center">:+1:</td>
</tr>
<tr>
<td style="text-align:center"><img src="https://assets-cdn.github.com/images/icons/emoji/clap.png" alt=""></td>
<td style="text-align:center">:clap:</td>
</tr>
</tbody>
</table>
<h2 id="Imagens_/_GIFs">Imagens / GIFs</h2>
<p>Você pode usar qualquer imagem ou gif em qualquer lugar que aceite markdown no Github: <em>issues</em>, <em>pull requests</em>, arquivos Markdown. Se quiser pegar a imagem de algum repositório, pode usar o seguinte formato:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">Alt Text</span>](<span class="link_url">https://github.com/{user}/{repo}/raw/{branch}/path/to/image.gif</span>)</div></pre></td></tr></table></figure>

<p>Trocando as informações acima pelas corretas da sua imagem :)</p>
<p><img src="https://camo.githubusercontent.com/fca1eaa46baa3573f6e2d993f6fe1f95a6329ae9/687474703a2f2f7777772e73686561776f6e672e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031332f30382f6b656570686174696e2e676966" alt=""></p>
<h2 id="Upload_de_imagens">Upload de imagens</h2>
<p>Quando abrir uma <em>issue</em> ou <em>pull request</em>, você pode adicionar uma local, de 3 formas:</p>
<ul>
<li>Arrastando a imagem para área onde você digita o texto da <em>issue</em> / <em>pull request</em>;</li>
<li>Colando a imagem da sua área de transferência (<code>Ctrl + C</code> ou <code>Cmd + C</code>);</li>
</ul>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-upload.png" alt="Upload de imagens no Github"></p>
<ul>
<li>Ou ainda clicando no link apresentado:</li>
</ul>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-upload-click-link.png" alt="Upload de imagens no Github clicando no link"></p>
<p>E era isso!</p>
<p>Até a próxima! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-secrets-images.png" alt="Segredos do Github - Imagens"></p>
<p>Imagens? Isso é segredo? ;)</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Segredos do Github - Shortcuts]]></title>
    <link href="http://blog.da2k.com.br/2015/01/25/segredos-do-github-shortcuts/"/>
    <id>http://blog.da2k.com.br/2015/01/25/segredos-do-github-shortcuts/</id>
    <published>2015-01-25T00:00:00.000Z</published>
    <updated>2015-01-25T11:03:17.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-shortcuts.jpg" alt="Github Shortcuts"></p>
<p>Atalhos sempre agilizam o trabalho com qualquer ferramenta. Hoje vou mostrar alguns atalhos interessantes do Github :D</p>
<a id="more"></a>

<h2 id="Buscando_arquivos">Buscando arquivos</h2>
<p>Quando você está visualizando um repositório, você pode pressionar <code>t</code> e começar a digitar um nome de arquivo que contenha nesse diretório, que o arquivo será buscado recursivamente em todos os diretórios:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-search.png" alt="Github search"></p>
<p>Usando as setas <code>↑</code> e <code>↓</code>, você navega pelos arquivos encontrados. E pressionando <code>enter</code>, você abre o arquivo :)<br>Esse comando funciona na listagem de arquivos de um repositório.</p>
<h2 id="Branch_selector">Branch selector</h2>
<p>Se você trabalha com várias <em>branchs</em>, pode usar o <code>w</code>, na tela principal do repositório, para abrir o <em>Branch Selector</em>. O campo de busca de branchs receberá foco. Pressionando <code>tab</code>, você navega nas abas <em>branches</em> e <em>tags</em>. Pressionando <code>enter</code> em cima da aba, ela é selecionada:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/branch-selector.png" alt="Branch selector"></p>
<h2 id="Command_bar">Command bar</h2>
<p>Pressionando <code>s</code>, o barra de busca recebe foco para que você possa encontrar conteúdos dentro do Github:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/command-bar.png" alt="Command bar"></p>
<p>Mais dicas interessantes sobre a <em>Command bar</em> você encontra em <a href="https://help.github.com/articles/searching-github/" target="_blank" rel="external">https://help.github.com/articles/searching-github/</a></p>
<h2 id="Labels">Labels</h2>
<p>Na tela de  <em>issues</em>, pressionando <code>l</code>, você pode filtrar as <em>issues</em> por labels. Pode navegar por elas usando as setas <code>↑</code> e <code>↓</code> e pressionar <code>enter</code>para selecionar:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/labels.png" alt="Labels"></p>
<h2 id="Congelar_uma_alteração_de_arquivo">Congelar uma alteração de arquivo</h2>
<p>Ao visualizar um arquivo, se você pressionar <code>y</code>, a URL irá mudar para uma que “congela” como o arquivo está atualmente. Se esse arquivo mudar, você pode usar essa URL para ver exatamente como estava o arquivo antes das alterações :)</p>
<h2 id="Todos_os_atalhos">Todos os atalhos</h2>
<p>E por último, mas não menos importante, se você pressionar <code>?</code> em qualquer lugar, será mostrada a tela com todos os atalhos disponíveis no Github :D</p>
<p>Inicialmente são mostrados somente os mais utilizados. Mas clicando no link <strong>Show all</strong>, você pode ver todos os atalhos! (<em>Mr. Óbvio ataca novamente!</em> :P)</p>
<p>Até a próxima!</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/github-shortcuts.jpg" alt="Github Shortcuts"></p>
<p>Atalhos sempre agilizam o trabalho com qualquer ferramenta. Hoje vou mostrar alguns atalhos interessantes do Github :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="segredos do github" scheme="http://blog.da2k.com.br/tags/segredos-do-github/"/>
    
      <category term="github" scheme="http://blog.da2k.com.br/categories/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GulpJS - Um gole de otimização no seu workflow]]></title>
    <link href="http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/"/>
    <id>http://blog.da2k.com.br/2015/01/24/gulpjs-um-gole-de-otimizacao-no-seu-workflow/</id>
    <published>2015-01-24T00:00:00.000Z</published>
    <updated>2015-01-24T20:23:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs.png" alt=""></p>
<p>Em 2014 <a href="https://github.com/fdaciuk/talks" target="_blank" rel="external">palestrei em alguns eventos</a> evangelizando a galera sobre o uso do <a href="http://gulpjs.com/" target="_blank" rel="external">GulpJS</a>. Hoje resolvi transformar essa palestra em post, para facilitar futuras consultas e poder fazer outros posts falando mais a fundo sobre GulpJS e seus plugins!</p>
<p>Mas precisamos começar de algum lugar! Vem comigo? :D</p>
<a id="more"></a>

<h2 id="O_que_é_o_GulpJS?">O que é o GulpJS?</h2>
<p>O <strong>GulpJS</strong> é um <em>task runner</em>, assim como o <a href="http://gruntjs.com/" target="_blank" rel="external"><strong>Grunt</strong></a>. </p>
<p><em>E o que é um task runner</em>?</p>
<p><em>Task Runner</em> é o nome dado à uma ferramenta que centraliza e executa alguma tarefa repetitiva automaticamente. Eles existem para facilitar o seu dia-a-dia como desenvolvedor.</p>
<p>Elas são sinônimo de <strong>performance</strong>.</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/performance.gif" alt="Performance"></p>
<p>A ideia é dar performance ao desenvolvedor na hora de escrever códigos, e também performance ao entregar o projeto ao cliente final, deixando-o mais leve e rápido.</p>
<p>Um <em>task runner</em> pode executar tarefas rotineiras como <strong>minificação de arquivos</strong>, <strong>compilação de CSS com pré-processadores</strong>, <strong>minificação de imagens</strong>, <strong>deploy</strong>, etc., tudo isso de forma automatizada. <em>Cool, hum?</em> ;)</p>
<p>Para facilitar o entendimento, vou mostrar alguns exemplos de ferramentas que você precisa usar diariamente para executar essas tarefas:</p>
<h3 id="Javascript_Compressor">Javascript Compressor</h3>
<p>Após escrever seu JS, você cola seu código <a href="http://www.minifyjs.com/javascript-compressor/" target="_blank" rel="external">nessa ferramenta</a>, e ela te devolve o código todo minificado, pronto para entregar em produção!</p>
<h3 id="Lint_de_JS">Lint de JS</h3>
<p>O <a href="http://jshint.com/" target="_blank" rel="external"><strong>JSHint</strong></a> busca no seu código erros comuns, garantindo que você esteja usando as melhores práticas nas escrita do seu Javascript.</p>
<p>Existe também o <a href="http://www.jslint.com/" target="_blank" rel="external"><strong>JSLint</strong></a>, criado por <a href="">Douglas Crockford</a>. É uma ferramenta que tem um pouco mais de restrições que o JSHint, - JSHint é mais “maleável” - e é recomendado para quem gosta de <a href="https://github.com/twbs/bootstrap/issues/3057#issuecomment-5135512" target="_blank" rel="external">“desafios maiores”</a> :P</p>
<h3 id="Testes_(TDD/BDD/E2E)">Testes (TDD/BDD/E2E)</h3>
<p>Testar seu código não pode ser uma tarefa difícil, muito menos lenta, senão você acaba deixando eles de lado. Algumas ferramentas facilitam o trabalho, como o <a href="http://mochajs.org/" target="_blank" rel="external">Mocha</a>, <a href="http://shouldjs.github.io/" target="_blank" rel="external">Should</a>, <a href="http://jasmine.github.io/" target="_blank" rel="external">Jasmine</a>, <a href="http://qunitjs.com/" target="_blank" rel="external">QUnit</a>, <a href="http://chaijs.com/" target="_blank" rel="external">Chai</a>, <a href="http://sinonjs.org/" target="_blank" rel="external">Sinon</a>, etc.</p>
<h3 id="Pré-processadores">Pré-processadores</h3>
<p>Com eles você “programa” dentro do CSS. Pode usar estruturas condicionais, funções, variáveis, includes, mixins, e ainda diminui muito a repetição de código. Os mais conhecidos são: <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>, <a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a> e <a href="http://lesscss.org/" target="_blank" rel="external">LESS</a>.</p>
<h3 id="Compressão_de_imagens">Compressão de imagens</h3>
<p>Ao exportar suas imagens, elas precisam ser tão leves quanto possível. Existem vários softwares que fazem esse trabalho, diminuindo o tamanho da imagem, mas mantendo a mesma qualidade. Uma ferramenta legal (e online) para fazer isso é o <a href="http://compressor.io/" target="_blank" rel="external">Compressor.io</a>.</p>
<h3 id="Sistema_de_controle_de_versão">Sistema de controle de versão</h3>
<p><a href="http://git-scm.com/" target="_blank" rel="external">Git</a>, <a href="http://mercurial.selenic.com/" target="_blank" rel="external">Mercurial</a>, <a href="https://subversion.apache.org/" target="_blank" rel="external">SVN</a> são sistemas que ajudam a controlar a versão do seu projeto. Você pode desenvolver por partes e ter o controle de cada feature implementada no seu sistema.</p>
<p>Então você pensa: <em>Nossa, eu posso usar milhões de ferramentas para otimizar meu projeto!</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/crazy-bird.gif" alt="Passarinho locão"></p>
<p>Mas ao mesmo tempo, você percebe que é muita coisa! Muita ferramenta para lembrar de usar, muito site para favoritar, e desiste de tudo isso! <em>Vou entregar o projeto assim mesmo! Não vou conseguir lembrar de usar todas essas ferramentas!</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/panda.gif" alt="Panda derrubando carrinho"></p>
<h3 id="E_se_pudéssemos_automatizar_esse_processo?">E se pudéssemos automatizar esse processo?</h3>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/blocks.gif" alt="Automatização"></p>
<p>Uma vez vi uma palestra do <a href="http://addyosmani.com/blog/" target="_blank" rel="external">Addy Osmani</a>, onde ele disse que:</p>
<blockquote>
<p>Automation isn’t about being lazy, It’s about being efficient.</p>
</blockquote>
<p>Mas como é possível ser eficiente tendo que lembrar de milhões de coisas pra usar? Não dá pra centralizar tudo isso em uma única ferramenta? Será que é possível?</p>
<p><strong>SIM!</strong> Nós podemos fazer isso usando <a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a>!</p>
<h2 id="Instalando_o_NodeJS">Instalando o NodeJS</h2>
<p>A instalação do NodeJS é bastante simples: acesse o site do <a href="http://nodejs.org/download/" target="_blank" rel="external">NodeJS</a>, baixe a versão para o seu sistema operacional e siga as instruções.</p>
<p>Fazendo isso, você terá no seu terminal o comando <code>node</code> disponível!</p>
<p>O Node também traz junto com ele o gerenciador de pacotes NPM. Logo, você também já deve ter o comando <code>npm</code> disponível no seu terminal para gerenciar os pacotes do Node! :D</p>
<p>Para quem não sabe, um gerenciador de pacotes é o cara que vai centralizar os pacotes de software disponíveis para a ferramenta em questão. </p>
<p>É como os gerenciadores de pacote do seus sistema operacional:</p>
<p>No Linux, nós temos o <code>apt-get</code> nos linux <em>Debian Like</em>, <code>yum</code> do Fedora;<br>No Mac, <code>brew</code> ou <code>ports</code>;<br>No Windows, bem… no Windows não tem! Mas se tivesse, acho que seria algo assim:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/windows-package-manager.gif" alt="Gerenciador de pacotes no Windows"></p>
<p>:P</p>
<p>Mas zueiras à parte, vamos ver como utilizar o NPM:</p>
<h2 id="Instalação_de_pacotes">Instalação de pacotes</h2>
<p>Para instalar algum módulo NodeJS com o NPM, você pode usar o comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install &lt;module name&gt;</div></pre></td></tr></table></figure>

<p>Ou ainda:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i &lt;module name&gt;</div></pre></td></tr></table></figure>

<p>O <code>i</code> é apenas um <em>alias</em> para o <code>install</code>, ou seja, eles fazem a mesma coisa.</p>
<p>E <code>&lt;module name&gt;</code> é o nome do seu módulo. Você pode encontrar os <a href="https://www.npmjs.com/" target="_blank" rel="external">módulos disponíveis no NPM aqui</a>.</p>
<h2 id="Instalando_o_GulpJS">Instalando o GulpJS</h2>
<p>Depois do Node e NPM instalados e funcionando, precisamos começar instalando o GulpJS:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g gulp</div></pre></td></tr></table></figure>

<p>Com esse comando, instalamos o GulpJS globalmente (repare no <code>-g</code> do comando acima). Quando instalamos um módulo do Node globalmente, temos disponíveis no nosso terminal o comando que geralmente é o mesmo nome do módulo. Nesse caso, temos o comando <code>gulp</code> disponível :)</p>
<p>Vamos ver um exemplo na prática de como usá-lo. Crie a seguinte estrutura de arquivos:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── gulpfile.js</div><div class="line">└── package.json</div></pre></td></tr></table></figure>

<p>No <code>package.json</code> ficarão todas as informações do nosso módulo. Podemos criá-lo manualmente, ou através do comando:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>

<p>Ao utilizar o comando, serão feitas algumas perguntas relacionadas ao projeto. Vá dando <code>enter</code> para ignorar se não quiser preencher. Essas informações não serão relevantes para o nosso caso, usando um <em>task runner</em>.</p>
<p>Se não quiser usar o <code>npm init</code>, crie manualmente o <code>package.json</code>, com uma estrutura básica para um JSON, para que possamos começar a utilizá-lo. No arquivo <code>package.json</code>, adicione:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">{}</div></pre></td></tr></table></figure>

<p>É tudo o que precisamos para começar no <code>package.json</code>. Vamos agora instalar nossas dependências.</p>
<h2 id="Dependências">Dependências</h2>
<p>Para que possamos usar o Gulp no nosso projeto, precisamos instalar algumas dependências. Uma delas é o próprio Gulp, mas dessa vez, instalado de forma local:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp</div></pre></td></tr></table></figure>

<p>Repare na flag <code>--save-dev</code>. Na primeira vez, instalamos o Gulp globalmente (<code>-g</code>) para termos o comando <code>gulp</code> no terminal. Agora, instalamos ele localmente, em modo de desenvolvimento (<code>--save-dev</code>), para utilizar os métodos dele dentro do nosso <code>gulpfile.js</code>.</p>
<p>Usando essa flag, a dependência é salva automaticamente no nosso <code>package.json</code>. O porquê disso explicarei mais à frente.</p>
<p>Agora nosso arquivo <code>package.json</code> está assim:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">devDependencies</span>": <span class="value">{</span></div><div class="line">    "<span class="attribute">gulp</span>": <span class="value"><span class="string">"^3.8.10"</span></span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Todas as dependências que precisaremos para utilizar enquanto estivermos desenvolvendo devem ser instaladas com a flag <code>--save-dev</code>, que o NPM automaticamente vai salvar dentro dessa diretiva <code>devDependencies</code>.</p>
<p>Perceba também que foi criado um diretório <code>node_modules</code> na raiz do nosso projeto. Nesse diretório temos a seguinte estrutura:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">└── /node_modules</div><div class="line">    └── /gulp</div><div class="line">        └── // <span class="keyword">...</span> arquivos do gulp <span class="keyword">...</span></div></pre></td></tr></table></figure>

<p>Ou seja, quando instalamos algum módulo com o comando <code>npm install</code> ou <code>npm i</code>, o módulo fica no diretório <code>node_modules</code> (salvo quando instalamos globalmente).</p>
<p>Agora, no <code>gulpfile.js</code>, adicione:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Hello Gulp!'</span> );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Aqui é puro Javascript (no servidor, com NodeJS). Criamos uma variável <code>gulp</code>, que receberá o módulo <code>gulp</code>, que foi instalado localmente. Se você passa como parâmetro da função <code>require</code> somente uma string, sem definir caminho de arquivos (como <code>./</code>, <code>/</code> ou <code>../</code>, por exemplo), o NodeJS procura essa dependência dentro da pasta <code>node_modules</code>.</p>
<p>O <code>.js</code> no final do arquivo é opcional. E se vamos fazer <code>require</code> de um arquivo chamado <code>index.js</code>, o nome desse arquivo também é opcional.</p>
<p>Sabendo disso, podemos concluir que o <code>var gulp = require( &#39;gulp&#39; );</code> na verdade poderia ter sido chamado dessa forma:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'./node_modules/gulp/index.js'</span> );</div></pre></td></tr></table></figure>

<p>O método <code>task()</code> do objeto <code>gulp</code> cria uma <em>task</em> que será executada. Como primeiro parâmetro, passamos o nome da task. Depois, uma função de callback que será executada quando a task for chamada.</p>
<p>Para chamar essa task, vamos executar no terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp default</div></pre></td></tr></table></figure>

<p>Ou somente:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure>

<p>Rodando o comando <code>gulp</code> sem nenhum parâmetro, ele deduz que você tem uma task chamada <code>default</code>, que é a task padrão do Gulp. Ou seja: para a task <code>default</code>, o nome da task, na chamada pelo terminal, é opcional.</p>
<p>Executando esse comando, temos o seguinte resultado:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gulp</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Using gulpfile /var/www/<span class="number">01</span>-testes/test-gulp/gulpfile.js</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Starting <span class="string">'default'</span>...</div><div class="line">Hello Gulp!</div><div class="line">[<span class="number">16</span>:<span class="number">20</span>:<span class="number">50</span>] Finished <span class="string">'default'</span> after <span class="number">476</span> μs</div></pre></td></tr></table></figure>

<p>Na linha <code>2</code>, ele mostra que encontrou o arquivo <code>gulpfile.js</code> e mostra o caminho do arquivo;<br>Na linha <code>3</code>, a task que está sendo executada;<br>Na linha <code>4</code>, printa a mensagem que colocamos em <code>console.log()</code>;<br>Na linha <code>5</code> é mostrado o tempo que demorou para finalizar a task.</p>
<p>Reparou no tempo? Sabe o que significa o símbolo <code>μs</code>? MICROSSEGUNDOS!</p>
<p>Isso mesmo: microssegundos! A task roda muito rápido mesmo.</p>
<p><em>Mas essa task não faz nada.. só executa um console.log() ¬¬</em></p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/nothing.gif" alt="Não faz nada"></p>
<p>Concordo! Mas você verá que, quando estivermos executando tarefas de verdade, o tempo ainda assim será muito baixo! :D</p>
<p>Agora que já aprendemos como criar uma task no Gulp, que tal fazer algo realmente útil?</p>
<h2 id="Minificar_CSS">Minificar CSS</h2>
<p>Vamos ver como podemos automatizar a minificação dos nossos arquivos CSS. Primeiro vamos instalar o módulo de minificação:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-minify-css</div></pre></td></tr></table></figure>

<p>Agora vamos adicionar o módulo ao nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/css/**/*.css'</span> )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p><em>Perae, tem muita coisa acontecendo aqui! Como vou saber tudo isso?</em></p>
<p>Calma gafanhoto, vou explicar linha por linha:</p>
<p>Já sabemos como funciona o <code>gulp.task()</code>.<br>A task vai definir uma ação que queremos fazer. A nossa ação será <strong>minificar o CSS</strong>.</p>
<p>Para isso, precisamos ter um CSS para minificar. Crie um diretório <code>src</code>, e dentro dele um diretório <code>css</code>. Esse será o nosso CSS fonte, onde iremos escrever nosso CSS todo organizado, com espaços necessários para fazer leitura, etc.</p>
<p>Esse CSS será minificado, e a versão minificada ficará no diretório <code>public/css</code> (não precisa criar esse diretório).</p>
<p>Agora, crie um arquivo chamado <code>style.css</code> no diretório <code>src/css</code> e coloque o seguinte código:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> purple</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fc0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">4rem</span> fantasy</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Voltando ao <code>gulpfile.js</code>: com o <code>gulp.src()</code>, você passa o source do CSS, ou seja, os arquivos que você está editando. Você pode passar um array de arquivos ou então utilizar o <em>glob pattern</em> para percorrer recursivamente o diretório <code>./src/css</code> em busca de todos os arquivos <code>.css</code>.</p>
<p>Usar o <code>.pipe()</code>, é o mesmo que você usar o <code>|</code> (pipe) na linha de comando do Unix: a saída do primeiro comando é a entrada do próximo.</p>
<p>Então, pegamos os arquivos <code>.css</code> que estão em <code>./src/css</code>, e mandamos executar o <code>minifycss()</code> em todos eles. A saída será todos os arquivos minificados. Mas eles ainda estão em memória, e precisam ser salvos em algum lugar.</p>
<p>É aí que vamos passá-los novamente para frente com o <code>.pipe()</code> para o comando <code>gulp.dest()</code>, que vai definir o caminho de destino dos nossos arquivos minificados.</p>
<p>Estamos dizendo ao Gulp que queremos que esses arquivos sejam salvos (fisicamente) no diretório <code>./public/css</code>.</p>
<p>Ao executar novamente o comando <code>gulp</code> no terminal, olhe agora como ficou nossa estrutura de diretórios:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── gulpfile.js</div><div class="line">├── /node_modules</div><div class="line">│   └── // ... dependências ...</div><div class="line">├── package.json</div><div class="line">├── /public</div><div class="line">│   └── /css</div><div class="line">│       └── style.css</div><div class="line">└── /src</div><div class="line">    └── /css</div><div class="line">        └── style.css</div></pre></td></tr></table></figure>

<p>Não precisamos criar o diretório <code>public</code>, pois ele foi automaticamente criado pelo Node.</p>
<p>E o nosso arquivo <code>style.css</code>, no diretório gerado <code>public</code>, ficou assim:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value">purple</span></span>;<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#fc0</span></span></span>;<span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">4rem</span> fantasy</span></span></span>}</div></pre></td></tr></table></figure>

<p>Coisa linda, não? Sem precisar lembrar de passar em nenhum <em>minify online</em> xD</p>
<p>E olha o tempo que foi executado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ gulp</div><div class="line">[18:49:35] Using gulpfile /var/www/01-testes/test-gulp/gulpfile.js</div><div class="line">[18:49:35] Starting 'default'...</div><div class="line">[18:49:35] Finished 'default' after 16 ms</div></pre></td></tr></table></figure>

<p>O Gulp sempre vai executar muito rápido, independente da quantidade de tasks que você tiver, pois ele usa <a href="https://github.com/vitorbritto/art-of-node/blob/master/readme.pt-br.md#streams" target="_blank" rel="external"><em>strems</em></a> e trabalha com alta concorrência, ou seja, ele executa muitas coisas em paralelo, deixando tudo muito mais rápido.</p>
<h2 id="Usando_pré-processadores">Usando pré-processadores</h2>
<p>Para usar pré-processadores com Gulp também é bastante simples. Vou mostrar como utilizá-lo com o <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>.</p>
<p>Primeiro, precisamos instalar o módulo do <strong>Stylus</strong>. Execute no terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-stylus</div></pre></td></tr></table></figure>

<p>Vamos tirar o <code>minifycss</code> por enquanto, para facilitar a visualização do nosso exemplo. No seu <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Agora nós buscamos todos os arquivos em <code>./src/stylus</code>, com a extensão <code>.styl</code>. Vamos criar esse diretório, e um arquivo chamado <code>style.styl</code>, com o seguinte conteúdo:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span></div><div class="line">  <span class="attribute">background</span> purple</div><div class="line">  <span class="attribute">color</span> <span class="id">#fc0</span></div><div class="line">  <span class="attribute">font</span> 4rem fantasy</div></pre></td></tr></table></figure>

<p>No <strong>Stylus</strong>, não precisamos de <em>brackets</em> (<code>{}</code>), nem dois-pontos (<code>:</code>) para separar as propriedades. E ele funciona com base na indentação.</p>
<p>Mas não é obrigatório remover. Você pode escrever no formato do CSS também, sem problemas.</p>
<p>Agora, execute novamente o <code>gulp</code> no terminal. Você terá no diretório <code>public/css</code> um arquivo <code>.css</code> compilado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#800080</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fc0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">4rem</span> fantasy</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>Normalmente, os módulos retornam funções, que podem receber parâmetros para configurar o que eles devem fazer. Nesse caso do Stylus, nós só passamos a função <code>stylus()</code>, para que o arquivo <code>.styl</code> transforme corretamente o código em CSS válido. Mas e se quisermos minificar? </p>
<p>Temos duas formas de fazer isso: a primeira é passando parâmetros na função <code>stylus()</code>. No <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line"></div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus({ compress: <span class="literal">true</span> }) )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Passamos como objeto da função <code>stylus()</code> o parâmetro <code>compress: true</code>. Executando o <code>gulp</code> novamente no terminal, agora temos nosso CSS em <code>public/css</code> minificado:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{<span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#800080</span></span></span>;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#fc0</span></span></span>;<span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">4rem</span> fantasy</span></span></span>}</div></pre></td></tr></table></figure>

<p>A outra forma de minificar, é usando o <code>minifycss</code> (que já vimos no primeiro exemplo), junto com o Stylus. Ficaria assim o seu <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>É interessante lembrar que a ordem que você coloca as coisas interfere no resultado final. Porque colocamos o <code>minifycss()</code> depois do <code>stylus()</code>?</p>
<p>Por que a função <code>stylus()</code> vai retornar o CSS gerado. Se colocarmos o <code>minifycss()</code> antes dele, o CSS ainda não foi gerado, e o arquivo final não será minificado. Muita atenção com isso, ok? ;)</p>
<p><em>Mas qual seria a vantagem de utilizar o <code>minifycss()</code> junto com o <code>stylus()</code>, sendo que o <code>stylus()</code> já tem uma opção de comprimir os arquivos?</em></p>
<p>O Stylus tem uma diretiva chamada <code>@css</code>, onde você pode colocar códigos CSS “brutos”. Imagine que você baixou um plugin para usar no seu app ou site, e esse veio com um CSS. Se você está assistindo arquivos <code>.styl</code>, não é legal misturar as coisas, e colocar um arquivo <code>.css</code> junto. </p>
<p>O que você pode fazer é usar a extensão <code>.styl</code> e colocar todo o seu CSS na diretiva <code>@css</code>:</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">css</span> </span>{</div><div class="line">  <span class="class">.plugin</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ff0</span></span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Só que, tudo o que está dentro dessa diretiva, o Stylus ignora. Ele não compila, nem ao menos minifica. Assim, seu código ficaria com parte dele sem minificar. Então você pode usar em conjunto o <code>compress: true</code> do <code>stylus()</code> e o <code>minifycss()</code> para minificar o que restar dessas diretivas ;)</p>
<p><em>Ok, já sei como minificar CSS e também como utilizar um pré-processador. Mas toda vez que eu alterar um arquivo, vou precisar ficar rodando o comando <code>gulp</code> no terminal? Não tem como o Gulp ficar assistindo meus arquivos, como o SASS faz?</em></p>
<h2 id="O_método_watch()">O método <code>watch()</code></h2>
<p>Claro que tem! Você pode usar o método <code>watch()</code> pra isso! Vamos mudar um pouco a estrutura do nosso <code>gulpfile.js</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'css'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.watch( <span class="string">'./src/stylus/**/*.styl'</span>, [ <span class="string">'css'</span> ] );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>O que eu fiz foi, basicamente, renomear a task <code>default</code> para <code>css</code> e criar uma nova task <code>default</code>, com o <code>watch()</code>.</p>
<p>No primeiro parâmetro, você passa os arquivos que você quer assistir. E no segundo, você passa um array de tasks que precisam ser executadas toda vez que você fizer alguma alteração nesses arquivos do primeiro parâmetro! Bem simples!</p>
<p>Agora, executando o comando <code>gulp</code> no terminal, ele não vai te devolver o prompt para voltar a digitar, pois estará assistindo às alterações dos arquivos. Para parar o <code>watch()</code>, use o <code>Ctrl + C</code>.</p>
<p>Esses são os métodos que você precisa conhecer do Gulp:</p>
<ul>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname-deps-fn" target="_blank" rel="external">gulp.task()</a>: cria uma task;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpsrcglobs-options" target="_blank" rel="external">gulp.src()</a>: caminho dos fontes;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpdestpath-options" target="_blank" rel="external">gulp.dest()</a>: caminho de destino;</li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb" target="_blank" rel="external">gulp.watch()</a>: assiste os arquivos.</li>
</ul>
<p>Cada um desses métodos tem mais opções além das que mostrei. A documentação completa está no links de cada um, acima. Mas para começar a brincar com Gulp, isso que eu mostrei já vai resolver!</p>
<p>Mais ainda temos outro problema: toda vez que estivermos compilando os arquivos, precisamos olhar no terminal para ver se já compilou, voltar no browser e recarregar a tela. Olhar no terminal, ir até o browser, recarregar a tela… infinitamente. Não dá pra melhorar isso?</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/watching.gif" alt="Assistindo"></p>
<h2 id="Notificações">Notificações</h2>
<p>O Gulp tem vários <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">plugins</a> que você pode utilizar. Um que é muito útil, é o <code>gulp-notify</code>. Ao finalizar uma task (ou no momento em que você escolher que quer executá-lo), ele utiliza as notificações do seu sistema para dizer que aquele momento chegou! Vamos instalar ele agora mesmo!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev gulp-notify</div></pre></td></tr></table></figure>

<p>Agora vamos configurar nosso <code>gulpfile.js</code>, adicionando o <code>notify()</code> para mostrar uma mensagem assim que o nosso arquivo CSS for gerado:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>( <span class="string">'gulp'</span> );</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>( <span class="string">'gulp-minify-css'</span> );</div><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>( <span class="string">'gulp-stylus'</span> );</div><div class="line"><span class="keyword">var</span> notify = <span class="built_in">require</span>( <span class="string">'gulp-notify'</span> );</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'css'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.src( <span class="string">'./src/stylus/**/*.styl'</span> )</div><div class="line">    .pipe( stylus() )</div><div class="line">    .pipe( minifycss() )</div><div class="line">    .pipe( gulp.dest( <span class="string">'./public/css'</span> ) )</div><div class="line">    .pipe( notify( <span class="string">'CSS OK!'</span> ) );</div><div class="line">});</div><div class="line">  </div><div class="line">gulp.task( <span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  gulp.watch( <span class="string">'./src/stylus/**/*.styl'</span>, [ <span class="string">'css'</span> ] );</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Agora, executando o comando <code>gulp</code> novamente, temos a notificação:</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulp-notify.jpg" alt="Notificação com gulp-notify"></p>
<p>Uhuull!!</p>
<p><img src="http://blog.da2k.com.br/uploads/2015/01/uhul.gif" alt="Uhuull!!"></p>
<h2 id="Plugins">Plugins</h2>
<p>O Gulp tem milhões de outros plugins que você pode usar. Para encontrar todos os plugins homologados, acesse: <a href="http://gulpjs.com/plugins/" target="_blank" rel="external">http://gulpjs.com/plugins/</a></p>
<p>Se não encontrar um plugin que você precisa, você pode facilmente usar algum módulo do NodeJS para criar sua tarefa, já que você escreve o seu <code>gulpfile.js</code> em puro NodeJS. Todos os pacotes do Node você encontra em <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></p>
<p>Na página do plugin, tanto no NPM como no Github, você vai encontrar a documentação de como utilizá-lo. Não tem segredo.</p>
<h2 id="A_flag_—save-dev">A flag —save-dev</h2>
<p>Lembra que instalamos todas as nossas dependências com a flag <code>--save-dev</code>? Porque isso é importante?</p>
<p>Como você pôde perceber, todas as dependências ficam listadas no arquivo <code>package.json</code>. Se você quiser começar um novo projeto, e for utilizar as mesmas configurações que você utilizou da última vez, você só precisa executar dois simples passos:</p>
<ol>
<li>Copiar os arquivos <code>package.json</code> e <code>gulpfile.js</code> para o diretório do novo projeto;</li>
<li>Executar o comando <code>npm i</code>.</li>
</ol>
<p>Fazendo isso, o NPM irá ler o seu <code>package.json</code> e, todos os módulos encontrados em <code>dependencies</code> e <code>devDependencies</code> serão automaticamente instalados. Você não precisa nem copiar a pasta node_modules (que ficará bem grande com o tempo), pois ela será criada automaticamente ao executar o <code>npm i</code> :D</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Existem vários plugins que irão facilitar o seu dia-a-dia usando o GulpJS. Nos próximos artigos, vou mostrar alguns deles, que acho bastante importante utilizar, mostrando também algumas boas práticas de como você poderá organizar suas tasks para que seu <code>gulpfile.js</code> não fique gigantesco. Fique ligado!</p>
<p>O que achou do GulpJS? Já conhecia? Utiliza outro task runner? Gostaria de compartilhar como é seu <em>workflow</em>? Comente! :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/gulpjs.png" alt=""></p>
<p>Em 2014 <a href="https://github.com/fdaciuk/talks" target="_blank" rel="external">palestrei em alguns eventos</a> evangelizando a galera sobre o uso do <a href="http://gulpjs.com/" target="_blank" rel="external">GulpJS</a>. Hoje resolvi transformar essa palestra em post, para facilitar futuras consultas e poder fazer outros posts falando mais a fundo sobre GulpJS e seus plugins!</p>
<p>Mas precisamos começar de algum lugar! Vem comigo? :D</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="task runner" scheme="http://blog.da2k.com.br/tags/task-runner/"/>
    
      <category term="gulpjs" scheme="http://blog.da2k.com.br/tags/gulpjs/"/>
    
      <category term="nodejs" scheme="http://blog.da2k.com.br/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Como criar Extensões para o Google Chrome]]></title>
    <link href="http://blog.da2k.com.br/2015/01/23/como-criar-extensoes-para-o-google-chrome/"/>
    <id>http://blog.da2k.com.br/2015/01/23/como-criar-extensoes-para-o-google-chrome/</id>
    <published>2015-01-23T00:00:00.000Z</published>
    <updated>2015-01-23T01:10:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/chrome-extensions.jpg" alt="Chrome Extension"></p>
<p>Sabe quando você está usando um aplicativo web, e percebe que falta alguma funcionalidade que, ao seu ver, você conseguiria resolver facilmente com <strong>Javascript</strong>? Mas como você não trabalha na empresa que criou o aplicativo, você fica de mãos atadas e diz: “- Eu mesmo vou fazer um aplicativo desses. Do zero!”, mas não faz, porque vai tomar muito tempo, ae você procrastina e continua chorando porque aquele app deveria ter a funcionalidade que você quer?</p>
<p><strong>Seus problemas acarabam!</strong> Agora você pode criar uma <strong>Chrome Extension</strong>, usando somente Javascript (que lindo isso cara *_* ) e EXTENDENDO as funcionalidades do aplicativo que você usa conforme a sua necessidade! </p>
<p>Curtiu a ideia? Quer aprender a fazer? Vem comigo xD</p>
<a id="more"></a>

<h2 id="Motivação">Motivação</h2>
<p>O que me motivou a criar uma <em>Chrome Extension</em> foi o <a href="http://grooveshark.com/" target="_blank" rel="external">Grooveshark</a>. É a ferramenta que mais gosto pra passar o dia todo ouvindo música - sem propagandas - e programando :D</p>
<p>Só que ele tem um problema: a cada <strong>x</strong> minutos (não tenho certeza se é 15 ou 30), ele pára de tocar e pergunta: “- Você ainda está aí?”; e para voltar a tocar, você precisa clicar no botão “Resume” ¬¬</p>
<p>Sério, já passei algumas horas do dia com o fone apertando o ouvindo, no silêncio, porque estava focando em algum código, e quando percebi o Grooveshark já havia parado a muito tempo.</p>
<p>Então pensei comigo: “- Por que não criar uma extensão do Chrome que clique nesse botão <strong>Resume</strong> pra mim?” E <a href="https://github.com/fdaciuk/dont-stop-grooveshark/" target="_blank" rel="external">foi exatamente o que eu fiz!</a></p>
<h2 id="Por_onde_começar">Por onde começar</h2>
<p>O Google tem um <a href="https://developer.chrome.com/extensions/getstarted" target="_blank" rel="external">guia</a> para que você possa desenvolver sua própria extensão, mas como está em Inglês, resolvi escrever esse artigo, até pra mostrar algumas <a href="#Surpresinha"><em>surpresinhas</em></a> que você não espera quando vai fazer uma treta dessas xD</p>
<p>Vamos começar então criando um diretório para nossa extensão e um arquivo <code>manifest.json</code>.</p>
<h2 id="O_arquivo_manifest-json">O arquivo manifest.json</h2>
<p>Esse arquivo não é nada mais que um JSON, onde ficarão os metadados relacionados à sua extensão: nome da extensão, descrição, versão, permissões, etc. <a href="https://developer.chrome.com/extensions/manifest" target="_blank" rel="external">Nesse link</a> você encontra todos os metadados que podem ser incluídos no <code>manifest.json</code>.</p>
<p>Vou mostrar os exemplos baseados no <a href="https://github.com/fdaciuk/dont-stop-grooveshark/" target="_blank" rel="external"><strong>Don’t stop Grooveshark</strong></a>. O <code>manifest.json</code> ficará assim:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  <span class="string">"name"</span>: <span class="string">"Don't stop Grooveshark"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.2"</span>,</div><div class="line">  <span class="string">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Google Chrome Extension that don't leaves Grooveshark stop playing."</span>,</div><div class="line">  <span class="string">"icons"</span> : {</div><div class="line">    <span class="string">"16"</span> : <span class="string">"icon128.png"</span>,</div><div class="line">    <span class="string">"48"</span> : <span class="string">"icon128.png"</span>,</div><div class="line">    <span class="string">"128"</span> : <span class="string">"icon128.png"</span></div><div class="line">  },</div><div class="line">  <span class="string">"content_scripts"</span>: [{</div><div class="line">    <span class="string">"matches"</span>: [ <span class="string">"*://grooveshark.com/*"</span> ],</div><div class="line">    <span class="string">"js"</span>: [ <span class="string">"dont-stop-grooveshark.js"</span> ]</div><div class="line">  }]</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Vou comentar os parâmetros que não são tão óbvios, ok?</p>
<h3 id="mainfest_version">mainfest_version</h3>
<p>Esse parâmetro recebe um número inteiro, que representa a versão do mainfesto que o sua extensão está usando. A partir do <em>Chrome 18</em>, a versão <code>1</code> foi depreciada. Você deveria sempre usar a <code>2</code> a partir de então.</p>
<h3 id="icons">icons</h3>
<p>O ícone da sua extensão, que será mostrado na Chrome Store, ou quando sua extensão for mostrada na barra de extensões do <em>Chrome</em>.</p>
<p>É recomendado que você tenha ao menos o tamanho de ícone em <code>128x128px</code>. Se possível, passe todos os tamanhos pedidos (16x16, 48x48, 128x128), pois o <em>Chrome</em> irá selecionar o que for mais apropriado para o momento que ele precisar ser apresentado.</p>
<h3 id="content_scripts">content_scripts</h3>
<p><em><strong>Content scripts</strong> is where the magic happens!</em> Aqui é o lugar onde você pode adicionar seus próprios <em>scripts</em> ou <em>css</em> e adicioná-los à alguma página na web.</p>
<p>A propriedade <code>matches</code> recebe um array de domínios que sua extensão precisa de permissão para acessar. </p>
<p>A propriedade <code>js</code> recebe um array de arquivos JS que serão incluídos quando esses domínios forem acessados.</p>
<p>Você ainda pode ter uma propriedade <code>css</code>, que também receberá um array de arquivos CSS para estilizar a página do(s) domínio(s) setado(s) em <code>matches</code>.</p>
<p>Basicamente é isso que você vai precisar. Se estiver pensando em fazer uma extensão um pouco mais complexa, talvez você precise setar mais alguns parâmetros, que podem ser encontrados <a href="https://developer.chrome.com/extensions/content_scripts" target="_blank" rel="external">nesse link</a>.</p>
<h2 id="A_magia">A magia</h2>
<p>No caso do <strong>Don’t stop Grooveshark</strong>, o que eu preciso que seja feito é que, sempre que aparecer na tela aquela mensagem perguntando se eu ainda estou ali, o botão de <strong>Resume</strong> deve receber um clique automaticamente.</p>
<p>O código utilizado no arquivo <code>dont-stop-grooveshark.js</code> é o seguinte:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span><span class="params">( doc )</span> </span>{</div><div class="line"><span class="pi">  'use strict'</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log( <span class="string">"Don't stop Grooveshark! ;)"</span> );</div><div class="line">  <span class="keyword">var</span> $resumePlaybackButton;</div><div class="line">  </div><div class="line">  <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> $resumePlaybackButton = doc.querySelector( <span class="string">'[data-translate-text="LB_INTERACTION_TIME_RESUME"]'</span> );</div><div class="line">    <span class="keyword">if</span>( ! $resumePlaybackButton ) {</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line">    </div><div class="line">    $resumePlaybackButton.click();</div><div class="line">  }, <span class="number">3000</span>);</div><div class="line">})( <span class="built_in">document</span> );</div></pre></td></tr></table></figure>

<p>A única referência que eu tenho para o botão de <strong>Resume</strong>, é um atributo <code>data-translate-text</code>, com o conteúdo <code>LB_INTERACTION_TIME_RESUME</code>. Então o que eu faço é, a cada 3 segundos, verificar se esse botão está na tela e dar um clique nele. Se ele não estiver, não faço nada. :)</p>
<h2 id="Conclusão">Conclusão</h2>
<p>Tendo acesso direto a um app, e a possibilidade de injetar Javascript, você pode fazer QUALQUER COISA que quiser! Existem algumas extensões que precisam de uma tela específica para setar algumas configurações. Isso também é possível fazer, mas vou deixar pra mostrar isso em um próximo artigo :D</p>
<h2 id="Surpresinha">Surpresinha</h2>
<p>Para subir uma <em>Chrome Extension</em> para o <a href="">respositório oficial</a>, você precisa pagar <strong>U$ 5</strong> <del>doletas</del>. Apesar do preço baixo, - e você só precisar pagar esse valor uma única vez - ele serve como uma “segurança” para que muitos desenvolvedores não postem qualquer porcaria lá (apesar de já ter :P). Imagina se não cobrassem :P</p>
<p>Depois desse pagamento, você pode fazer quantas extensões quiser, e subir à vontade!</p>
<p>Por hoje é isso! </p>
<p>E aí: para qual app você vai fazer a sua extensão? :D</p>
<blockquote>
<p>Sobre o #1postperday: <a href="http://blog.da2k.com.br/2014/12/31/um-post-por-dia/" target="_blank" rel="external">http://blog.da2k.com.br/2014/12/31/um-post-por-dia/</a></p>
<p>Tem alguma sugestão para os próximos posts do #1postperday? Deixe ela aqui: <a href="https://github.com/fdaciuk/fdaciuk.github.io/issues/1" target="_blank" rel="external">https://github.com/fdaciuk/fdaciuk.github.io/issues/1</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.da2k.com.br/uploads/2015/01/chrome-extensions.jpg" alt="Chrome Extension"></p>
<p>Sabe quando você está usando um aplicativo web, e percebe que falta alguma funcionalidade que, ao seu ver, você conseguiria resolver facilmente com <strong>Javascript</strong>? Mas como você não trabalha na empresa que criou o aplicativo, você fica de mãos atadas e diz: “- Eu mesmo vou fazer um aplicativo desses. Do zero!”, mas não faz, porque vai tomar muito tempo, ae você procrastina e continua chorando porque aquele app deveria ter a funcionalidade que você quer?</p>
<p><strong>Seus problemas acarabam!</strong> Agora você pode criar uma <strong>Chrome Extension</strong>, usando somente Javascript (que lindo isso cara *_* ) e EXTENDENDO as funcionalidades do aplicativo que você usa conforme a sua necessidade! </p>
<p>Curtiu a ideia? Quer aprender a fazer? Vem comigo xD</p>
]]>
    
    </summary>
    
      <category term="1postperday" scheme="http://blog.da2k.com.br/tags/1postperday/"/>
    
      <category term="chrome extension" scheme="http://blog.da2k.com.br/tags/chrome-extension/"/>
    
      <category term="javascript" scheme="http://blog.da2k.com.br/categories/javascript/"/>
    
  </entry>
  
</feed>
